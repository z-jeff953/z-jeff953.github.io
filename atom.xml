<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeff&#39;s blog</title>
  
  <subtitle>Keep Curious , Keep Learning !</subtitle>
  <link href="http://zjeff-953.gitee.io/zjeff/atom.xml" rel="self"/>
  
  <link href="http://zjeff-953.gitee.io/zjeff/"/>
  <updated>2021-12-15T16:09:08.764Z</updated>
  <id>http://zjeff-953.gitee.io/zjeff/</id>
  
  <author>
    <name>Jeffords zuo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实习经历 - 深圳腾讯CSIG腾讯云</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/12/16/%E5%AE%9E%E4%B9%A0%E7%BB%8F%E5%8E%86%20-%20%E6%B7%B1%E5%9C%B3%E8%85%BE%E8%AE%AFCSIG%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/12/16/%E5%AE%9E%E4%B9%A0%E7%BB%8F%E5%8E%86%20-%20%E6%B7%B1%E5%9C%B3%E8%85%BE%E8%AE%AFCSIG%E8%85%BE%E8%AE%AF%E4%BA%91/</id>
    <published>2021-12-15T16:02:51.313Z</published>
    <updated>2021-12-15T16:09:08.764Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="实习经历-深圳腾讯CSIG腾讯云"   >          <a href="#实习经历-深圳腾讯CSIG腾讯云" class="heading-link"><i class="fas fa-link"></i></a>实习经历 - 深圳腾讯CSIG腾讯云</h1>      <span id="more"></span><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202112160007957.jpg" alt="0 (6)"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202112160007393.jpg" alt="0 (5)"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202112160007904.jpg" alt="0 (1)"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202112160008595.jpg" alt="0 (4)"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202112160007832.jpg" alt="0 (3)"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202112160008818.jpg" alt="0 (9)"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202112160009636.jpg" alt="0 (10)"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202112160004998.jpg" alt="TCA"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202112160008242.jpeg" alt="Practitioner"></p>]]></content>
    
    
    <summary type="html">描述</summary>
    
    
    
    <category term="分类" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>标题</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/12/15/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA%20-%20Springboot%20%E9%80%89%E8%AF%BE%E7%B3%BB%E7%BB%9F/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/12/15/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA%20-%20Springboot%20%E9%80%89%E8%AF%BE%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-12-15T12:24:38.189Z</published>
    <updated>2021-09-05T02:50:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>#</p><span id="more"></span>]]></content>
    
    
    <summary type="html">描述</summary>
    
    
    
    <category term="分类" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>标题</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/12/15/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA%20-%20Go%20%E9%80%A0%E8%BD%AE%E5%AD%90/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/12/15/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA%20-%20Go%20%E9%80%A0%E8%BD%AE%E5%AD%90/</id>
    <published>2021-12-15T12:24:14.892Z</published>
    <updated>2021-09-05T02:50:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>#</p><span id="more"></span>]]></content>
    
    
    <summary type="html">描述</summary>
    
    
    
    <category term="分类" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>项目展示 - 基于 Grad-CAM 的 CNN 可视化</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/12/15/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA%20-%20%E5%9F%BA%E4%BA%8E%20Grad-CAM%20%E7%9A%84%20CNN%20%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/12/15/%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA%20-%20%E5%9F%BA%E4%BA%8E%20Grad-CAM%20%E7%9A%84%20CNN%20%E5%8F%AF%E8%A7%86%E5%8C%96/</id>
    <published>2021-12-15T12:23:41.429Z</published>
    <updated>2021-12-15T13:06:46.961Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="项目展示-基于-Grad-CAM-的-CNN-可视化"   >          <a href="#项目展示-基于-Grad-CAM-的-CNN-可视化" class="heading-link"><i class="fas fa-link"></i></a>项目展示 - 基于 Grad-CAM 的 CNN 可视化</h1>      <span id="more"></span><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202112152057322.png" alt="image-20211215205755200"></p><p>效果图：</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202112152055417.jpg" alt="gradcam"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202112152055485.jpg" alt="guided_gradcam"></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.applications.vgg16 <span class="keyword">import</span> (</span><br><span class="line">    VGG16, preprocess_input, decode_predictions)</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing <span class="keyword">import</span> image</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Lambda</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line"><span class="keyword">import</span> tensorflow.keras.backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">target_category_loss</span>(<span class="params">x, category_index, nb_classes</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tf.multiply(x, K.one_hot([category_index], nb_classes))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">target_category_loss_output_shape</span>(<span class="params">input_shape</span>):</span></span><br><span class="line">    <span class="keyword">return</span> input_shape</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># utility function to normalize a tensor by its L2 norm</span></span><br><span class="line">    <span class="keyword">return</span> x / (K.sqrt(K.mean(K.square(x))) + <span class="number">1e-5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_image</span>(<span class="params">path</span>):</span></span><br><span class="line">    img_path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    img = image.load_img(img_path, target_size=(<span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line">    x = image.img_to_array(img)</span><br><span class="line">    x = np.expand_dims(x, axis=<span class="number">0</span>)</span><br><span class="line">    x = preprocess_input(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_gradient</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;GuidedBackProp&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> ops._gradient_registry._registry:</span><br><span class="line"><span class="meta">        @ops.RegisterGradient(<span class="params"><span class="string">&quot;GuidedBackProp&quot;</span></span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_GuidedBackProp</span>(<span class="params">op, grad</span>):</span></span><br><span class="line">            dtype = op.inputs[<span class="number">0</span>].dtype</span><br><span class="line">            <span class="keyword">return</span> grad * tf.cast(grad &gt; <span class="number">0.</span>, dtype) * \</span><br><span class="line">                   tf.cast(op.inputs[<span class="number">0</span>] &gt; <span class="number">0.</span>, dtype)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compile_saliency_function</span>(<span class="params">model, activation_layer=<span class="string">&#x27;block5_conv3&#x27;</span></span>):</span></span><br><span class="line">    input_img = model.<span class="built_in">input</span></span><br><span class="line">    layer_dict = <span class="built_in">dict</span>([(layer.name, layer) <span class="keyword">for</span> layer <span class="keyword">in</span> model.layers[<span class="number">1</span>:]])</span><br><span class="line">    layer_output = layer_dict[activation_layer].output</span><br><span class="line">    max_output = K.<span class="built_in">max</span>(layer_output, axis=<span class="number">3</span>)</span><br><span class="line">    saliency = K.gradients(K.<span class="built_in">sum</span>(max_output), input_img)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> K.function([input_img, K.learning_phase()], [saliency])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_backprop</span>(<span class="params">model, name</span>):</span></span><br><span class="line">    g =  tf.compat.v1.get_default_graph()</span><br><span class="line">    <span class="keyword">with</span> g.gradient_override_map(&#123;<span class="string">&#x27;Relu&#x27;</span>: name&#125;):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get layers that have an activation</span></span><br><span class="line">        layer_dict = [layer <span class="keyword">for</span> layer <span class="keyword">in</span> model.layers[<span class="number">1</span>:]</span><br><span class="line">                      <span class="keyword">if</span> <span class="built_in">hasattr</span>(layer, <span class="string">&#x27;activation&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># replace relu activation</span></span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> layer_dict:</span><br><span class="line">            <span class="keyword">if</span> layer.activation == keras.activations.relu:</span><br><span class="line">                layer.activation = tf.nn.relu</span><br><span class="line"></span><br><span class="line">        <span class="comment"># re-instanciate a new model</span></span><br><span class="line">        new_model = VGG16(weights=<span class="string">&#x27;imagenet&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> new_model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deprocess_image</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Same normalization as in:</span></span><br><span class="line"><span class="string">    https://github.com/fchollet/keras/blob/master/examples/conv_filter_visualization.py</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> np.ndim(x) &gt; <span class="number">3</span>:</span><br><span class="line">        x = np.squeeze(x)</span><br><span class="line">    <span class="comment"># normalize tensor: center on 0., ensure std is 0.1</span></span><br><span class="line">    x -= x.mean()</span><br><span class="line">    x /= (x.std() + <span class="number">1e-5</span>)</span><br><span class="line">    x *= <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># clip to [0, 1]</span></span><br><span class="line">    x += <span class="number">0.5</span></span><br><span class="line">    x = np.clip(x, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># convert to RGB array</span></span><br><span class="line">    x *= <span class="number">255</span></span><br><span class="line">    <span class="keyword">if</span> keras.backend.image_data_format() == <span class="string">&#x27;th&#x27;</span>:</span><br><span class="line">        x = x.transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">    x = np.clip(x, <span class="number">0</span>, <span class="number">255</span>).astype(<span class="string">&#x27;uint8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_compute_gradients</span>(<span class="params">tensor, var_list</span>):</span></span><br><span class="line">    grads = tf.gradients(tensor, var_list)</span><br><span class="line">    <span class="keyword">return</span> [grad <span class="keyword">if</span> grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> tf.zeros_like(var)</span><br><span class="line">            <span class="keyword">for</span> var, grad <span class="keyword">in</span> <span class="built_in">zip</span>(var_list, grads)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grad_cam</span>(<span class="params">input_model, image, category_index, layer_name</span>):</span></span><br><span class="line">    nb_classes = <span class="number">1000</span></span><br><span class="line">    target_layer = <span class="keyword">lambda</span> x: target_category_loss(x, category_index, nb_classes)</span><br><span class="line">    x = Lambda(target_layer, output_shape=target_category_loss_output_shape)(input_model.output)</span><br><span class="line">    model = Model(inputs=input_model.<span class="built_in">input</span>, outputs=x)</span><br><span class="line">    model.summary()</span><br><span class="line">    loss = K.<span class="built_in">sum</span>(model.output)</span><br><span class="line">    conv_output = [l <span class="keyword">for</span> l <span class="keyword">in</span> model.layers <span class="keyword">if</span> l.name <span class="keyword">is</span> layer_name][<span class="number">0</span>].output</span><br><span class="line">    grads = normalize(_compute_gradients(loss, [conv_output])[<span class="number">0</span>])</span><br><span class="line">    gradient_function = K.function([model.<span class="built_in">input</span>], [conv_output, grads])</span><br><span class="line"></span><br><span class="line">    output, grads_val = gradient_function([image])</span><br><span class="line">    output, grads_val = output[<span class="number">0</span>, :], grads_val[<span class="number">0</span>, :, :, :]</span><br><span class="line"></span><br><span class="line">    weights = np.mean(grads_val, axis=(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">    cam = np.ones(output.shape[<span class="number">0</span>: <span class="number">2</span>], dtype=np.float32)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, w <span class="keyword">in</span> <span class="built_in">enumerate</span>(weights):</span><br><span class="line">        cam += w * output[:, :, i]</span><br><span class="line"></span><br><span class="line">    cam = cv2.resize(cam, (<span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line">    cam = np.maximum(cam, <span class="number">0</span>)</span><br><span class="line">    heatmap = cam / np.<span class="built_in">max</span>(cam)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Return to BGR [0..255] from the preprocessed image</span></span><br><span class="line">    image = image[<span class="number">0</span>, :]</span><br><span class="line">    image -= np.<span class="built_in">min</span>(image)</span><br><span class="line">    image = np.minimum(image, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    cam = cv2.applyColorMap(np.uint8(<span class="number">255</span> * heatmap), cv2.COLORMAP_JET)</span><br><span class="line">    cam = np.float32(cam) + np.float32(image)</span><br><span class="line">    cam = <span class="number">255</span> * cam / np.<span class="built_in">max</span>(cam)</span><br><span class="line">    <span class="keyword">return</span> np.uint8(cam), heatmap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="string">&quot;1&quot;</span></span><br><span class="line">preprocessed_input = load_image(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">model = VGG16(weights=<span class="string">&#x27;imagenet&#x27;</span>)</span><br><span class="line"></span><br><span class="line">predictions = model.predict(preprocessed_input)</span><br><span class="line">top_1 = decode_predictions(predictions)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Predicted class:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s (%s) with probability %.2f&#x27;</span> % (top_1[<span class="number">1</span>], top_1[<span class="number">0</span>], top_1[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">predicted_class = np.argmax(predictions)</span><br><span class="line">cam, heatmap = grad_cam(model, preprocessed_input, predicted_class, <span class="string">&quot;block5_conv3&quot;</span>)</span><br><span class="line">cv2.imwrite(<span class="string">&quot;gradcam.jpg&quot;</span>, cam)</span><br><span class="line"></span><br><span class="line">register_gradient()</span><br><span class="line">guided_model = modify_backprop(model, <span class="string">&#x27;GuidedBackProp&#x27;</span>)</span><br><span class="line">saliency_fn = compile_saliency_function(guided_model)</span><br><span class="line">saliency = saliency_fn([preprocessed_input, <span class="number">0</span>])</span><br><span class="line">gradcam = saliency[<span class="number">0</span>] * heatmap[..., np.newaxis]</span><br><span class="line">cv2.imwrite(<span class="string">&quot;guided_gradcam.jpg&quot;</span>, deprocess_image(gradcam))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(predictions.shape)</span><br></pre></td></tr></table></div></figure><p>CAM的原理是实现可解释性的根本</p><p><img src="https://pic4.zhimg.com/80/v2-b89d6fa90da51e312ed7f2e453ca53bb_720w.jpg" alt="img"></p><p>上面是一个传统CNN的结构，通过卷积和池化层后，把特征图拉平成一维，然后是全连接层进行分类。</p><p><img src="https://pic1.zhimg.com/80/v2-bb08eb2b51a0222d57c7a0e51edffb60_720w.jpg" alt="img"></p><p>图中有一个GAP池化层，全局平均池化层。<strong>这个就是求取每一个通道的均值，可以理解为核是和特征图一样大的一般的平均池化层</strong>，假如输出特征图是一个8通道的，224x224的特征图，那么经过GAP这个池化层，就会得到8个数字，<strong>一个通道贡献一个数字，这个数字是一个通道的代表</strong></p><p>然后经过GAP之后的一维向量，再跟上一个全连接层，得到类别的概率。</p><p><img src="https://pic4.zhimg.com/80/v2-6fa0ed0643113c4b9bd0bc08456e67d7_720w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-de9017e32fb8eea64b10a455f1c88916_720w.jpg" alt="img"></p><p><strong>之前训练的模型用不了，所以才有了Grad-CAM的提出。</strong></p><p>Grad-CAM思路和CAM也是相同的，也是需要得到特征图每一个通道的权重值，然后做一个加权和。</p><p>所以关键在于，如何计算这个权重值，<strong>论文提出了这样的计算方法：</strong></p><p><img src="https://pic4.zhimg.com/80/v2-03252712304aadfcb32dd60d3dc4e9b3_720w.jpg" alt="img"></p><p>其中，z是一个特征图的像素量，就是width<em>height，可以看到，前面就是CAM的GAP的一个过程，后面的<img   src="https://www.zhihu.com/equation?tex=y%5Ec" style=""  alt="[公式]">是模型给类别c的打分，<img   src="https://www.zhihu.com/equation?tex=A_%7Bij%7D%5Ek" style=""  alt="[公式]">就是特征图中ij这个位置的元素值。<em>*那么对这个求导，其实就是这个位置的梯度。</em></em>在论文中作者证明了Grad-CAM和CAM的等价的结论，想了解的可以看看。</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202112152102612.png" alt="image-20211215210235439"></p>]]></content>
    
    
    <summary type="html">描述</summary>
    
    
    
    <category term="分类" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/12/15/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%20-%2001%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/12/15/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%20-%2001%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-15T07:25:34.872Z</published>
    <updated>2021-11-24T02:49:32.725Z</updated>
    
    <content type="html"><![CDATA[<hr><hr>        <h1 id="系统分析与设计-00-学堂在线题目"   >          <a href="#系统分析与设计-00-学堂在线题目" class="heading-link"><i class="fas fa-link"></i></a>系统分析与设计 - 00 学堂在线题目</h1>      <span id="more"></span>        <h2 id="第1章-系统分析与设计概述"   >          <a href="#第1章-系统分析与设计概述" class="heading-link"><i class="fas fa-link"></i></a>第1章 系统分析与设计概述</h2>      <div class="table-container"><div class="table-container"><table><thead><tr><th>题目</th><th>答案</th></tr></thead><tbody><tr><td>项目经理是系统构造人员之一。</td><td>X</td></tr><tr><td>信息系统是一类处理信息的系统软件。</td><td>X</td></tr><tr><td>系统规划是在项目立项之后进行。</td><td>X</td></tr><tr><td>敏捷软件开发过程模型是一种轻量级的过程模型。</td><td>V</td></tr><tr><td>应用软件依赖于系统运行环境。</td><td>V</td></tr><tr><td>信息系统通常由信息化基础设施、应用软件、数据库管理系统、数据库、业务数据、_<em>_</em>等要素组成。</td><td>[ “用户” ]</td></tr><tr><td>软件被划分为系统软件、应用软件和_<em>_</em>。</td><td>[ “中间件”, “中间件软件” ]</td></tr><tr><td>在信息系统生命周期中的_<em>_</em>、系统需求分析、系统设计阶段进行系统分析与设计活动。</td><td>[ “系统规划” ]</td></tr><tr><td>在螺旋式开发过程模型中，系统软件编码是在_<em>_</em>阶段的开发活动</td><td>[ “实施工程” ]</td></tr><tr><td>复用粒度最大的系统开发方法是_<em>_</em>。</td><td>[ “面向服务的系统开发方法” ]</td></tr></tbody></table></div></div><p>1．比较系统分析员与系统架构设计师的角色职责有何异同？</p><p>2．软件本质特性有哪些？</p><p>3．哪些开发活动是跨信息系统生命周期？</p><p>4．敏捷软件开发过程模型如何实施？</p><p>5．现代软件系统开发有哪些主流技术方法？</p><p>1.系统分析师（systemanalyst）是在系统开发中进行业务需求分析、系统需求分析、可行性分析、业务建模和指导项目开发的人。系统架构师协同系统分析师的工作，建议系统分析师按什么标准，什么工具，什么模式，什么技术去思考系统。同时，系统架构师应该对系统分析师所提出的问题，碰到的难题及时地提出解决的方法。 2.软件是复杂的，软件是人类思维和智能的一种延伸和在异体上的再现，远比任何以往人类的创造物都要复杂的多，软件的复杂性是软件的固有属性、本质特性。软件是不可见的，软件是客观世界空间和计算机空间之间的一种逻辑实体，不具有物理的形体特征。软件是不断变化的，它需要随着应用、硬件、用户和社会等各种因素的变化而不断的被修改和扩展。软件必须遵从人为的惯例并适应已有的技术和系统，软件需要随接口的不同而改变，随时间的推移而变化，而这些变化是不同的人设计的结果，许多复杂性来自保持与其他接口的一致，对软件的任何再设计，都无法简化这些复杂特性。 3.软件测试、软件维护、软件配置、软件质量保证、软件审核等等。 4.敏捷开发迭代流程一般遵循以下五个步骤：需求分析（requirements analysis）产品设计（design）功能编码（coding）功能测试（testing）部署评估（deployment / evaluation）。 5.软件开发的8大主流方法：结构化方法、Jackson方法、原型方法、面向对象方法、敏捷方法、并列争求法、水晶法、自适应软件开发（ASD)。</p>        <h2 id="第2章-面向对象建模基础"   >          <a href="#第2章-面向对象建模基础" class="heading-link"><i class="fas fa-link"></i></a>第2章 面向对象建模基础</h2>      <div class="table-container"><div class="table-container"><table><thead><tr><th>问题</th><th>答案</th></tr></thead><tbody><tr><td>面向对象的需求分析与编程语言无关。</td><td>V</td></tr><tr><td>活动图可以表示并发活动。</td><td>V</td></tr><tr><td>状态机图有自转换状态。</td><td>V</td></tr><tr><td>部署图的节点中可以嵌入构件。</td><td>V</td></tr><tr><td>BPMN可以基于WS-BPEL转换为软件流程组件。</td><td>V</td></tr><tr><td>面向对象思想应用在面向对象分析、_<em>_</em>、面向对象编程过程中。</td><td>[ “面向对象设计” ]</td></tr><tr><td>类图中类之间的关系有关联关系、依赖关系、聚合关系、_<em>_</em>。</td><td>[ “泛化关系” ]</td></tr><tr><td>通信图中的元素包括对象、_<em>_</em> 、链和自反链。</td><td>[ “消息” ]</td></tr><tr><td>BPMN流对象分为三类：活动、_<em>_</em>、网关。</td><td>[ “事件” ]</td></tr><tr><td>BPMN中数据分为数据对象、_<em>_</em>、数据输入和数据输出等。</td><td>[ “数据对象集” ]</td></tr></tbody></table></div></div><p>1．面向对象分析与面向对象设计如何建立联系？</p><p>2．BPMN和UML的应用场景有什么区别？</p><p>3．UML的面向对象思想体现在哪些方面？</p><p>4．包图与类图是否可以放在一起？</p><p>1.面向对象分析的输入是用户的功能需求，输出是简单的、理性化的分析模型，此阶段的工作更多侧重于如何理解软件的功能需求；面向对象设计的输入是面向对象分析的结果，是最终的、细化后的设计模型，此阶段的工作更多侧重于如何得到一个合适的、完整的解决方案。 2.UML应用于对软件系统进行规范化，可视化，模型化，文档化。BPMN应用于业务流程建模，方便人理解和有助于协同组织之间的业务。 3.UML提供了四种通用机制，它们被一直地应用到模型中，描述了达到面向对象建模目的的4种策略，并在UML的不同语境下被反复运用，是的UML更简单并易于使用。这四种机制分别是：规格说明（specifications）、修饰（adornments）、通用划分（common divisions）和扩展机制（extensibility mechanisms）。 4.可以。</p>        <h2 id="第3章-系统规划"   >          <a href="#第3章-系统规划" class="heading-link"><i class="fas fa-link"></i></a>第3章 系统规划</h2>      <div class="table-container"><div class="table-container"><table><thead><tr><th>题目</th><th>答案</th></tr></thead><tbody><tr><td>系统规划需要在项目立项后进行。</td><td>X</td></tr><tr><td>信息系统建设目标必须支持组织机构目标达成。</td><td>V</td></tr><tr><td>系统规划内容包括功能需求分析。</td><td>X</td></tr><tr><td>BSP方法可以直接将组织机构目标转换为信息系统目标。</td><td>X</td></tr><tr><td>在完成项目成本预算后就可以进行任务分工。</td><td>X</td></tr><tr><td>系统规划涉及组织机构的信息系统目标、信息化现状分析、系统建设方案、_<em>_</em>等内容。</td><td>[ “信息系统建设计划” ]</td></tr><tr><td>系统规划步骤包括规划准备、初步调查、战略与现状分析、_<em>_</em>和确定总体架构等。</td><td>[ “确定信息系统建设目标和战略” ]</td></tr><tr><td>业务流程重组强调以_<em>_</em>、以关心客户的需求和满意度为目标，对现有业务流程进行不断地优化或重新设计。</td><td>[ “业务流程为改造对象中心” ]</td></tr><tr><td>企业价值链分析可以从内部价值链、纵向价值链和_<em>_</em>价值链角度进行分析。</td><td>[ “横向价值链” ]</td></tr><tr><td>在项目成本估算中，既可以用货币单位表示，也可以采用工时、人月、_<em>_</em>等单位表示费用估计值。</td><td>[ “人天” ]</td></tr></tbody></table></div></div><p>\1. 为什么需要在系统规划阶段进行可行性分析？</p><p>2．哪种方法适合于协作型企业的信息系统规划？</p><p>3．如何分析组织机构的价值链？</p><p>4．如何进行项目的WBS工作任务分解？</p><p>5．在项目计划中，如何实现任务进度安排？</p><p>6．在信息系统项目开发中，需要遵从工程伦理道德规范？</p><p>1.可行性研究的意义在于，虽然可行性研究不能指出项目最终的详细计划和方向，但可行性研究可以在项目定义阶段用较小的代价识别出错误构思的系统，从而规避未来更多的资源投入的损失（时间、资金、人力、机会），或者因遭遇到无法逾越的技术障碍或环境障碍导致的不可避免的失败。 2.企业系统规划法（BPS）是从企业目标入手，逐步将企业目标转化为管理信息系统的目标和结构，从而更好地支持企业目标的实现。 3.运用价值链分析法确定与成本管理有关的价值活动企业的价值活动可以分为五种主要活动和四种辅助活动。五种主要活动包括（1）投入性活动，如收货、储存和配置等相关活动；（2）生产作业，即将投入转化为最终产品的相关活动；（3）产出性活动，如产成品的运输、储存、客户联系、定单处理等；（4）销售活动，旨在让顾客了解和购买商品，如广告、促销、销售机构的费用等；（5）服务活动，包括培训、修理、维护保养、部件更新等，旨在提高产品的附加值。 4.工作分解结构（简称WBS）跟因数分解是一个原理，就是把一个项目，按一定的原则分解，项目分解成任务，任务再分解成一项项工作，再把一项项工作分配到每个人的日常活动中，直到分解不下去为止。即：项目→任务→工作→日常活动。工作分解结构以可交付成果为导向，对项目要素进行的分组，它归纳和定义了项目的整个工作范围，每下降一层代表对项目工作的更详细定义。WBS总是处于计划过程的中心，也是制定进度计划、资源需求、成本预算、风险管理计划和采购计划等的重要基础。 5.通过里程碑式管理是控制项目进度。可以利用里程碑来管理项目，让包括自己、客户、组员和领导都了解项目的整个进度，完成了多少，该以哪种节奏工作。里程碑一般是完成阶段的工作标志，标志着上一个阶段的结束和下一个阶段的开始。通过里程碑项目经理可以为下一步工作作出决策，准确评估。 6.需要。工程伦理是调整工程与技术、工程与社会之间关系的道德规范,对工程师的伦理行为和工程建设起着引导、规范、开拓等重要作用。 工程伦理准则包括五个方面:以人为本、关爱生命、安全可靠、关爱自然、公平正义。 工程师的社会职责事关人类的前途和命运,工程师要对工程活动的全面社会意义和长远社会影响建立自觉的认识,承担起全部的社会责任。</p>        <h2 id="第4章-系统需求分析"   >          <a href="#第4章-系统需求分析" class="heading-link"><i class="fas fa-link"></i></a>第4章 系统需求分析</h2>      <div class="table-container"><div class="table-container"><table><thead><tr><th>题目</th><th>答案</th></tr></thead><tbody><tr><td>BPMN的编排流程中没有泳池。</td><td>V</td></tr><tr><td>UML用例之间的扩展关系箭头是从扩展用例指向被扩展用例。</td><td>V</td></tr><tr><td>活动图无法表达并发执行的活动。</td><td>X</td></tr><tr><td>类图中两个类之间的泛化关系是指两个类之间的一般与特殊关系。</td><td>V</td></tr><tr><td>需求变更管理需要有专门的变更过程控制。</td><td>V</td></tr><tr><td>观察法分为旁观式观察、解释式观察、_<em>_</em>。</td><td>[ “参与式观察” ]</td></tr><tr><td>调查表中的封闭式问题有3种形式：单选/多选问题、评价问题、_<em>_</em>。</td><td>[ “排序问题” ]</td></tr><tr><td>用例图包含的元素有用例、关系、_<em>_</em>。</td><td>[ “参与者”, “角色” ]</td></tr><tr><td>需求规格说明书中非常重要的三部分内容分别是功能性需求、_<em>_</em>、接口需求。</td><td>[ “非功能性需求” ]</td></tr><tr><td>一个类包含三方面要素：类名、属性、_<em>_</em>。</td><td>[ “操作”, “方法” ]</td></tr></tbody></table></div></div><p>1．哪些需求采集方法适用于初期需求不明确的场景？</p><p>2．调查表法在什么场景中比较有效？</p><p>3．快速应用开发与原型法有什么区别？</p><p>\4. BPMN与UML中活动图在表现业务流程方面有什么区别？</p><p>\5. 功能性需求与非功能性需求对项目难易程度的影响分别有多大？</p><p>备注：每个学生除参与讨论以上问题外，还需自拟本章讨论问题或参与他人问题讨论。</p><p>\1. 原型法、头脑风暴法 2. 相对来说比较清晰简单的时候 3. 快速应用程序开发(RAD)不仅仅是一个流程或平台(稍后我们将讨论RAD与敏捷)，它代表了软件设计、构建和交付方式的根本转变。除了加快产品上市、降低成本和提高质量之外，RAD在概念上还与其他IT趋势保持一致，这些趋势有利于敏捷性、迭代和重用。 4. BPMN可以很详细地描述组织机构的业务流程过程，UML中活动图适合简略描述业务流程。 5. 功能性需求，一般是我们显性易见的，就是一般实现了什么功能，提供了什么服务，非功能性需求，以下应用维基百科的定义（虽然有些晦涩和绕口，但是我认为是比较精到和准确的） 在系统工程及需求工程中，非功能性需求（Non-functional requirement）是指依一些条件判断系统运作情形或其特性，而不是针对系统特定行为的需求。和非功能性需求相对的是功能需求，后者会定义系统特定的行为或功能。非功能性需求也可以视为为了满足客户业务需求而需要符合，但又不在功能需求以外的特性。</p>        <h2 id="第5章-系统架构设计"   >          <a href="#第5章-系统架构设计" class="heading-link"><i class="fas fa-link"></i></a>第5章 系统架构设计</h2>      <div class="table-container"><div class="table-container"><table><thead><tr><th>题目</th><th>答案</th></tr></thead><tbody><tr><td>类图模型在系统设计各阶段都需要涉及。</td><td>V</td></tr><tr><td>系统数据架构是一类数据库模型。</td><td>X</td></tr><tr><td>系统架构的本质就是软件架构。</td><td>X</td></tr><tr><td>客户机/服务器体系架构适合Web应用。</td><td>V</td></tr><tr><td>异步消息通信模式适合银行转账业务。</td><td>X</td></tr><tr><td>系统架构通常包括系统拓扑架构、系统数据架构、系统软件架构和_<em>_</em>等。</td><td>[ “系统应用架构”, “应用架构” ]</td></tr><tr><td>典型软件系统一般被划分为表示层、业务逻辑层、<em>__</em>和数据存储层。</td><td>[ “数据存取访问层” ]</td></tr><tr><td>客户/服务模式可以细分为<em>__</em>、多客户/多服务模式、多层客户/服务模式。</td><td>[ “多客户/单服务模式” ]</td></tr><tr><td>在面向服务的软件架构中，其通信模式主要有服务注册通信模式、<em>__</em>、服务句柄代理转发通信模式、服务发现通信模式。</td><td>[ “服务代理转发通信模式” ]</td></tr><tr><td>软件对象之间的消息通信模式主要有同步消息通信模式和<em>__</em>。</td><td>[ “异步消息通信模式” ]</td></tr></tbody></table></div></div><p>1．系统设计过程涉及哪些主要开发活动？</p><p>2．系统架构设计如何满足系统非功能需求？</p><p>3．系统数据架构设计一般给出哪些内容？</p><p>4．微服务与微服务体系架构有何异同？</p><p>5．软件架构模式在系统开发中应如何选择？</p><p>1.系统设计是根据系统分析的结果，运用系统科学的思想和方法，设计出能最大限度满足所要求的目标 (或目的) 的新系统的过程。 系统设计内容，包括确定系统功能、设计方针和方法，产生理想系统并作出草案，通过收集信息对草案作出修正产生可选设计方案，将系统分解为若干子系统，进行子系统和总系统的详细设计并进行评价，对系统方案进行论证并作出性能效果预测。 2.考虑安全性、可靠性、互操作性、健壮性等非功能需求，然后依据相应的系统开放方法进行具体的详细设计。 3.数据架构是一套规范和文档的集合，包括：企业数据模型；信息的价值链分析：使数据与业务流程及其他企业架构的组件相一致；相关数据交付架构：包括数据库架构、数据整合架构、数据仓库/商务智能架构、文档和内容架构，以及元数据架构。 4.微服务是SOA的一种，是一种设计方法，其中包含多个服务，服务之间通过相互依赖最终提供一系列的功能。一个服务通常以独立的形式存在与操作系统进程中。各个服务之间通过网络调用。而微服务架构:其实和SOA架构类似,微服务是在SOA上做的升华，微服务架构强调的一个重点是“业务需要彻底的组件化和服务化”，原有的单个业务系统会拆分为多个可以独立开发、设计、运行的小应用。这些小应用之间通过服务完成交互和集成。 5.系统设计师应当明确分离关注点。每层负责一个明确的任务，由于关注点的分离，易于测试：每个层都是可测试的，可维护的并且易于更新。在这样明确之后，再选择合适的软件架构模式。</p>        <h2 id="第6章-软件建模设计"   >          <a href="#第6章-软件建模设计" class="heading-link"><i class="fas fa-link"></i></a>第6章 软件建模设计</h2>      <div class="table-container"><div class="table-container"><table><thead><tr><th>题目</th><th>答案</th></tr></thead><tbody><tr><td>处于相同状态的同类的不同对象对同一事件的反应往往是一样的，而处于不同状态的同一对象则对同一事件会做出不同反应。</td><td>V</td></tr><tr><td>只要将包中元素的可见性设为公共的，则其他包就可以访问它。</td><td>X</td></tr><tr><td>聚合与泛化都是面向对象系统支持功能复用的强大技术。</td><td>X</td></tr><tr><td>在UML构件图中，需要定义消息来描述构件之间的联系。</td><td>X</td></tr><tr><td>所有对象都通过类来描述，所有类都具有对象。</td><td>X</td></tr><tr><td><em>__</em>通过对对象的各种状态建立模型来描述对象随时间变化的动态行为，并且它是以独立的对象为中心进行描述的。</td><td>[ “状态机图” ]</td></tr><tr><td>在UML类图中，类用矩形图符来表示，这个矩形由3个部分组成，分别是类型名、<em>__</em>和操作。</td><td>[ “属性” ]</td></tr><tr><td>UML中的交互图包括顺序图和<em>__</em>。</td><td>[ “通信图”, “协作图” ]</td></tr><tr><td>UML中顺序图表示为二维图，纵向是对象，横向代表参与交互对象之间的<em>__</em>。</td><td>[ “消息” ]</td></tr><tr><td>状态机图由对象的状态和连接这些状态的<em>__</em>组成。</td><td>[ “转换” ]</td></tr></tbody></table></div></div><p>1．系统的静态模型、交互模型和状态机模型各有哪些特点？</p><p>2．类之间的关系有哪些？举例描述这些关系。</p><p>3．顺序图和通信图有哪些区别和联系？</p><p>\4. 泛化有什么作用？如何实现类继承？</p><p>\5. 接口和抽象类有什么区别和联系？</p><p>\1. 静态结构视图用来表示软件系统的类程序组成结构，同时也反映各个类中封装的数据与操作方法。静态结构视图支撑面向对象程序编程。2. 聚合关系，包括专属聚合，从属聚合，拥有聚合，成员聚合；泛化与继承关系；关联关系。3. 二者均属于动态交互模型图，顺序图强调时间先后关系，对象间消息的传递以时间顺序可视化表示，通信图消息则按空间布局。4. 泛化是指多个类的公共特征抽象到一个更一般化的类中。5. 抽象类：在Java中被abstract关键字修饰的类称为抽象类，被abstract关键字修饰的方法称为抽象方法，抽象方法只有方法的声明，没有方法体。抽象类的特点：抽象类不能被实例化只能被继承；包含抽象方法的一定是抽象类，但是抽象类不一定含有抽象方法；抽象类中的抽象方法的修饰符只能为public或者protected，默认为public；一个子类继承一个抽象类，则子类必须实现父类抽象方法，否则子类也必须定义为抽象类；抽象类可以包含属性、方法、构造方法，但是构造方法不能用于实例化，主要用途是被子类调用。接口：Java中接口使用interface关键字修饰，特点为:接口可以包含变量、方法；变量被隐士指定为public static final，方法被隐士指定为public abstract（JDK1.8之前）；接口支持多继承，即一个接口可以extends多个接口，间接的解决了Java中类的单继承问题；一个类可以实现多个接口。</p>        <h2 id="第7章-用户界面设计"   >          <a href="#第7章-用户界面设计" class="heading-link"><i class="fas fa-link"></i></a>第7章 用户界面设计</h2>      <div class="table-container"><div class="table-container"><table><thead><tr><th>题目</th><th>答案</th></tr></thead><tbody><tr><td>信息系统的功能是通过用户与系统界面交互来完成。</td><td>V</td></tr><tr><td>人的视觉规律是以中心为重点向四周发散。</td><td>X</td></tr><tr><td>在详细界面设计前需要进行系统原型设计。</td><td>V</td></tr><tr><td>输入数据格式校验是通过执行检查程序来实现的。</td><td>V</td></tr><tr><td>页面的数据列表可以打印输出。</td><td>X</td></tr><tr><td>为减少用户记忆负担，在界面上可以给出场景导引、默认值、<em>__</em>等提示。</td><td>[ “下拉列表值”, “快捷方式”, “逐次推进的提示方式” ]</td></tr><tr><td>用户界面设计一般包括界面结构设计、界面交互设计、界面导航设计、界面视觉设计和<em>__</em>。</td><td>[ “界面布局设计”, “界面输入/输出设计” ]</td></tr><tr><td>Web页面导航主要有水平栏目导航、垂直栏目导航、混合栏目导航和<em>__</em>。</td><td>[ “页面内容导航” ]</td></tr><tr><td>在移动App页面布局设计中，需要对页面信息内容、页面主题内容、用户行为心理和<em>__</em>进行整体考虑。</td><td>[ “用户功能操作” ]</td></tr><tr><td>在手机App页面布局设计中，页面可以分为背景层、内容层、悬浮层和<em>__</em>。</td><td>[ “弹出层” ]</td></tr></tbody></table></div></div><p>1．用户界面设计需要遵循哪些基本原则？</p><p>2．用户界面输入需要考虑解决哪些问题？</p><p>3．Web页面结构设计与移动App界面结构设计有哪些异同？</p><p>4．Web页面输出有哪些形式？</p><p>5．用户界面交互设计主要包括哪些方面的内容？</p><p>1.用户原则。人机界面设计首先要确立用户类型。划分类型可以从不同的角度，视实际情况而定。确定类型后要针对其特点预测他们对不同界面的反应。这就要从多方面设计分析。信息最小量原则。人机界面设计要尽量减少用户记忆负担，采用有助于记忆的设计方案。帮助和提示原则。要对用户的操作命令作出反应，帮助用户处理问题。系统要设计有恢复出错现场的能力，在系统内部处理工作要有提示，尽量把主动权让给用户。媒体最佳组合原则。多媒体界面的成功并不在于仅向用户提供丰富的媒体，而应在相关理论指导下，注意处理好各种媒体间的关系,恰当选用。 2.制定输入规则，防止无效输入；一切的输入都是威胁，需要制定相应的安全规则。 3.web系统基于B/S架构实现信息系统,通常包含大量功能页面,移动App开发基于有限软硬件资源,需要面对多终端多使用场景的问题。 4.数据报表，数据图。 5.交互设计，它主要指的是两个或多个个体之间交流和互动方式的设计，以达成某种设计产品的目的。交互设计的目标一般从“可用性”和”用户体验“两个层面出发，以帮助解决用户需求。首先是明确商业目标和用户目标。商业目标是很多初级的设计师容易忽略甚至抗拒的，在设计中，不仅仅要考虑用户体验和用户目标，还要考虑业务和商业目标。然后是在不同层次上思考和规划。产品的功能层、信息层、行为层等。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;hr&gt;

        &lt;h1 id=&quot;系统分析与设计-00-学堂在线题目&quot;   &gt;
          &lt;a href=&quot;#系统分析与设计-00-学堂在线题目&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;系统分析与设计 - 00 学堂在线题目&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>生活随笔 - 13 制定对我来说的好目标以及如何达成</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/28/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2013%20%E5%88%B6%E5%AE%9A%E5%AF%B9%E6%88%91%E6%9D%A5%E8%AF%B4%E7%9A%84%E5%A5%BD%E7%9B%AE%E6%A0%87%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%BE%BE%E6%88%90/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/28/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2013%20%E5%88%B6%E5%AE%9A%E5%AF%B9%E6%88%91%E6%9D%A5%E8%AF%B4%E7%9A%84%E5%A5%BD%E7%9B%AE%E6%A0%87%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%BE%BE%E6%88%90/</id>
    <published>2021-11-28T02:15:16.609Z</published>
    <updated>2021-11-30T01:20:32.654Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="生活随笔-13-制定对我来说的好目标以及如何达成"   >          <a href="#生活随笔-13-制定对我来说的好目标以及如何达成" class="heading-link"><i class="fas fa-link"></i></a>生活随笔 - 13 制定对我来说的好目标以及如何达成</h1>      <p>目标是用来达成的，达成目标之后，就会陷入迷茫失措，如何制定下一个目标和如何达成新的目标就是需要考虑的。再往深了讲，这是关于我的人生追求，我的最终目的，我的内驱力和稳定外驱力的的问题。</p><span id="more"></span>        <h2 id="最终目的"   >          <a href="#最终目的" class="heading-link"><i class="fas fa-link"></i></a>最终目的</h2>              <h2 id="最终"   >          <a href="#最终" class="heading-link"><i class="fas fa-link"></i></a>最终</h2>      ]]></content>
    
    
    <summary type="html">描述</summary>
    
    
    
    <category term="分类" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>标题</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/26/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%20-%20lab2%20-%20%E9%80%89%E8%AF%BE%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/26/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%20-%20lab2%20-%20%E9%80%89%E8%AF%BE%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-11-26T00:47:11.814Z</published>
    <updated>2021-09-05T02:50:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>#</p><span id="more"></span>]]></content>
    
    
    <summary type="html">描述</summary>
    
    
    
    <category term="分类" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>生活随笔 - 12 我与外界</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/25/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2012%20%E6%88%91%E4%B8%8E%E5%A4%96%E7%95%8C/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/25/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2012%20%E6%88%91%E4%B8%8E%E5%A4%96%E7%95%8C/</id>
    <published>2021-11-25T05:16:53.652Z</published>
    <updated>2021-12-15T02:09:42.144Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="生活随笔-12-我与外界"   >          <a href="#生活随笔-12-我与外界" class="heading-link"><i class="fas fa-link"></i></a>生活随笔 - 12 我与外界</h1>      <p>我常常受到外界的影响，我就是格物致知，充分感知外界的人。</p><p>但是我要扬长避短，发扬共情和同理的一面，压制或者排遣敏感和追求廉价认同感的一面。</p><span id="more"></span><p>打压，恶语相向，同辈压力。</p><p>烦躁，拖延，不断内耗。</p>        <h2 id="怎么办？？？"   >          <a href="#怎么办？？？" class="heading-link"><i class="fas fa-link"></i></a>怎么办？？？</h2>      <p>一个人的强大，正是在外界打扰下仍然活出自己的。</p><p>你不是不如别人，你只是把你的精力投入到了不同的赛道，每个人的精力和时间是有限的，暂且暂且假定他们是相同的，有的人把这部分的时间投入到与生活抗争，有的人把这部分的时间投入到与家庭抗争，有的人把这部分时间投到虚拟世界的劳动，有的人把这部分时间投入到了学习成绩，有的人把这部分时间投入到了英语和科研。<br>你也有你的时间投入，你喜欢诗和远方，你喜欢工厂的东西，你喜欢货真价实的产出你喜欢你的东西能够服务到更多的人。<br>他们爱比，他们爱去做这些简单的大于小于，无所谓，每个人都有自己不擅长的地方，他们可以去炫耀他们在他们方面的成就，那是他们付出的报酬，但你也不要忽视，你在你的赛道所取得的成果，你不能像被田忌赛马一样，用别人的上等马去比你的劣等马，你珍惜你所得到的一切，也会去努力追求你想要的一切，而那些你不是很想要的，对你不是很关键的，你可以微微一笑肯定他们的成果，然后经营好自己就可以了。</p>        <h2 id="记住：总的劳动时间是恒定的，当擦鞋男孩入场的时候就是跑路的时候，当擦鞋男孩准备跑的时候就是入场的时间"   >          <a href="#记住：总的劳动时间是恒定的，当擦鞋男孩入场的时候就是跑路的时候，当擦鞋男孩准备跑的时候就是入场的时间" class="heading-link"><i class="fas fa-link"></i></a>记住：总的劳动时间是恒定的，当擦鞋男孩入场的时候就是跑路的时候，当擦鞋男孩准备跑的时候就是入场的时间</h2>      ]]></content>
    
    
    <summary type="html">生活随笔 - 12 我与童年</summary>
    
    
    
    <category term="生活随笔" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="生活随笔" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>标题</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/25/%E5%AD%A6%E7%82%B9%E5%88%AB%E7%9A%84/%E9%A9%AC%E5%8E%9F%20-%2001%20%E7%8F%AD%E8%AF%BE%E9%A2%98/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/25/%E5%AD%A6%E7%82%B9%E5%88%AB%E7%9A%84/%E9%A9%AC%E5%8E%9F%20-%2001%20%E7%8F%AD%E8%AF%BE%E9%A2%98/</id>
    <published>2021-11-25T04:01:44.184Z</published>
    <updated>2021-11-25T04:02:42.704Z</updated>
    
    <content type="html"><![CDATA[<p>#</p><span id="more"></span>]]></content>
    
    
    <summary type="html">描述</summary>
    
    
    
    <category term="分类" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/23/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%20-%2000%20%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF%E9%A2%98%E7%9B%AE/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/23/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%20-%2000%20%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF%E9%A2%98%E7%9B%AE/</id>
    <published>2021-11-23T06:40:23.189Z</published>
    <updated>2021-11-24T02:49:32.725Z</updated>
    
    <content type="html"><![CDATA[<hr><hr>        <h1 id="系统分析与设计-00-学堂在线题目"   >          <a href="#系统分析与设计-00-学堂在线题目" class="heading-link"><i class="fas fa-link"></i></a>系统分析与设计 - 00 学堂在线题目</h1>      <span id="more"></span>        <h2 id="第1章-系统分析与设计概述"   >          <a href="#第1章-系统分析与设计概述" class="heading-link"><i class="fas fa-link"></i></a>第1章 系统分析与设计概述</h2>      <div class="table-container"><div class="table-container"><table><thead><tr><th>题目</th><th>答案</th></tr></thead><tbody><tr><td>项目经理是系统构造人员之一。</td><td>X</td></tr><tr><td>信息系统是一类处理信息的系统软件。</td><td>X</td></tr><tr><td>系统规划是在项目立项之后进行。</td><td>X</td></tr><tr><td>敏捷软件开发过程模型是一种轻量级的过程模型。</td><td>V</td></tr><tr><td>应用软件依赖于系统运行环境。</td><td>V</td></tr><tr><td>信息系统通常由信息化基础设施、应用软件、数据库管理系统、数据库、业务数据、_<em>_</em>等要素组成。</td><td>[ “用户” ]</td></tr><tr><td>软件被划分为系统软件、应用软件和_<em>_</em>。</td><td>[ “中间件”, “中间件软件” ]</td></tr><tr><td>在信息系统生命周期中的_<em>_</em>、系统需求分析、系统设计阶段进行系统分析与设计活动。</td><td>[ “系统规划” ]</td></tr><tr><td>在螺旋式开发过程模型中，系统软件编码是在_<em>_</em>阶段的开发活动</td><td>[ “实施工程” ]</td></tr><tr><td>复用粒度最大的系统开发方法是_<em>_</em>。</td><td>[ “面向服务的系统开发方法” ]</td></tr></tbody></table></div></div><p>1．比较系统分析员与系统架构设计师的角色职责有何异同？</p><p>2．软件本质特性有哪些？</p><p>3．哪些开发活动是跨信息系统生命周期？</p><p>4．敏捷软件开发过程模型如何实施？</p><p>5．现代软件系统开发有哪些主流技术方法？</p><p>1.系统分析师（systemanalyst）是在系统开发中进行业务需求分析、系统需求分析、可行性分析、业务建模和指导项目开发的人。系统架构师协同系统分析师的工作，建议系统分析师按什么标准，什么工具，什么模式，什么技术去思考系统。同时，系统架构师应该对系统分析师所提出的问题，碰到的难题及时地提出解决的方法。 2.软件是复杂的，软件是人类思维和智能的一种延伸和在异体上的再现，远比任何以往人类的创造物都要复杂的多，软件的复杂性是软件的固有属性、本质特性。软件是不可见的，软件是客观世界空间和计算机空间之间的一种逻辑实体，不具有物理的形体特征。软件是不断变化的，它需要随着应用、硬件、用户和社会等各种因素的变化而不断的被修改和扩展。软件必须遵从人为的惯例并适应已有的技术和系统，软件需要随接口的不同而改变，随时间的推移而变化，而这些变化是不同的人设计的结果，许多复杂性来自保持与其他接口的一致，对软件的任何再设计，都无法简化这些复杂特性。 3.软件测试、软件维护、软件配置、软件质量保证、软件审核等等。 4.敏捷开发迭代流程一般遵循以下五个步骤：需求分析（requirements analysis）产品设计（design）功能编码（coding）功能测试（testing）部署评估（deployment / evaluation）。 5.软件开发的8大主流方法：结构化方法、Jackson方法、原型方法、面向对象方法、敏捷方法、并列争求法、水晶法、自适应软件开发（ASD)。</p>        <h2 id="第2章-面向对象建模基础"   >          <a href="#第2章-面向对象建模基础" class="heading-link"><i class="fas fa-link"></i></a>第2章 面向对象建模基础</h2>      <div class="table-container"><div class="table-container"><table><thead><tr><th>问题</th><th>答案</th></tr></thead><tbody><tr><td>面向对象的需求分析与编程语言无关。</td><td>V</td></tr><tr><td>活动图可以表示并发活动。</td><td>V</td></tr><tr><td>状态机图有自转换状态。</td><td>V</td></tr><tr><td>部署图的节点中可以嵌入构件。</td><td>V</td></tr><tr><td>BPMN可以基于WS-BPEL转换为软件流程组件。</td><td>V</td></tr><tr><td>面向对象思想应用在面向对象分析、_<em>_</em>、面向对象编程过程中。</td><td>[ “面向对象设计” ]</td></tr><tr><td>类图中类之间的关系有关联关系、依赖关系、聚合关系、_<em>_</em>。</td><td>[ “泛化关系” ]</td></tr><tr><td>通信图中的元素包括对象、_<em>_</em> 、链和自反链。</td><td>[ “消息” ]</td></tr><tr><td>BPMN流对象分为三类：活动、_<em>_</em>、网关。</td><td>[ “事件” ]</td></tr><tr><td>BPMN中数据分为数据对象、_<em>_</em>、数据输入和数据输出等。</td><td>[ “数据对象集” ]</td></tr></tbody></table></div></div><p>1．面向对象分析与面向对象设计如何建立联系？</p><p>2．BPMN和UML的应用场景有什么区别？</p><p>3．UML的面向对象思想体现在哪些方面？</p><p>4．包图与类图是否可以放在一起？</p><p>1.面向对象分析的输入是用户的功能需求，输出是简单的、理性化的分析模型，此阶段的工作更多侧重于如何理解软件的功能需求；面向对象设计的输入是面向对象分析的结果，是最终的、细化后的设计模型，此阶段的工作更多侧重于如何得到一个合适的、完整的解决方案。 2.UML应用于对软件系统进行规范化，可视化，模型化，文档化。BPMN应用于业务流程建模，方便人理解和有助于协同组织之间的业务。 3.UML提供了四种通用机制，它们被一直地应用到模型中，描述了达到面向对象建模目的的4种策略，并在UML的不同语境下被反复运用，是的UML更简单并易于使用。这四种机制分别是：规格说明（specifications）、修饰（adornments）、通用划分（common divisions）和扩展机制（extensibility mechanisms）。 4.可以。</p>        <h2 id="第3章-系统规划"   >          <a href="#第3章-系统规划" class="heading-link"><i class="fas fa-link"></i></a>第3章 系统规划</h2>      <div class="table-container"><div class="table-container"><table><thead><tr><th>题目</th><th>答案</th></tr></thead><tbody><tr><td>系统规划需要在项目立项后进行。</td><td>X</td></tr><tr><td>信息系统建设目标必须支持组织机构目标达成。</td><td>V</td></tr><tr><td>系统规划内容包括功能需求分析。</td><td>X</td></tr><tr><td>BSP方法可以直接将组织机构目标转换为信息系统目标。</td><td>X</td></tr><tr><td>在完成项目成本预算后就可以进行任务分工。</td><td>X</td></tr><tr><td>系统规划涉及组织机构的信息系统目标、信息化现状分析、系统建设方案、_<em>_</em>等内容。</td><td>[ “信息系统建设计划” ]</td></tr><tr><td>系统规划步骤包括规划准备、初步调查、战略与现状分析、_<em>_</em>和确定总体架构等。</td><td>[ “确定信息系统建设目标和战略” ]</td></tr><tr><td>业务流程重组强调以_<em>_</em>、以关心客户的需求和满意度为目标，对现有业务流程进行不断地优化或重新设计。</td><td>[ “业务流程为改造对象中心” ]</td></tr><tr><td>企业价值链分析可以从内部价值链、纵向价值链和_<em>_</em>价值链角度进行分析。</td><td>[ “横向价值链” ]</td></tr><tr><td>在项目成本估算中，既可以用货币单位表示，也可以采用工时、人月、_<em>_</em>等单位表示费用估计值。</td><td>[ “人天” ]</td></tr></tbody></table></div></div><p>\1. 为什么需要在系统规划阶段进行可行性分析？</p><p>2．哪种方法适合于协作型企业的信息系统规划？</p><p>3．如何分析组织机构的价值链？</p><p>4．如何进行项目的WBS工作任务分解？</p><p>5．在项目计划中，如何实现任务进度安排？</p><p>6．在信息系统项目开发中，需要遵从工程伦理道德规范？</p><p>1.可行性研究的意义在于，虽然可行性研究不能指出项目最终的详细计划和方向，但可行性研究可以在项目定义阶段用较小的代价识别出错误构思的系统，从而规避未来更多的资源投入的损失（时间、资金、人力、机会），或者因遭遇到无法逾越的技术障碍或环境障碍导致的不可避免的失败。 2.企业系统规划法（BPS）是从企业目标入手，逐步将企业目标转化为管理信息系统的目标和结构，从而更好地支持企业目标的实现。 3.运用价值链分析法确定与成本管理有关的价值活动企业的价值活动可以分为五种主要活动和四种辅助活动。五种主要活动包括（1）投入性活动，如收货、储存和配置等相关活动；（2）生产作业，即将投入转化为最终产品的相关活动；（3）产出性活动，如产成品的运输、储存、客户联系、定单处理等；（4）销售活动，旨在让顾客了解和购买商品，如广告、促销、销售机构的费用等；（5）服务活动，包括培训、修理、维护保养、部件更新等，旨在提高产品的附加值。 4.工作分解结构（简称WBS）跟因数分解是一个原理，就是把一个项目，按一定的原则分解，项目分解成任务，任务再分解成一项项工作，再把一项项工作分配到每个人的日常活动中，直到分解不下去为止。即：项目→任务→工作→日常活动。工作分解结构以可交付成果为导向，对项目要素进行的分组，它归纳和定义了项目的整个工作范围，每下降一层代表对项目工作的更详细定义。WBS总是处于计划过程的中心，也是制定进度计划、资源需求、成本预算、风险管理计划和采购计划等的重要基础。 5.通过里程碑式管理是控制项目进度。可以利用里程碑来管理项目，让包括自己、客户、组员和领导都了解项目的整个进度，完成了多少，该以哪种节奏工作。里程碑一般是完成阶段的工作标志，标志着上一个阶段的结束和下一个阶段的开始。通过里程碑项目经理可以为下一步工作作出决策，准确评估。 6.需要。工程伦理是调整工程与技术、工程与社会之间关系的道德规范,对工程师的伦理行为和工程建设起着引导、规范、开拓等重要作用。 工程伦理准则包括五个方面:以人为本、关爱生命、安全可靠、关爱自然、公平正义。 工程师的社会职责事关人类的前途和命运,工程师要对工程活动的全面社会意义和长远社会影响建立自觉的认识,承担起全部的社会责任。</p>        <h2 id="第4章-系统需求分析"   >          <a href="#第4章-系统需求分析" class="heading-link"><i class="fas fa-link"></i></a>第4章 系统需求分析</h2>      <div class="table-container"><div class="table-container"><table><thead><tr><th>题目</th><th>答案</th></tr></thead><tbody><tr><td>BPMN的编排流程中没有泳池。</td><td>V</td></tr><tr><td>UML用例之间的扩展关系箭头是从扩展用例指向被扩展用例。</td><td>V</td></tr><tr><td>活动图无法表达并发执行的活动。</td><td>X</td></tr><tr><td>类图中两个类之间的泛化关系是指两个类之间的一般与特殊关系。</td><td>V</td></tr><tr><td>需求变更管理需要有专门的变更过程控制。</td><td>V</td></tr><tr><td>观察法分为旁观式观察、解释式观察、_<em>_</em>。</td><td>[ “参与式观察” ]</td></tr><tr><td>调查表中的封闭式问题有3种形式：单选/多选问题、评价问题、_<em>_</em>。</td><td>[ “排序问题” ]</td></tr><tr><td>用例图包含的元素有用例、关系、_<em>_</em>。</td><td>[ “参与者”, “角色” ]</td></tr><tr><td>需求规格说明书中非常重要的三部分内容分别是功能性需求、_<em>_</em>、接口需求。</td><td>[ “非功能性需求” ]</td></tr><tr><td>一个类包含三方面要素：类名、属性、_<em>_</em>。</td><td>[ “操作”, “方法” ]</td></tr></tbody></table></div></div><p>1．哪些需求采集方法适用于初期需求不明确的场景？</p><p>2．调查表法在什么场景中比较有效？</p><p>3．快速应用开发与原型法有什么区别？</p><p>\4. BPMN与UML中活动图在表现业务流程方面有什么区别？</p><p>\5. 功能性需求与非功能性需求对项目难易程度的影响分别有多大？</p><p>备注：每个学生除参与讨论以上问题外，还需自拟本章讨论问题或参与他人问题讨论。</p><p>\1. 原型法、头脑风暴法 2. 相对来说比较清晰简单的时候 3. 快速应用程序开发(RAD)不仅仅是一个流程或平台(稍后我们将讨论RAD与敏捷)，它代表了软件设计、构建和交付方式的根本转变。除了加快产品上市、降低成本和提高质量之外，RAD在概念上还与其他IT趋势保持一致，这些趋势有利于敏捷性、迭代和重用。 4. BPMN可以很详细地描述组织机构的业务流程过程，UML中活动图适合简略描述业务流程。 5. 功能性需求，一般是我们显性易见的，就是一般实现了什么功能，提供了什么服务，非功能性需求，以下应用维基百科的定义（虽然有些晦涩和绕口，但是我认为是比较精到和准确的） 在系统工程及需求工程中，非功能性需求（Non-functional requirement）是指依一些条件判断系统运作情形或其特性，而不是针对系统特定行为的需求。和非功能性需求相对的是功能需求，后者会定义系统特定的行为或功能。非功能性需求也可以视为为了满足客户业务需求而需要符合，但又不在功能需求以外的特性。</p>        <h2 id="第5章-系统架构设计"   >          <a href="#第5章-系统架构设计" class="heading-link"><i class="fas fa-link"></i></a>第5章 系统架构设计</h2>      <div class="table-container"><div class="table-container"><table><thead><tr><th>题目</th><th>答案</th></tr></thead><tbody><tr><td>类图模型在系统设计各阶段都需要涉及。</td><td>V</td></tr><tr><td>系统数据架构是一类数据库模型。</td><td>X</td></tr><tr><td>系统架构的本质就是软件架构。</td><td>X</td></tr><tr><td>客户机/服务器体系架构适合Web应用。</td><td>V</td></tr><tr><td>异步消息通信模式适合银行转账业务。</td><td>X</td></tr><tr><td>系统架构通常包括系统拓扑架构、系统数据架构、系统软件架构和_<em>_</em>等。</td><td>[ “系统应用架构”, “应用架构” ]</td></tr><tr><td>典型软件系统一般被划分为表示层、业务逻辑层、<em>__</em>和数据存储层。</td><td>[ “数据存取访问层” ]</td></tr><tr><td>客户/服务模式可以细分为<em>__</em>、多客户/多服务模式、多层客户/服务模式。</td><td>[ “多客户/单服务模式” ]</td></tr><tr><td>在面向服务的软件架构中，其通信模式主要有服务注册通信模式、<em>__</em>、服务句柄代理转发通信模式、服务发现通信模式。</td><td>[ “服务代理转发通信模式” ]</td></tr><tr><td>软件对象之间的消息通信模式主要有同步消息通信模式和<em>__</em>。</td><td>[ “异步消息通信模式” ]</td></tr></tbody></table></div></div><p>1．系统设计过程涉及哪些主要开发活动？</p><p>2．系统架构设计如何满足系统非功能需求？</p><p>3．系统数据架构设计一般给出哪些内容？</p><p>4．微服务与微服务体系架构有何异同？</p><p>5．软件架构模式在系统开发中应如何选择？</p><p>1.系统设计是根据系统分析的结果，运用系统科学的思想和方法，设计出能最大限度满足所要求的目标 (或目的) 的新系统的过程。 系统设计内容，包括确定系统功能、设计方针和方法，产生理想系统并作出草案，通过收集信息对草案作出修正产生可选设计方案，将系统分解为若干子系统，进行子系统和总系统的详细设计并进行评价，对系统方案进行论证并作出性能效果预测。 2.考虑安全性、可靠性、互操作性、健壮性等非功能需求，然后依据相应的系统开放方法进行具体的详细设计。 3.数据架构是一套规范和文档的集合，包括：企业数据模型；信息的价值链分析：使数据与业务流程及其他企业架构的组件相一致；相关数据交付架构：包括数据库架构、数据整合架构、数据仓库/商务智能架构、文档和内容架构，以及元数据架构。 4.微服务是SOA的一种，是一种设计方法，其中包含多个服务，服务之间通过相互依赖最终提供一系列的功能。一个服务通常以独立的形式存在与操作系统进程中。各个服务之间通过网络调用。而微服务架构:其实和SOA架构类似,微服务是在SOA上做的升华，微服务架构强调的一个重点是“业务需要彻底的组件化和服务化”，原有的单个业务系统会拆分为多个可以独立开发、设计、运行的小应用。这些小应用之间通过服务完成交互和集成。 5.系统设计师应当明确分离关注点。每层负责一个明确的任务，由于关注点的分离，易于测试：每个层都是可测试的，可维护的并且易于更新。在这样明确之后，再选择合适的软件架构模式。</p>        <h2 id="第6章-软件建模设计"   >          <a href="#第6章-软件建模设计" class="heading-link"><i class="fas fa-link"></i></a>第6章 软件建模设计</h2>      <div class="table-container"><div class="table-container"><table><thead><tr><th>题目</th><th>答案</th></tr></thead><tbody><tr><td>处于相同状态的同类的不同对象对同一事件的反应往往是一样的，而处于不同状态的同一对象则对同一事件会做出不同反应。</td><td>V</td></tr><tr><td>只要将包中元素的可见性设为公共的，则其他包就可以访问它。</td><td>X</td></tr><tr><td>聚合与泛化都是面向对象系统支持功能复用的强大技术。</td><td>X</td></tr><tr><td>在UML构件图中，需要定义消息来描述构件之间的联系。</td><td>X</td></tr><tr><td>所有对象都通过类来描述，所有类都具有对象。</td><td>X</td></tr><tr><td><em>__</em>通过对对象的各种状态建立模型来描述对象随时间变化的动态行为，并且它是以独立的对象为中心进行描述的。</td><td>[ “状态机图” ]</td></tr><tr><td>在UML类图中，类用矩形图符来表示，这个矩形由3个部分组成，分别是类型名、<em>__</em>和操作。</td><td>[ “属性” ]</td></tr><tr><td>UML中的交互图包括顺序图和<em>__</em>。</td><td>[ “通信图”, “协作图” ]</td></tr><tr><td>UML中顺序图表示为二维图，纵向是对象，横向代表参与交互对象之间的<em>__</em>。</td><td>[ “消息” ]</td></tr><tr><td>状态机图由对象的状态和连接这些状态的<em>__</em>组成。</td><td>[ “转换” ]</td></tr></tbody></table></div></div><p>1．系统的静态模型、交互模型和状态机模型各有哪些特点？</p><p>2．类之间的关系有哪些？举例描述这些关系。</p><p>3．顺序图和通信图有哪些区别和联系？</p><p>\4. 泛化有什么作用？如何实现类继承？</p><p>\5. 接口和抽象类有什么区别和联系？</p><p>\1. 静态结构视图用来表示软件系统的类程序组成结构，同时也反映各个类中封装的数据与操作方法。静态结构视图支撑面向对象程序编程。2. 聚合关系，包括专属聚合，从属聚合，拥有聚合，成员聚合；泛化与继承关系；关联关系。3. 二者均属于动态交互模型图，顺序图强调时间先后关系，对象间消息的传递以时间顺序可视化表示，通信图消息则按空间布局。4. 泛化是指多个类的公共特征抽象到一个更一般化的类中。5. 抽象类：在Java中被abstract关键字修饰的类称为抽象类，被abstract关键字修饰的方法称为抽象方法，抽象方法只有方法的声明，没有方法体。抽象类的特点：抽象类不能被实例化只能被继承；包含抽象方法的一定是抽象类，但是抽象类不一定含有抽象方法；抽象类中的抽象方法的修饰符只能为public或者protected，默认为public；一个子类继承一个抽象类，则子类必须实现父类抽象方法，否则子类也必须定义为抽象类；抽象类可以包含属性、方法、构造方法，但是构造方法不能用于实例化，主要用途是被子类调用。接口：Java中接口使用interface关键字修饰，特点为:接口可以包含变量、方法；变量被隐士指定为public static final，方法被隐士指定为public abstract（JDK1.8之前）；接口支持多继承，即一个接口可以extends多个接口，间接的解决了Java中类的单继承问题；一个类可以实现多个接口。</p>        <h2 id="第7章-用户界面设计"   >          <a href="#第7章-用户界面设计" class="heading-link"><i class="fas fa-link"></i></a>第7章 用户界面设计</h2>      <div class="table-container"><div class="table-container"><table><thead><tr><th>题目</th><th>答案</th></tr></thead><tbody><tr><td>信息系统的功能是通过用户与系统界面交互来完成。</td><td>V</td></tr><tr><td>人的视觉规律是以中心为重点向四周发散。</td><td>X</td></tr><tr><td>在详细界面设计前需要进行系统原型设计。</td><td>V</td></tr><tr><td>输入数据格式校验是通过执行检查程序来实现的。</td><td>V</td></tr><tr><td>页面的数据列表可以打印输出。</td><td>X</td></tr><tr><td>为减少用户记忆负担，在界面上可以给出场景导引、默认值、<em>__</em>等提示。</td><td>[ “下拉列表值”, “快捷方式”, “逐次推进的提示方式” ]</td></tr><tr><td>用户界面设计一般包括界面结构设计、界面交互设计、界面导航设计、界面视觉设计和<em>__</em>。</td><td>[ “界面布局设计”, “界面输入/输出设计” ]</td></tr><tr><td>Web页面导航主要有水平栏目导航、垂直栏目导航、混合栏目导航和<em>__</em>。</td><td>[ “页面内容导航” ]</td></tr><tr><td>在移动App页面布局设计中，需要对页面信息内容、页面主题内容、用户行为心理和<em>__</em>进行整体考虑。</td><td>[ “用户功能操作” ]</td></tr><tr><td>在手机App页面布局设计中，页面可以分为背景层、内容层、悬浮层和<em>__</em>。</td><td>[ “弹出层” ]</td></tr></tbody></table></div></div><p>1．用户界面设计需要遵循哪些基本原则？</p><p>2．用户界面输入需要考虑解决哪些问题？</p><p>3．Web页面结构设计与移动App界面结构设计有哪些异同？</p><p>4．Web页面输出有哪些形式？</p><p>5．用户界面交互设计主要包括哪些方面的内容？</p><p>1.用户原则。人机界面设计首先要确立用户类型。划分类型可以从不同的角度，视实际情况而定。确定类型后要针对其特点预测他们对不同界面的反应。这就要从多方面设计分析。信息最小量原则。人机界面设计要尽量减少用户记忆负担，采用有助于记忆的设计方案。帮助和提示原则。要对用户的操作命令作出反应，帮助用户处理问题。系统要设计有恢复出错现场的能力，在系统内部处理工作要有提示，尽量把主动权让给用户。媒体最佳组合原则。多媒体界面的成功并不在于仅向用户提供丰富的媒体，而应在相关理论指导下，注意处理好各种媒体间的关系,恰当选用。 2.制定输入规则，防止无效输入；一切的输入都是威胁，需要制定相应的安全规则。 3.web系统基于B/S架构实现信息系统,通常包含大量功能页面,移动App开发基于有限软硬件资源,需要面对多终端多使用场景的问题。 4.数据报表，数据图。 5.交互设计，它主要指的是两个或多个个体之间交流和互动方式的设计，以达成某种设计产品的目的。交互设计的目标一般从“可用性”和”用户体验“两个层面出发，以帮助解决用户需求。首先是明确商业目标和用户目标。商业目标是很多初级的设计师容易忽略甚至抗拒的，在设计中，不仅仅要考虑用户体验和用户目标，还要考虑业务和商业目标。然后是在不同层次上思考和规划。产品的功能层、信息层、行为层等。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;hr&gt;

        &lt;h1 id=&quot;系统分析与设计-00-学堂在线题目&quot;   &gt;
          &lt;a href=&quot;#系统分析与设计-00-学堂在线题目&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;系统分析与设计 - 00 学堂在线题目&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Polaris - 01 认识 Polaris</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/18/%E4%BA%91%E5%8E%9F%E7%94%9F/Polaris%20-%2001%20%E8%AE%A4%E8%AF%86%20Polaris/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/18/%E4%BA%91%E5%8E%9F%E7%94%9F/Polaris%20-%2001%20%E8%AE%A4%E8%AF%86%20Polaris/</id>
    <published>2021-11-17T16:00:00.000Z</published>
    <updated>2021-11-20T08:34:10.222Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Polaris-01-认识-Polaris"   >          <a href="#Polaris-01-认识-Polaris" class="heading-link"><i class="fas fa-link"></i></a>Polaris - 01 认识 Polaris</h1>      <span id="more"></span><p>服务治理是微服务架构下的重要问题，一般的微服务治理需要这样几个模块。</p><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>        <h2 id="1-安装-Polaris"   >          <a href="#1-安装-Polaris" class="heading-link"><i class="fas fa-link"></i></a>1. 安装 Polaris</h2>              <h2 id="2-使用-Polaris-搭建-real-world-app"   >          <a href="#2-使用-Polaris-搭建-real-world-app" class="heading-link"><i class="fas fa-link"></i></a>2. 使用 Polaris 搭建 real world app</h2>      ]]></content>
    
    
    <summary type="html">Polaris</summary>
    
    
    
    <category term="Polaris" scheme="http://zjeff-953.gitee.io/zjeff/categories/Polaris/"/>
    
    
    <category term="Polaris" scheme="http://zjeff-953.gitee.io/zjeff/tags/Polaris/"/>
    
  </entry>
  
  <entry>
    <title>学点别的 - 02 维特根斯坦与他的哲学</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/14/%E5%AD%A6%E7%82%B9%E5%88%AB%E7%9A%84/%E5%AD%A6%E7%82%B9%E5%88%AB%E7%9A%84%20-%2002%20%E7%BB%B4%E7%89%B9%E6%A0%B9%E6%96%AF%E5%9D%A6%E4%B8%8E%E4%BB%96%E7%9A%84%E5%93%B2%E5%AD%A6/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/14/%E5%AD%A6%E7%82%B9%E5%88%AB%E7%9A%84/%E5%AD%A6%E7%82%B9%E5%88%AB%E7%9A%84%20-%2002%20%E7%BB%B4%E7%89%B9%E6%A0%B9%E6%96%AF%E5%9D%A6%E4%B8%8E%E4%BB%96%E7%9A%84%E5%93%B2%E5%AD%A6/</id>
    <published>2021-11-14T06:53:01.085Z</published>
    <updated>2021-11-17T13:54:30.992Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="学点别的-02-维特根斯坦与他的哲学"   >          <a href="#学点别的-02-维特根斯坦与他的哲学" class="heading-link"><i class="fas fa-link"></i></a>学点别的 - 02 维特根斯坦与他的哲学</h1>      <span id="more"></span>        <h2 id="《数据密集型系统设计》和维特根斯坦"   >          <a href="#《数据密集型系统设计》和维特根斯坦" class="heading-link"><i class="fas fa-link"></i></a>《数据密集型系统设计》和维特根斯坦</h2>              <h2 id="维特根斯坦的传奇色彩"   >          <a href="#维特根斯坦的传奇色彩" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦的传奇色彩</h2>              <h2 id="维特根斯坦的人生经历"   >          <a href="#维特根斯坦的人生经历" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦的人生经历</h2>              <h2 id="维特根斯坦和康德"   >          <a href="#维特根斯坦和康德" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦和康德</h2>              <h2 id="维特根斯坦和《逻辑哲学论》"   >          <a href="#维特根斯坦和《逻辑哲学论》" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦和《逻辑哲学论》</h2>              <h2 id="维特根斯坦和财富"   >          <a href="#维特根斯坦和财富" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦和财富</h2>              <h2 id="维特根斯坦和图灵"   >          <a href="#维特根斯坦和图灵" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦和图灵</h2>              <h2 id="维特根斯坦和《哲学研究》"   >          <a href="#维特根斯坦和《哲学研究》" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦和《哲学研究》</h2>      <p>维氏后期提出“语言—游戏说”、“家族相似性”、“不要去想而要去看”等等理论和理念，放弃了以逻辑规则为意义标准的思想，与创立逻辑原子主义的罗素和题主提及的哥德尔等逻辑学家在哲学上分道扬镳，自然无法得到他们的认同。事实上，此时维特根斯坦的身份是分析哲学中日常语言流派的奠基人（之一）。</p>        <h2 id="维特根斯坦和真值表"   >          <a href="#维特根斯坦和真值表" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦和真值表</h2>              <h2 id="徐英瑾和维特根斯坦"   >          <a href="#徐英瑾和维特根斯坦" class="heading-link"><i class="fas fa-link"></i></a>徐英瑾和维特根斯坦</h2>      <p>《心智、语言和机器 ———— 维特根斯坦哲学和人工智能科学的对话》</p>        <h2 id="程序语言和维特根斯坦"   >          <a href="#程序语言和维特根斯坦" class="heading-link"><i class="fas fa-link"></i></a>程序语言和维特根斯坦</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://www.omegaxyz.com/2018/06/21/boolean-algebra/" >https://www.omegaxyz.com/2018/06/21/boolean-algebra/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">学点别的 - 02 维特根斯坦与他的哲学</summary>
    
    
    
    <category term="学点别的" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%AD%A6%E7%82%B9%E5%88%AB%E7%9A%84/"/>
    
    
    <category term="学点别的" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E5%AD%A6%E7%82%B9%E5%88%AB%E7%9A%84/"/>
    
  </entry>
  
  <entry>
    <title>Go - 02 - 阅读 gin-vue-admin 代码</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/13/Golang/Go%20-%2002%20-%20%E9%98%85%E8%AF%BB%20gin-vue-admin%20%E4%BB%A3%E7%A0%81/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/13/Golang/Go%20-%2002%20-%20%E9%98%85%E8%AF%BB%20gin-vue-admin%20%E4%BB%A3%E7%A0%81/</id>
    <published>2021-11-13T11:32:38.339Z</published>
    <updated>2021-11-17T06:33:04.419Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Go-02-阅读-gin-vue-admin-代码"   >          <a href="#Go-02-阅读-gin-vue-admin-代码" class="heading-link"><i class="fas fa-link"></i></a>Go - 02 - 阅读 gin-vue-admin 代码</h1>      <p>通过阅读一个功能齐全的 Curd 应用学习 gin 和 gorm 和 常用库</p><span id="more"></span>        <h2 id="1-基础使用"   >          <a href="#1-基础使用" class="heading-link"><i class="fas fa-link"></i></a>1. 基础使用</h2>      <p>环境说明</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- node版本 &gt; v12.18.3</span><br><span class="line">- golang版本 &gt;= v1.16</span><br><span class="line">- Goland</span><br><span class="line">- vscode</span><br></pre></td></tr></table></div></figure><p>项目官网：<span class="exturl"><a class="exturl__link"   href="https://www.gin-vue-admin.com/" >自动化全栈开发基础平台 | Gin-Vue-Admin</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>点击右上角的 github 克隆源码下来</p><p>项目地址:<span class="exturl"><a class="exturl__link"   href="https://github.com/flipped-aurora/gin-vue-admin" >flipped-aurora/gin-vue-admin: </a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:flipped-aurora/gin-vue-admin.git</span><br></pre></td></tr></table></div></figure><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111151113056.png" alt=""></p><p>然后使用 <code>vscode</code> 打开 web 目录(前端项目), 使用 <code>goland</code> 打开 server 目录(后端项目)。</p><p>在 <code>goland</code> 中打开新终端 , 输入 <code>go generate</code> 同步依赖 , 然后 启动 <code>main.go</code> 中的 <code>main</code> 函数。</p><p>在 <code>vscode</code> 打开新终端 , 输入 <code>npm install</code> 安装前端项目依赖 , 等待安装完成后 , 然后输入 <code>npm run serve</code> 启动控制台前端。</p><p>然后点击 初始化 项目， 填写 mysql 的地址账号密码和 db 名。</p><p>最后打开前端项目就可以使用了。</p><p>详细使用可以参考官网的视频教程。</p>        <h2 id="2-启动入口代码"   >          <a href="#2-启动入口代码" class="heading-link"><i class="fas fa-link"></i></a>2. 启动入口代码</h2>      <p>现在分析下 <code>main.go</code> 里的内容</p>        <h3 id="2-1-go-generate-注释"   >          <a href="#2-1-go-generate-注释" class="heading-link"><i class="fas fa-link"></i></a>2.1 go:generate 注释</h3>      <p><code>go:generate</code> 注释在这里标识了一系列脚本</p><p>在项目目录中使用 <code>go generate</code> 命令 会执行被 <code>go:generate</code> 注释的脚本</p><p>这个脚本可以是任何内容 , 只要再当前环境中可以 执行 即可,一般为 shell script .</p><p>按照推荐做法 , 使用了这个命令最好是生成了一些代码文件</p><blockquote><p> “to automate the running of tools to generate source code before compilation.” </p><p><span class="exturl"><a class="exturl__link"   href="https://golang.org/doc/go1.4#gogenerate" >Go 1.4 Release Notes - The Go Programming Language (golang.org)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>但是, 在这里, 这个项目中, 使用这个命令的目的是通过命令行设置 go mod 的依赖源, 然后更新依赖.</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111151354549.png" alt=""></p><p>关于这个命令的更多用法可以参考这两篇文章 : 第一篇英文的 一定要看</p><p><span class="exturl"><a class="exturl__link"   href="https://blog.carlmjohnson.net/post/2016-11-27-how-to-use-go-generate/" >How to Use //go:generate · The Ethically-Trained Programmer</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://coolshell.cn/articles/21179.html#Go_Generator" >Go 编程模式：Go Generation | 酷 壳 - CoolShell</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="2-2-全局包-global"   >          <a href="#2-2-全局包-global" class="heading-link"><i class="fas fa-link"></i></a>2.2 全局包 global</h3>      <blockquote><p>在这项目中 GVA 是 gin-vue-admin 的缩写</p></blockquote><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111151409100.png" alt=""></p><p>先看第一行代码</p><figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">global.GVA_VP = core.Viper()      <span class="comment">// 初始化Viper</span></span><br></pre></td></tr></table></div></figure><p>这行代码中将 <code>global</code> 包 的 <code>GVA_VP</code> 设置为了 <code>core.Viper()</code> 的返回值</p><p>这个 <code>global</code> 声明了一些全局配置变量, 以及 <code>model</code> 中通用的一些属性</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111170951599.png" alt="image-20211117095116510"></p>        <h3 id="2-3-模块管理和包管理"   >          <a href="#2-3-模块管理和包管理" class="heading-link"><i class="fas fa-link"></i></a>2.3 模块管理和包管理</h3>      <p>当我们使用 <code>import</code> 的时候, 我们从哪里 <code>import</code> 了这些代码? </p><p>有三种方式引入包的来源, 我们从安装, 引入和使用三个角度认识这三种方式</p><ol><li>引入 <code>go sdk</code> 的包</li><li>引入 网络上的 的包</li><li>引入 当前项目 的包</li></ol>        <h4 id="2-3-1-引入-go-sdk-的包"   >          <a href="#2-3-1-引入-go-sdk-的包" class="heading-link"><i class="fas fa-link"></i></a>2.3.1 引入 go sdk 的包</h4>      <p><strong>安装</strong></p><p>随 go sdk 安装, 在 goland 中, 显示在这个位置</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171026435.png" alt=""></p><p><strong>引入路径</strong></p><p>引入路径在 <code>GOPATH/src/*</code></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171009671.png" alt=""></p><p>如图所示 <code>database/sql</code> 可以从这个位置引入</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171029793.png" alt=""></p><p>里面有文档, 代码和单测. </p><p><strong>使用</strong></p><p>使用方式和引入方式有关</p><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/259392235" >30. Go 语言中关于包导入必学的 8 个知识点 - 知乎 (zhihu.com)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>使用的时候通过 <code>包名 + 导出变量</code> 使用. </p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171036566.png" alt=""></p>        <h4 id="2-3-2-引入-网络上的-的包"   >          <a href="#2-3-2-引入-网络上的-的包" class="heading-link"><i class="fas fa-link"></i></a>2.3.2 引入 网络上的 的包</h4>      <p><strong>安装</strong></p><p><code>go get -u 你的地址</code></p><p><strong>引入路径</strong></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171049787.png" alt=""></p>        <h4 id="2-3-3-引入-当前项目-的包"   >          <a href="#2-3-3-引入-当前项目-的包" class="heading-link"><i class="fas fa-link"></i></a>2.3.3 引入 当前项目 的包</h4>      <p><strong>声明</strong></p><p>当前项目的名称可以声明在 <code>go mod</code> 中</p><p><code>module xxx</code> 就是模块名, <code>go xxx</code> 是 <code>go sdk</code> 的版本号, <code>require xxx</code> 就是依赖列表</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171057295.png" alt=""></p><p>包名声明在 <code>package xxx</code>, 不一定和文件名对应</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171059580.png" alt=""></p><p><strong>引入</strong></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171059645.png" alt=""></p>        <h2 id="3-初始化-DB-代码"   >          <a href="#3-初始化-DB-代码" class="heading-link"><i class="fas fa-link"></i></a>3. 初始化 DB 代码</h2>      <p>为什么 可以 通过 web 页配置 db 的配置呢 ?</p><p>他是生成了新的代码, 重写了配置文件吗.</p><p>查看前端项目发现调用 <code>service</code> 名 <code>init/</code></p>        <h2 id="4-目录结构"   >          <a href="#4-目录结构" class="heading-link"><i class="fas fa-link"></i></a>4. 目录结构</h2>              <h2 id="5-基础功能模块"   >          <a href="#5-基础功能模块" class="heading-link"><i class="fas fa-link"></i></a>5. 基础功能模块</h2>      ]]></content>
    
    
    <summary type="html">还是得撸一个</summary>
    
    
    
    <category term="Go" scheme="http://zjeff-953.gitee.io/zjeff/categories/Go/"/>
    
    
    <category term="Go" scheme="http://zjeff-953.gitee.io/zjeff/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes - 01 认识 kubernetes</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/13/%E4%BA%91%E5%8E%9F%E7%94%9F/kubernetes%20-%2001%20%E8%AE%A4%E8%AF%86%20kubernetes/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/13/%E4%BA%91%E5%8E%9F%E7%94%9F/kubernetes%20-%2001%20%E8%AE%A4%E8%AF%86%20kubernetes/</id>
    <published>2021-11-13T04:10:39.711Z</published>
    <updated>2021-11-21T13:41:48.196Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="kubernetes-01-认识-kubernetes"   >          <a href="#kubernetes-01-认识-kubernetes" class="heading-link"><i class="fas fa-link"></i></a>kubernetes - 01 认识 kubernetes</h1>      <p>kubernetes 是一个容器编排工具，可以实现容器的网络，发现，监控，负载。由谷歌开发 . </p><p>这里，我们将会介绍 kubernetes 的基本功能，以及什么时候需要使用 kubernetes . </p><p>基本流程和官网的一样,但是会加一点我对于 这些 构件和不同层级抽象的理解 . </p><p>官网的输出内容有点滞后了, 所以我同步了新的输出格式</p><span id="more"></span><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131218966.png" alt="image-20211113121849921"></p>        <h2 id="1-上手-kubernetes"   >          <a href="#1-上手-kubernetes" class="heading-link"><i class="fas fa-link"></i></a>1. 上手 kubernetes</h2>      <p>通常来说，我们应该从安装开始，但是，kubernetes 比较吃资源，而且，官网有很好的预览服务器，所以先用官网预览服务器上手基本的操作好了。</p><p>打开链接</p><p>中文版 ： <span class="exturl"><a class="exturl__link"   href="https://kubernetes.io/zh/docs/tutorials/hello-minikube/" >你好，Minikube | Kubernetes</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>英文版 ： <span class="exturl"><a class="exturl__link"   href="https://kubernetes.io/docs/tutorials/hello-minikube/" >Hello Minikube | Kubernetes</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>点击启动终端，然后会在浏览器中启动一个终端，然后就可以使用了（记得魔法上网）</p><blockquote><p>这里 kubernetes 本体由 kube cli 管理，minikube 是一个轻量级（简陋）的 kubernetes 客户端</p></blockquote><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131239832.png" alt="image-20211113123902736"></p>        <h3 id="1-1-启动控制仪表盘"   >          <a href="#1-1-启动控制仪表盘" class="heading-link"><i class="fas fa-link"></i></a>1.1 启动控制仪表盘</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube dashboard</span><br></pre></td></tr></table></div></figure><p>点击这个指令可以运行，现在点击他，就可以启动 <code>kubernetes dashborad</code> ，里面包含了一系列 <code>kebernetes</code> 的信息和基础功能。</p><p><img src="C:\Users\15727\AppData\Roaming\Typora\typora-user-images\image-20211113145433029.png" alt="image-20211113145433029"></p><p>点击指向的按钮就可以打开 <code>kebernetes dashboard</code></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131609871.png" alt="image-20211113160912832"></p><p>这样就启动了 <code>kebernetes dashboard</code> 了</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131502199.png" alt="image-20211113150200098"></p><blockquote><p>整个网站的实验环境只会持续一段时间 , 如果时间到了 , 就需要重新创建一个实验环境 , 只需要重复上面的动作, 因为</p></blockquote>        <h3 id="1-2-创建一个-Deployment（部署对象）"   >          <a href="#1-2-创建一个-Deployment（部署对象）" class="heading-link"><i class="fas fa-link"></i></a>1.2 创建一个 Deployment（部署对象）</h3>      <p>我们知道，docker 之间可以构建内网来通信，当我们使用了很多的容器的时候，每个容器的状态，各个不同容器集群的功能组织将会成为一个问题，kubernetes 就提供了这样一个工具，帮助我们拆分容器（方便管理不同用途的容器），监控状态（保证容器和不同服务的正常运作），组织通信（容器之间的数据交换）。</p><p>kubernetes 将容器打包在 pod （资源组/池），每个 pod 中包含一个或者多个容器， Kubernetes Deployment 检查 Pod 的健康状况，并在 Pod 中的容器终止的情况下重新启动新的容器。 Deployment 是管理 Pod 创建和扩展的推荐方法。</p>        <h4 id="1-2-1-创建-Deploymen-并查看-Deployment-的情况"   >          <a href="#1-2-1-创建-Deploymen-并查看-Deployment-的情况" class="heading-link"><i class="fas fa-link"></i></a>1.2.1 创建 Deploymen  并查看 Deployment 的情况</h4>      <p>现在新建一个终端</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131525866.png" alt="image-20211113152518823"></p><p>现在输入下面的这条指令，创建一个新的部署行为</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment hello-node --image=k8s.gcr.io/echoserver:1.4</span><br></pre></td></tr></table></div></figure><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131525145.png" alt="image-20211113152532113"></p><p>这条指令的的含义是这样的</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment [deployment名字] --image=[使用的镜像地址]</span><br></pre></td></tr></table></div></figure><p>现在转到仪表盘, 点击 deployment 查看我们已经创建了一个新的部署对象</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131528136.png" alt="image-20211113152828048"></p><p>我们还可以通过命令行查看 deployment 的状态</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectil get deployments</span><br></pre></td></tr></table></div></figure><p>效果如下：</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131532289.png" alt="image-20211113153210263"></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get deployments</span></span><br><span class="line">NAME         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">hello-node   1/1     1            1           5m45s</span><br></pre></td></tr></table></div></figure>        <h4 id="1-2-2-pod-和-deployment-的关系"   >          <a href="#1-2-2-pod-和-deployment-的关系" class="heading-link"><i class="fas fa-link"></i></a>1.2.2 pod 和 deployment 的关系 *</h4>      <p>deployment 包含一个或者多个 pod 的集群 .deployment 只关心 pod 的数量和状态 , pod 停了就整个新的 , 只要维持 pod 的数量 . 所以在 deployment 的属性中不能看到管辖的 pod 的名字 , 我们需要单独的查看 pod 的状态 . </p><p>部署创建的 pod 的 app 属性将会指向 deployment 的名字 , 用来标识对应关系 . </p>        <h4 id="1-2-3-查看-pod-（资源组-池）-的状态"   >          <a href="#1-2-3-查看-pod-（资源组-池）-的状态" class="heading-link"><i class="fas fa-link"></i></a>1.2.3 查看 pod （资源组/池） 的状态</h4>      <p>我们能可以通过 dashboard 查看 pod 的状态</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131544445.png" alt="image-20211113154423349"></p><p>也可通过命令行查看我们的 资源组 状态</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></div></figure><p>效果如下：</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131552577.png" alt="image-20211113155229532"></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get pods</span></span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">hello-node-7567d9fdc9-64mbx   1/1     Running   0          27m</span><br></pre></td></tr></table></div></figure>        <h4 id="1-2-4-查看集群事件"   >          <a href="#1-2-4-查看集群事件" class="heading-link"><i class="fas fa-link"></i></a>1.2.4 查看集群事件</h4>      <p>在 仪表盘 中, 事件是属于各个对象的 , 所以 , 我们需要在不同的对象中查看事件</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131610697.png" alt="image-20211113161016628"></p><p>使用命令行可以查看所有的 事件 .</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get events</span><br></pre></td></tr></table></div></figure><p>效果如下 ( 这里 我 的体验时间过去了, 重新启动了一遍 )</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131601960.png" alt="image-20211113160136912"></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get events</span></span><br><span class="line">LAST SEEN   TYPE     REASON                    OBJECT                             MESSAGE</span><br><span class="line">101s        Normal   Scheduled                 pod/hello-node-7567d9fdc9-v6qs5    Successfully assigned default/hello-node-7567d9fdc9-v6qs5 to minikube</span><br><span class="line">100s        Normal   Pulling                   pod/hello-node-7567d9fdc9-v6qs5    Pulling image &quot;k8s.gcr.io/echoserver:1.4&quot;</span><br><span class="line">100s        Normal   Pulled                    pod/hello-node-7567d9fdc9-v6qs5    Successfully pulled image &quot;k8s.gcr.io/echoserver:1.4&quot; in 547.409194ms</span><br><span class="line">100s        Normal   Created                   pod/hello-node-7567d9fdc9-v6qs5    Created container echoserver</span><br><span class="line">99s         Normal   Started                   pod/hello-node-7567d9fdc9-v6qs5    Started container echoserver</span><br><span class="line">101s        Normal   SuccessfulCreate          replicaset/hello-node-7567d9fdc9   Created pod: hello-node-7567d9fdc9-v6qs5</span><br><span class="line">101s        Normal   ScalingReplicaSet         deployment/hello-node              Scaled up replica set hello-node-7567d9fdc9 to 1</span><br><span class="line">9m6s        Normal   NodeHasSufficientMemory   node/minikube                      Node minikube status is now: NodeHasSufficientMemory</span><br><span class="line">9m6s        Normal   NodeHasNoDiskPressure     node/minikube                      Node minikube status is now: NodeHasNoDiskPressure</span><br><span class="line">9m6s        Normal   NodeHasSufficientPID      node/minikube                      Node minikube status is now: NodeHasSufficientPID</span><br><span class="line">8m49s       Normal   Starting                  node/minikube                      Starting kubelet.</span><br><span class="line">8m49s       Normal   NodeHasSufficientMemory   node/minikube                      Node minikube status is now: NodeHasSufficientMemory</span><br><span class="line">8m49s       Normal   NodeHasNoDiskPressure     node/minikube                      Node minikube status is now: NodeHasNoDiskPressure</span><br><span class="line">8m49s       Normal   NodeHasSufficientPID      node/minikube                      Node minikube status is now: NodeHasSufficientPID</span><br><span class="line">8m49s       Normal   NodeAllocatableEnforced   node/minikube                      Updated Node Allocatable limit across pods</span><br><span class="line">8m39s       Normal   RegisteredNode            node/minikube                      Node minikube event: Registered Node minikube in Controller</span><br><span class="line">8m39s       Normal   NodeReady                 node/minikube                      Node minikube status is now: NodeReady</span><br><span class="line">8m37s       Normal   Starting                  node/minikube                      Starting kube-proxy.</span><br></pre></td></tr></table></div></figure>        <h4 id="1-2-5-查看集群配置"   >          <a href="#1-2-5-查看集群配置" class="heading-link"><i class="fas fa-link"></i></a>1.2.5 查看集群配置</h4>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl config view</span><br></pre></td></tr></table></div></figure><p>效果如下 : </p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131612651.png" alt="image-20211113161255610"></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl config view</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority: /root/.minikube/ca.crt</span><br><span class="line">    extensions:</span><br><span class="line">    - extension:</span><br><span class="line">        last-update: Sat, 13 Nov 2021 08:02:27 UTC</span><br><span class="line">        provider: minikube.sigs.k8s.io</span><br><span class="line">        version: v1.18.0</span><br><span class="line">      name: cluster_info</span><br><span class="line">    server: https://172.17.0.51:8443</span><br><span class="line">  name: minikube</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: minikube</span><br><span class="line">    extensions:</span><br><span class="line">    - extension:</span><br><span class="line">        last-update: Sat, 13 Nov 2021 08:02:27 UTC</span><br><span class="line">        provider: minikube.sigs.k8s.io</span><br><span class="line">        version: v1.18.0</span><br><span class="line">      name: context_info</span><br><span class="line">    namespace: default</span><br><span class="line">    user: minikube</span><br><span class="line">  name: minikube</span><br><span class="line">current-context: minikube</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: minikube</span><br><span class="line">  user:</span><br><span class="line">    client-certificate: /root/.minikube/profiles/minikube/client.crt</span><br><span class="line">    client-key: /root/.minikube/profiles/minikube/client.key</span><br></pre></td></tr></table></div></figure>        <h3 id="1-3-创建一个-service-服务"   >          <a href="#1-3-创建一个-service-服务" class="heading-link"><i class="fas fa-link"></i></a>1.3 创建一个 service (服务)</h3>              <h4 id="1-3-1-创建一个-service"   >          <a href="#1-3-1-创建一个-service" class="heading-link"><i class="fas fa-link"></i></a>1.3.1 创建一个 service</h4>      <p>service 是 kebernetes 将 pod 向外暴露的方式 , 暴露到公网端口</p><p>pod 在没有使用 service 的时候只能在内部 IP 地址访问</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment hello-node --type=LoadBalancer --port=8080</span><br></pre></td></tr></table></div></figure><p>效果如下 : </p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131646071.png" alt="image-20211113164603039"></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl expose deployment hello-node --<span class="built_in">type</span>=LoadBalancer --port=8080</span></span><br><span class="line">service/hello-node exposed</span><br></pre></td></tr></table></div></figure><p>这里的 <code>--type=LoadBalancer</code> 参数表明你希望将你的 Service 暴露到集群外部。</p><p>镜像 <code>k8s.gcr.io/echoserver</code> 中的应用程序代码仅监听 TCP 8080 端口。 如果你用 <code>kubectl expose</code> 暴露了其它的端口，客户端将不能访问其它端口。</p>        <h4 id="1-3-2-查看-service-的情况"   >          <a href="#1-3-2-查看-service-的情况" class="heading-link"><i class="fas fa-link"></i></a>1.3.2 查看 service 的情况</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get services</span><br></pre></td></tr></table></div></figure><p>效果如下 :</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131702403.png" alt="image-20211113170223367"></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get services</span></span><br><span class="line">kubectl get services</span><br><span class="line"></span><br><span class="line">NAME         TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">hello-node   LoadBalancer   10.99.215.211   &lt;pending&gt;     8080:32102/TCP   8m40s</span><br><span class="line">kubernetes   ClusterIP      10.96.0.1       &lt;none&gt;        443/TCP          52m</span><br></pre></td></tr></table></div></figure><p>现在尝试从浏览器中访问 service</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131704119.png" alt="image-20211113170431083"></p><p>然后可以进入这个页面</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131705372.png" alt="image-20211113170530319"></p><p>然后我们可以尝试访问这个 service</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube service hello-node</span><br></pre></td></tr></table></div></figure><p>效果如下</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> minikube service hello-node</span></span><br><span class="line">|-----------|------------|-------------|--------------------------|</span><br><span class="line">| NAMESPACE |    NAME    | TARGET PORT |           URL            |</span><br><span class="line">|-----------|------------|-------------|--------------------------|</span><br><span class="line">| default   | hello-node |        8080 | http://172.17.0.51:32102 |</span><br><span class="line">|-----------|------------|-------------|--------------------------|</span><br><span class="line">* Opening service default/hello-node in default browser...</span><br><span class="line">Minikube Dashboard is not supported via the interactive terminal experience.</span><br><span class="line"></span><br><span class="line">Please click the &#x27;Preview Port 30000&#x27; link above to access the dashboard.</span><br><span class="line">This will now exit. Please continue with the rest of the tutorial.</span><br><span class="line"></span><br><span class="line">X Exiting due to HOST_BROWSER: exit status 1</span><br><span class="line">* </span><br><span class="line">* If the above advice does not help, please let us know: </span><br><span class="line">  - https://github.com/kubernetes/minikube/issues/new/choose</span><br></pre></td></tr></table></div></figure><p>这个表格中后两项表示 , 对 运行 kubernetes 的服务器 的 8080 端口 的访问将会被转发到 kubernetes 网络的这个地址 <span class="exturl"><a class="exturl__link"   href="http://172.17.0.51:32102" >http://172.17.0.51:32102</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> , 然后我们就可以在刚才的页面输入这个端口号就可以访问页面了。</p>        <h3 id="1-4-添加-addons-插件"   >          <a href="#1-4-添加-addons-插件" class="heading-link"><i class="fas fa-link"></i></a>1.4 添加 addons (插件)</h3>      <p>这些插件有什么内容呢 ? 有 服务发现, 服务可视化 等等方面. </p>        <h4 id="1-4-1-查看-插件列表"   >          <a href="#1-4-1-查看-插件列表" class="heading-link"><i class="fas fa-link"></i></a>1.4.1 查看 插件列表</h4>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube addons list</span><br></pre></td></tr></table></div></figure><p>输出结果类似于这样：</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> minikube addons list</span></span><br><span class="line">|-----------------------------|----------|--------------|</span><br><span class="line">|         ADDON NAME          | PROFILE  |    STATUS    |</span><br><span class="line">|-----------------------------|----------|--------------|</span><br><span class="line">| ambassador                  | minikube | disabled     |</span><br><span class="line">| auto-pause                  | minikube | disabled     |</span><br><span class="line">| csi-hostpath-driver         | minikube | disabled     |</span><br><span class="line">| dashboard                   | minikube | enabled ✅   |</span><br><span class="line">| default-storageclass        | minikube | enabled ✅   |</span><br><span class="line">| efk                         | minikube | disabled     |</span><br><span class="line">| freshpod                    | minikube | disabled     |</span><br><span class="line">| gcp-auth                    | minikube | disabled     |</span><br><span class="line">| gvisor                      | minikube | disabled     |</span><br><span class="line">| helm-tiller                 | minikube | disabled     |</span><br><span class="line">| ingress                     | minikube | disabled     |</span><br><span class="line">| ingress-dns                 | minikube | disabled     |</span><br><span class="line">| istio                       | minikube | disabled     |</span><br><span class="line">| istio-provisioner           | minikube | disabled     |</span><br><span class="line">| kubevirt                    | minikube | disabled     |</span><br><span class="line">| logviewer                   | minikube | disabled     |</span><br><span class="line">| metallb                     | minikube | disabled     |</span><br><span class="line">| metrics-server              | minikube | enabled ✅   |</span><br><span class="line">| nvidia-driver-installer     | minikube | disabled     |</span><br><span class="line">| nvidia-gpu-device-plugin    | minikube | disabled     |</span><br><span class="line">| olm                         | minikube | disabled     |</span><br><span class="line">| pod-security-policy         | minikube | disabled     |</span><br><span class="line">| registry                    | minikube | disabled     |</span><br><span class="line">| registry-aliases            | minikube | disabled     |</span><br><span class="line">| registry-creds              | minikube | disabled     |</span><br><span class="line">| storage-provisioner         | minikube | enabled ✅   |</span><br><span class="line">| storage-provisioner-gluster | minikube | disabled     |</span><br><span class="line">| volumesnapshots             | minikube | disabled     |</span><br><span class="line">|-----------------------------|----------|--------------|</span><br></pre></td></tr></table></div></figure>        <h4 id="1-4-2-添加插件"   >          <a href="#1-4-2-添加插件" class="heading-link"><i class="fas fa-link"></i></a>1.4.2 添加插件</h4>      <p>添加 <code>metrics-server</code> 插件</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube addons enable metrics-server</span><br></pre></td></tr></table></div></figure><p>输出结果如下</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> minikube addons <span class="built_in">enable</span> metrics-server</span></span><br><span class="line">  - Using image k8s.gcr.io/metrics-server-amd64:v0.2.1</span><br><span class="line">* The &#x27;metrics-server&#x27; addon is enabled</span><br></pre></td></tr></table></div></figure><p>查看 这个插件的效果 </p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod,svc -n kube-system</span><br></pre></td></tr></table></div></figure><p>输出结果类似这样, 可以看到 多出了类似 <code>service/metrics-server</code> 相关的内容</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get pod,svc -n kube-system</span></span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/coredns-74ff55c5b-4r6b2            1/1     Running   0          27m</span><br><span class="line">pod/etcd-minikube                      1/1     Running   0          27m</span><br><span class="line">pod/kube-apiserver-minikube            1/1     Running   0          27m</span><br><span class="line">pod/kube-controller-manager-minikube   1/1     Running   0          27m</span><br><span class="line">pod/kube-proxy-m95zs                   1/1     Running   0          27m</span><br><span class="line">pod/kube-scheduler-minikube            1/1     Running   0          27m</span><br><span class="line">pod/metrics-server-56c4f8c9d6-l28f7    1/1     Running   0          27m</span><br><span class="line">pod/storage-provisioner                1/1     Running   0          27m</span><br><span class="line"></span><br><span class="line">NAME                     TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">service/kube-dns         ClusterIP   10.96.0.10       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   27m</span><br><span class="line">service/metrics-server   ClusterIP   10.103.144.127   &lt;none&gt;        443/TCP                  27m</span><br></pre></td></tr></table></div></figure>        <h4 id="1-4-3-禁用插件"   >          <a href="#1-4-3-禁用插件" class="heading-link"><i class="fas fa-link"></i></a>1.4.3 禁用插件</h4>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube addons disable metrics-server</span><br></pre></td></tr></table></div></figure><p>结果如下：</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> minikube addons <span class="built_in">disable</span> metrics-server</span></span><br><span class="line">  - Using image k8s.gcr.io/metrics-server-amd64:v0.2.1</span><br><span class="line">* &quot;The &#x27;metrics-server&#x27; addon is disabled</span><br></pre></td></tr></table></div></figure>        <h3 id="1-5-清除资源-Deployment-service-VM"   >          <a href="#1-5-清除资源-Deployment-service-VM" class="heading-link"><i class="fas fa-link"></i></a>1.5 清除资源 (Deployment/service/VM)</h3>              <h4 id="1-5-1-清除-Deployment-service"   >          <a href="#1-5-1-清除-Deployment-service" class="heading-link"><i class="fas fa-link"></i></a>1.5.1 清除 Deployment/service</h4>      <p>使用 <code>kubectl delete</code> 清除资源</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete service hello-node</span><br><span class="line">kubectl delete deployment hello-node</span><br></pre></td></tr></table></div></figure><p>结果如下</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl delete service   hello-node</span></span><br><span class="line">service &quot;hello-node&quot; deleted</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl delete deployment hello-node</span></span><br><span class="line">deployment.apps &quot;hello-node&quot; deleted</span><br></pre></td></tr></table></div></figure>        <h4 id="1-5-2-清除-VM"   >          <a href="#1-5-2-清除-VM" class="heading-link"><i class="fas fa-link"></i></a>1.5.2 清除 VM</h4>      <p>停止 VM</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube stop</span><br></pre></td></tr></table></div></figure><p>删除 VM</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube delete</span><br></pre></td></tr></table></div></figure><p>结果如下</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> minikube stop</span></span><br><span class="line">* Stopping node &quot;minikube&quot;  ...</span><br><span class="line">* 1 nodes stopped.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> minikube delete</span></span><br><span class="line">* Uninstalling Kubernetes v1.20.2 using kubeadm ...</span><br><span class="line">* Deleting &quot;minikube&quot; in none ...</span><br><span class="line">* Removed all traces of the &quot;minikube&quot; cluster.</span><br></pre></td></tr></table></div></figure>        <h2 id="2-使用-Minikube-创建集群"   >          <a href="#2-使用-Minikube-创建集群" class="heading-link"><i class="fas fa-link"></i></a>2 使用 Minikube 创建集群</h2>              <h3 id="2-1-Kubernetes-基本概念"   >          <a href="#2-1-Kubernetes-基本概念" class="heading-link"><i class="fas fa-link"></i></a>2.1 Kubernetes 基本概念</h3>      <p>Kubernetes 主要功能是 自动管理和调动容器</p><p>一个 Kubernetes 集群包含两种类型的资源:</p><ul><li><strong>Master（主调度节点）</strong> 调度整个集群</li><li><strong>Nodes（运行节点）</strong> 负责运行应用</li></ul><p><strong>Master 负责管理整个集群。</strong> </p><ol><li>Master 协调集群中的所有活动，例如调度应用、维护应用的所需状态、应用扩容以及推出新的更新。</li></ol><p><strong>Node 是一个虚拟机或者物理机，它在 Kubernetes 集群中充当工作机器的角色</strong> </p><ol><li>每个Node都有 Kubelet , 它管理 Node 而且是 Node 与 Master 通信的代理。 </li><li>Node 还应该具有用于处理容器操作的工具，例如 Docker 或 rkt 。</li><li>处理生产级流量的 Kubernetes 集群至少应具有三个 Node 。</li></ol><p><strong>Node 使用 Master 暴露的 Kubernetes API 与 Master 通信。</strong></p><p>Kubernetes 既可以部署在物理机上也可以部署在虚拟机上。</p><p>您可以使用 Minikube 开始部署 Kubernetes 集群。 </p><p>Minikube 是一种轻量级的 Kubernetes 实现，可在本地计算机上创建 VM 并部署仅包含一个节点的简单集群。</p>        <h3 id="2-2-创建-kubernetes-集群"   >          <a href="#2-2-创建-kubernetes-集群" class="heading-link"><i class="fas fa-link"></i></a>2.2 创建 kubernetes 集群</h3>      <p>一个 kubernetes 集群需要</p><p><strong>Keep Curious! Keep Learning! </strong></p>]]></content>
    
    
    <summary type="html">kubernetes</summary>
    
    
    
    <category term="kubernetes" scheme="http://zjeff-953.gitee.io/zjeff/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="http://zjeff-953.gitee.io/zjeff/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>生活随笔 - 09 自爱与自救</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/11/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2009%20%E8%87%AA%E7%88%B1%E5%92%8C%E8%87%AA%E6%95%91/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/11/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2009%20%E8%87%AA%E7%88%B1%E5%92%8C%E8%87%AA%E6%95%91/</id>
    <published>2021-11-11T08:16:37.989Z</published>
    <updated>2021-11-14T07:07:44.248Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="生活随笔-09-自爱与自救"   >          <a href="#生活随笔-09-自爱与自救" class="heading-link"><i class="fas fa-link"></i></a>生活随笔 - 09 自爱与自救</h1>      <p>这是一场在颓废和不知目标的时候发生的自我谈话。</p><p>内容关于自爱与自救。</p><p>当然，这段时间也不是完全没有意义，重启 🧠 ，思考</p><span id="more"></span>        <h2 id="世界观"   >          <a href="#世界观" class="heading-link"><i class="fas fa-link"></i></a>世界观</h2>      <p>过去我做事的动力是什么？</p><ol><li>厌恶，厌恶糟糕的父母，渴望独立的照顾和养活自己。</li><li>恐惧，恐惧生存，渴望基本生产资料，渴望在这个社会立足。</li><li>期待赞许，期待别人的正反馈，期待别人的认同和认可。</li></ol><p>但是，现在都要失效了，看到了工作其实很容易达成，想要在一个位置上作威作福混吃等死异常的容易，什么🐂🐎都可以；看到了在社会上🐂🐎太多，自己的心理 issue 都难以解决，还有内耗的思维方式（就是“我很烂，但是我要让你更烂”），更不用说相互给予认可和认同了。</p><p>工作场景通过日报周会进行外部力量的反馈和监督，但是这些东西都是人容易失去的，当失去自驱和外力之后，我变成了摆烂人，享乐嬉戏，不思进取，美其名曰：“享受生活”。</p><p>摆烂 ——&gt; 自我怀疑 ——&gt; 自我贬低 ——&gt; 摆烂， 无限循环。</p><blockquote><p>尤其是现在，有种“满足别人想让你烂的欲望以此获取别人的认可和满意”的恶心想法。</p></blockquote><p>想要达成一些事情，却没有行动，甚至丢掉了之前的好习惯。</p><p>浮士德博士只告诉我“要前进”，没有告诉我“如何前进”。</p><p><strong>现在我需要一个更长久，更有力的自驱力，驱动我的前进。</strong></p><p><strong>自爱，我所需要的。</strong></p><p>恐惧会被终结，自我批评可能导致摆烂，他人赞许，他们可靠不住，唯有自爱，温润如玉，滋养心田。</p>        <h2 id="方法论"   >          <a href="#方法论" class="heading-link"><i class="fas fa-link"></i></a>方法论</h2>      <p>像慈爱又智慧的父母对待自己的孩子一样。</p><blockquote><p>糟糕的父母则相反，如果孩子做的太好会显得他们的人生的颓唐和废物是自己一手造成的，而不是天灾和人祸。</p></blockquote><p>一个句子 ： I love you too much to __________________。</p><p>我太爱你了以至于不能</p><ol><li>放任你自我堕落</li><li>看着你虚度年华</li></ol><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111111743491.png" alt="image-20211111174358201"></p>]]></content>
    
    
    <summary type="html">生活随笔 - 09 自爱与自救</summary>
    
    
    
    <category term="生活随笔" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="生活随笔" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/11/%E9%9D%A2%E8%AF%95/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%88%B7%E9%9D%A2%E7%BB%8F%20-%2001/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/11/%E9%9D%A2%E8%AF%95/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%88%B7%E9%9D%A2%E7%BB%8F%20-%2001/</id>
    <published>2021-11-11T00:50:40.110Z</published>
    <updated>2021-11-11T00:50:40.110Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>serverless - 尝试自建 serverless 基座</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/11/%E4%BA%91%E5%8E%9F%E7%94%9F/serverless%20-%20%E5%B0%9D%E8%AF%95%E8%87%AA%E5%BB%BA%20serverless%20%E5%9F%BA%E5%BA%A7/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/11/%E4%BA%91%E5%8E%9F%E7%94%9F/serverless%20-%20%E5%B0%9D%E8%AF%95%E8%87%AA%E5%BB%BA%20serverless%20%E5%9F%BA%E5%BA%A7/</id>
    <published>2021-11-11T00:15:32.035Z</published>
    <updated>2021-11-13T02:11:18.035Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="serverless-尝试自建-serverless-基座"   >          <a href="#serverless-尝试自建-serverless-基座" class="heading-link"><i class="fas fa-link"></i></a>serverless - 尝试自建 serverless 基座</h1>      <p>serverless 一般不开源，人人自己做，尝试自建理解原理。</p><span id="more"></span><p><span class="exturl"><a class="exturl__link"   href="https://cloud.tencent.com/developer/article/1748038" >深入serverless原理（1）自建serverless平台，搭建源码调试环境</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">serverless - 尝试自建 serverless 基座</summary>
    
    
    
    <category term="serverless" scheme="http://zjeff-953.gitee.io/zjeff/categories/serverless/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>生活随笔 - 11 你软怎么多了这么多保研名额</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/09/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2011%20cn%20master%20%E7%9A%84%E7%BB%93%E6%9E%84%E6%80%A7%E5%8F%91%E7%83%82%E5%8F%91%E8%87%AD/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/09/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2011%20cn%20master%20%E7%9A%84%E7%BB%93%E6%9E%84%E6%80%A7%E5%8F%91%E7%83%82%E5%8F%91%E8%87%AD/</id>
    <published>2021-11-09T05:38:57.616Z</published>
    <updated>2021-12-15T01:33:58.808Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="生活随笔-11-你软怎么多了这么多保研名额"   >          <a href="#生活随笔-11-你软怎么多了这么多保研名额" class="heading-link"><i class="fas fa-link"></i></a>生活随笔 - 11 你软怎么多了这么多保研名额</h1>      <p>好吧，本来是现有实然，再找因然，最后得出方法论的完美闭环。</p><p>怎么突然多了这么个选项，不得不说还是有点动摇的，重新通过对比表衡量下这些选择的利弊，并且得到可行方法论。</p><span id="more"></span>        <h2 id="1-世界观"   >          <a href="#1-世界观" class="heading-link"><i class="fas fa-link"></i></a>1. 世界观</h2>              <h3 id="1-1-利弊分析表"   >          <a href="#1-1-利弊分析表" class="heading-link"><i class="fas fa-link"></i></a>1.1 利弊分析表</h3>      <p>不做 DL, 因为 DL 没有任何可解释性, 很难变现, 不太喜欢</p><p>应该是 分布式系统 / 云计算 / DB 相关</p><div class="table-container"><div class="table-container"><table><thead><tr><th>考察方向</th><th>读研<br />[本校/本院/华工]</th><th>上班<br />[鸡架 同时在线读 OMSCS]</th><th>出国<br />[工作1-2年后申请NTU/USTOP 50]</th><th>出国 PHD<br />[三年至少到9不然读NTU博]</th></tr></thead><tbody><tr><td>学历</td><td>末流985本科+末流985硕士</td><td>末流985本科+FLAG认的MS</td><td>末流985本科+谁都认的MS</td><td>末流985本科 + PHD</td></tr><tr><td>校招 拿 BAT 可能性</td><td>100%</td><td>100%</td><td>100%</td><td>0</td></tr><tr><td>校招 拿 BAT SP 可能性</td><td>100%</td><td>90%</td><td>100%</td><td>0</td></tr><tr><td>三年后 拿 FLAG (US) 可能性</td><td>80%</td><td>85%</td><td>100%</td><td>80%</td></tr><tr><td>三年后 拿 FLAG (CN) 可能性</td><td>90%</td><td>95%</td><td>100%</td><td>0</td></tr><tr><td>花费</td><td>- 生活1,2万 -税前 50w * 3</td><td>+50w * 3 - $ 7k</td><td>出入相抵</td><td>无</td></tr><tr><td>时间成本</td><td>两年半 - 三年半<br />(大四是捐了,研三可能放实习)</td><td>(好像实习转正是正式薪资)</td><td>1-2 年</td><td>3-5 年</td></tr><tr><td>成果</td><td>可能能发好 paper</td><td>行业专家</td><td>海归 MS</td><td>转向学术界</td></tr><tr><td>剩余价值流向</td><td>导师腰包</td><td>老板腰包</td><td>老板腰包 + 学校腰包</td><td>学术界</td></tr><tr><td>剩余价值率</td><td>800%</td><td>200%</td><td>150%</td><td>200%</td></tr><tr><td>学习内容自由度</td><td>中</td><td>高</td><td>高</td><td>高</td></tr></tbody></table></div></div>        <h3 id="1-2-防止二心"   >          <a href="#1-2-防止二心" class="heading-link"><i class="fas fa-link"></i></a>1.2 防止二心</h3>              <h4 id="1-2-1-cn-master-教育是结构性的烂"   >          <a href="#1-2-1-cn-master-教育是结构性的烂" class="heading-link"><i class="fas fa-link"></i></a>1.2.1 cn-master 教育是结构性的烂</h4>      <blockquote><p>核心就是读研你捆到导师哪里了，你想跑就扣你学位证</p><p>你们的利益又不一定是一个方向</p><p>让你做啥就做啥，屎山二开就屎山二开，做不合方向的就做不合方向的</p></blockquote><p>例子1 ：</p><p><code>zh</code> 分的项目不好，划水刷题的去国赛，努力干活的过不了校赛。</p><p>例子2 ：</p><p>你早早的看到那些复杂度危险，<code>zx</code> 的短视导致屎山二开，后面复杂度上来了直接绷不住了，后面又自己找企业重新开发去了，给我整笑了。</p><p>例子3 ：</p><p><code>z</code> 为了自己恰钱项目推进，阻碍你进一步学习<code>基础知识</code>和<code>后端知识</code>，而你在后面意识到这些故意摸鱼的时候学的内容才成为了<code>你面试时候的核心竞争力</code>，但是 <code>OS</code> 因为要准备 6 门考试和一门面试没时间复习习题，考了<code>倒数</code>还是很<code>遗憾</code>。</p><p>例子4 ：</p><p><code>w</code>为了自己的横向不顾你的前途，疯狂撒谎想让你给ta打工，前景渺茫</p><p>例子5 ：</p><p>这些可能 bar 不够高，<code>mr.t</code> 的 bar 够高了吧，但是实际内容还是主要在应用开发上，没有诗和远方，我理解，要恰饭的嘛，但是我去，不可能。</p><p>例子6 ：</p><p>不是没有好地方，但是好地方你够不着，<code>NJU</code> 那个做 <code>k8s</code> 的，<code>SJTU</code> 那个 <code>micro service</code> 的，但是你够不到，没有两全法，智能选一，我选工业界，做点自己喜欢的更好。</p>        <h4 id="1-2-2-你更喜欢英文环境的教学"   >          <a href="#1-2-2-你更喜欢英文环境的教学" class="heading-link"><i class="fas fa-link"></i></a>1.2.2 你更喜欢英文环境的教学</h4>      <p>英文课程质量高太多了，无论是 <code>net work</code> 还是 <code>os</code></p><p>一边实习一边学英语，读 <code>paper</code> ，考<code>雅思</code>，申请 <code>OMSCS</code> 敦促自己学习</p>        <h4 id="1-2-3-实打实的钱-vs-画饼-选哪个你自己心里有数"   >          <a href="#1-2-3-实打实的钱-vs-画饼-选哪个你自己心里有数" class="heading-link"><i class="fas fa-link"></i></a>1.2.3 实打实的钱 vs 画饼 选哪个你自己心里有数</h4>      <p>饼会没得，你记得吧，只有逻辑架构的micro service，根本发不出paper的无效工作，研发团队小且混乱，凭什么成大事</p>        <h4 id="1-2-4-学校是监管盲区，充满混乱的利益分配"   >          <a href="#1-2-4-学校是监管盲区，充满混乱的利益分配" class="heading-link"><i class="fas fa-link"></i></a>1.2.4 学校是监管盲区，充满混乱的利益分配</h4>      <p>一个报销牵扯出多少屁事</p><p>还有被 zx 白嫖的一个月，sb zx</p>        <h4 id="1-2-5-互联网会面临更激烈的竞争"   >          <a href="#1-2-5-互联网会面临更激烈的竞争" class="heading-link"><i class="fas fa-link"></i></a>1.2.5 互联网会面临更激烈的竞争</h4>      <p>互联网竞争的是人们的时间，但是这个时间短时间内是放不出来的，</p>        <h2 id="2-方法论"   >          <a href="#2-方法论" class="heading-link"><i class="fas fa-link"></i></a>2. 方法论</h2>              <h3 id="2-1-本阶段"   >          <a href="#2-1-本阶段" class="heading-link"><i class="fas fa-link"></i></a>2.1 本阶段</h3>      <p>本阶段先把那个使用文档交了，然后开始卷成绩</p><p>把项目用 GVA 重构一边</p><p>1.10-2.10 刷面经，让自己秋招不漏窃</p><p>写书的目录，争取立项</p>        <h3 id="2-2-再往后"   >          <a href="#2-2-再往后" class="heading-link"><i class="fas fa-link"></i></a>2.2 再往后</h3>      <p>卷，使劲卷，把老员工卷怕了再说</p><p>如果干 3，4 年没有起色，那就 run 到坡县读 phd 去了，</p>        <h3 id="2-3-最终"   >          <a href="#2-3-最终" class="heading-link"><i class="fas fa-link"></i></a>2.3 最终</h3>      <p>上班或者上班后出国</p><ol><li>学技术</li><li>出版技术刊物</li><li>经营自媒体</li><li>学 雅思，毕业前拿下 雅思 7</li><li>毕业三年后读非全 或者考虑润</li></ol>]]></content>
    
    
    <summary type="html">描述</summary>
    
    
    
    <category term="生活随笔" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="生活随笔" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>生活随笔 - 11 我犯过的职场错误</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/09/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2010%20%E6%88%91%E7%8A%AF%E8%BF%87%E7%9A%84%E8%81%8C%E5%9C%BA%E9%94%99%E8%AF%AF/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/09/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2010%20%E6%88%91%E7%8A%AF%E8%BF%87%E7%9A%84%E8%81%8C%E5%9C%BA%E9%94%99%E8%AF%AF/</id>
    <published>2021-11-09T05:38:16.198Z</published>
    <updated>2021-11-15T03:30:26.128Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="生活随笔-11-我犯过的职场错误"   >          <a href="#生活随笔-11-我犯过的职场错误" class="heading-link"><i class="fas fa-link"></i></a>生活随笔 - 11 我犯过的职场错误</h1>      <p>我是过的太舒坦了吧，这两年，都没遇到什么牛马。现在要和新的人打交道了，想起来这些牛马的嘴脸了。</p><span id="more"></span><p>[TOC]</p>        <h2 id="1-不挑活儿"   >          <a href="#1-不挑活儿" class="heading-link"><i class="fas fa-link"></i></a>1.不挑活儿</h2>      <p>有的活很显然 TMD 就是臭鱼烂虾干的，把那些活儿留给臭鱼烂虾就好了，不要接下来，不是功劳的问题。</p><p>主要是做臭鱼烂虾的活没有成就感，太烦了，自己都会很憋屈。</p><p>看到好活儿主动请缨，但是不要超过自己的掌控范围（也就是自己在某些方面是臭鱼烂虾的时候）。</p>        <h2 id="2-写小作文"   >          <a href="#2-写小作文" class="heading-link"><i class="fas fa-link"></i></a>2.写小作文</h2>      <p>别人凭什么花时间看你的小作文，你 TMD 是带文豪还是什么牛马，自己心理清楚，人家凭什么百忙之中看你的小作文。</p><p>你 TM 能不能在有限的字数内把问题说清楚。</p>        <h2 id="3-不够直率-拐弯抹角"   >          <a href="#3-不够直率-拐弯抹角" class="heading-link"><i class="fas fa-link"></i></a>3.不够直率 拐弯抹角</h2>      <p>这不是传统行业，你不是客服（暂时），你对于同事你们基本是利益共同体（除了某些煞笔用局部竞争的思维处事）。</p><p>不用拘谨，有事说就行了。</p><p>尤其对领导和其他职位的人比如产品和项目经理，你们更是一条线上的，同事可能怕争⭐，领导可不怕，只要不骂人就行。</p><p>碰到傻逼就以直报怨，不管他，做自己的，讲逻辑。</p>        <h2 id="4-把同事当朋友"   >          <a href="#4-把同事当朋友" class="heading-link"><i class="fas fa-link"></i></a>4.把同事当朋友</h2>      <p>我认为世界之大，天生我才必有用，这里不行走就行了。</p><p>但是有的人是属实的傻逼，走不动，毕业了就没想过成长，没有职业规划，纯粹混吃等死，他们就是内耗竞争思维，我可以不成长，你也不许成长。</p><p>这种臭鱼烂虾和 小学的 耿某某，史某某，李某某，常某某，高中的那个杜某某，那个史某某，还有那个我不记得名字的那个，学长黄，学姐李，还有 你妈 ，都如出一辙，纯纯的祸害，不必理会。</p><p>著名哲学家派大星曾经说过：</p><blockquote><p>提到钱，任何人都没有是非对错，但重点是有没有情义道德。</p></blockquote><p>对，他们很傻逼</p><p>但是，</p><p>从领导的角度考虑，懒得招人，</p><p>从他们的角度考虑，算了还是不要从傻逼的角度考虑了，</p><p>从自己的角度考虑，他们傻才显得你理性和明智，不理就行了（不想着改变别人是明智的），</p><p>积累自己的核心竞争力，不为这些东西所动，多和产品，同学，朋友，网友，外包(因为你们没有竞争关系)沟通，少理这种人。</p><p>（ r 和 w 都是这样，而且两个人的关系很不健康，是 w 打压 r ， r 不敢反抗，因为 ta 确实需要仰仗 w ，不够 qualify ，然后去加害别人， 比如外包的，打杂的，实习的，真 nm 恶心到我了）</p>]]></content>
    
    
    <summary type="html">我是过的太舒坦了吧，这两年，都没遇到什么牛马。</summary>
    
    
    
    <category term="生活随笔" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="生活随笔" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>软件测试 - 04 - 使用postman和jmeter</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/10/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%20-%2004%20-%20%E4%BD%BF%E7%94%A8postman%E5%92%8Cjmeter/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/10/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%20-%2004%20-%20%E4%BD%BF%E7%94%A8postman%E5%92%8Cjmeter/</id>
    <published>2021-10-12T06:34:26.444Z</published>
    <updated>2021-10-12T10:26:34.208Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="软件测试-04-使用postman和jmeter"   >          <a href="#软件测试-04-使用postman和jmeter" class="heading-link"><i class="fas fa-link"></i></a>软件测试 - 04 - 使用postman和jmeter</h1>      <p>[TOC]</p><span id="more"></span>        <h2 id="1-Postman"   >          <a href="#1-Postman" class="heading-link"><i class="fas fa-link"></i></a>1. Postman</h2>      <p>采用Postman接口测试软件对百度百科（<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/）搜索引擎进行接口测试。如对词条“软件工程”返回页面内容进行测试验证，给出请求参数设置、Tests脚本、Body响应结果、Test" >https://baike.baidu.com/）搜索引擎进行接口测试。如对词条“软件工程”返回页面内容进行测试验证，给出请求参数设置、Tests脚本、Body响应结果、Test</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>Results结果说明及运行界面。</p>        <h3 id="参数设置："   >          <a href="#参数设置：" class="heading-link"><i class="fas fa-link"></i></a>参数设置：</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173312.png" alt="">首先观察百度百科搜索界面的Url,<br>我们可以发现</p><p>百度百科搜索结果采用的是地址定位模式, 查询词条XXX的时候将会定向到路由:<br><span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/XXX" >https://baike.baidu.com/item/XXX</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> , 然后就会加上对应的词条id,<br>而且采用的隐式参数模式我们并不能简单的看到params是什么,<br>所以直接输入这个url发送get请求就可以获取对应的返回体, 返回体应该是一个html页面,<br>所以只需要设置简单的url和选择get方法就可以了。</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173321.png" alt=""></p><p>经过测试发现地址最后的标识id可以不写也能获取到正确的页面内容，所以我们可以这样进行接口测试</p>        <h3 id="Tests脚本B："   >          <a href="#Tests脚本B：" class="heading-link"><i class="fas fa-link"></i></a>Tests脚本B：</h3>      <p>这是postman中的test脚本的生命期，我们可以对于response进行javascript的<img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173323.png" alt=""></p><p>脚本处理，我想要验证接口是否能正常调用，返回的内容是不是我们期望的，所以我们要验证他的statuscode是不是200，html内容有没有包含“软件工程”，接口的返回时间是不是小于200ms三件事，所以我们需要编写三段脚本：</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试接口是否可以访问  </span></span><br><span class="line">pm.test(<span class="string">&quot;Status code is 200&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">pm.response.to.have.status(<span class="number">200</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试接口返回时间  </span></span><br><span class="line">pm.test(<span class="string">&quot;Response time is less than 200ms&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">pm.expect(pm.response.responseTime).to.be.below(<span class="number">200</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试内容是否正确  </span></span><br><span class="line">pm.test(<span class="string">&quot;Body contains 软件工程&quot;</span>,() =\&gt; &#123;  </span><br><span class="line">pm.expect(pm.response.text()).to.include(<span class="string">&quot;软件工程&quot;</span>);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure>        <h3 id="Test-Results结果说明："   >          <a href="#Test-Results结果说明：" class="heading-link"><i class="fas fa-link"></i></a>Test Results结果说明：</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173327.png" alt="">运行结果如下：</p><p>这样我们可以看到这个接口能够成功的接受请求发送响应并返回正确的结果<br>，但是响应速度不是很快，不过一次测试可信度不是很高，所以我们可以试验多次查看一下效果：</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173704.png" alt=""><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173602.png" alt=""><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173600.png" alt=""><img src="media/8c9c301424f3388e259703ae09ada77e.png" alt=""></p><p>可以看到经过五次的测试，我们可以看到有两次能够满足200ms内完成响应，还有较大提升空间</p>        <h3 id="Body结果说明："   >          <a href="#Body结果说明：" class="heading-link"><i class="fas fa-link"></i></a>Body结果说明：</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173559.png" alt=""></p><p>可以看到能够正常返回html页面，结果也正确。（还有部分搜索引擎优化）</p><p>点击preview，也可以观察页面能够成功渲染</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173557.png" alt=""></p>        <h3 id="运行界面："   >          <a href="#运行界面：" class="heading-link"><i class="fas fa-link"></i></a>运行界面：</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173555.png" alt=""></p>        <h2 id="2-JMeter"   >          <a href="#2-JMeter" class="heading-link"><i class="fas fa-link"></i></a>2. JMeter</h2>      <p>采用JMeter性能测试软件对百度搜索引擎查询“软件测试”页面内容进行性能测试，给出50、100并发用户的测试过程说明及性能测试运行结果界面。</p>        <h3 id="分析搜索的url"   >          <a href="#分析搜索的url" class="heading-link"><i class="fas fa-link"></i></a>分析搜索的url</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173552.png" alt=""></p><p>首先对百度搜索结果的的url进行分析，百度采用的是https协议, 除了百度的域名，有s路由标识所搜结果，wd和ie两个params分别标识查询参数和编码类型，然后我们就可以对他进行性能测试。</p>        <h3 id="下载和安装JMeter"   >          <a href="#下载和安装JMeter" class="heading-link"><i class="fas fa-link"></i></a>下载和安装JMeter</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173718.png" alt="">进入JMeter官网，点击Download下载</p><p>点击下载编译后的版本</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173721.png" alt=""></p>        <h3 id="运行Jmeter"   >          <a href="#运行Jmeter" class="heading-link"><i class="fas fa-link"></i></a>运行Jmeter</h3>      <p>将文件解压后进入解压后的文件夹目录</p><p>运行 解压目录\apache-jmeter-5.4.1\bin\jmeter.sh</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173724.png" alt="">之后会运行这个shell脚本,这个shell脚本不能关闭</p><p>然后就会打开JMeter的页面</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173744.png" alt=""></p><p>这样就安装成功并进入JMeter了</p>        <h3 id="创建测试计划并添加线程组"   >          <a href="#创建测试计划并添加线程组" class="heading-link"><i class="fas fa-link"></i></a>创建测试计划并添加线程组</h3>      <p>首先给测试计划改个名字</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173749.png" alt=""></p><p>右键测试计划, 添加线程组</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173804.png" alt=""></p><p>按照前面的分析,填写对应的参数,<br>请求类型, url ,参数, 输入中文的时候要勾选编码项</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173824.png" alt="">然后设置对应的线程数和循环次数<br>Rame-Up时间表示在多少秒内启动对应线程数的线程,先设置成1试一下能不能成功进行访问</p>        <h3 id="添加http请求"   >          <a href="#添加http请求" class="heading-link"><i class="fas fa-link"></i></a>添加http请求</h3>      <p>然后为线程组添加http请求取样器</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173820.png" alt=""></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173926.png" alt=""></p>        <h3 id="添加请求头管理器"   >          <a href="#添加请求头管理器" class="heading-link"><i class="fas fa-link"></i></a>添加请求头管理器</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173924.png" alt=""></p>        <h3 id="添加查看结果树"   >          <a href="#添加查看结果树" class="heading-link"><i class="fas fa-link"></i></a>添加查看结果树</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173932.png" alt=""></p>        <h3 id="启动线程组"   >          <a href="#启动线程组" class="heading-link"><i class="fas fa-link"></i></a>启动线程组</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173934.png" alt=""></p>        <h3 id="验证结果并解决百度反爬"   >          <a href="#验证结果并解决百度反爬" class="heading-link"><i class="fas fa-link"></i></a>验证结果并解决百度反爬</h3>      <p>可以看到触发了百度的反爬机制,不能测试到正确的页面</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173937.png" alt=""></p><p>参考文章:</p><p><span class="exturl"><a class="exturl__link"   href="https://jingyan.baidu.com/article/e4d08ffdc1225b4ed3f60d3c.html" >https://jingyan.baidu.com/article/e4d08ffdc1225b4ed3f60d3c.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>我们应该设置请求头</p><p>首先打开网页并打开控制台查看需要哪些请求头, 然后将他们全部复制,</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174000.png" alt=""></p><p>点击请求头管理器,<br>然后从剪贴板添加<img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174003.png" alt=""></p><p>然后我们就可以获取到所有需要的头了</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174006.png" alt=""></p><p>运行后查看响应结果</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174008.png" alt=""></p><p>需要向下滚动查看更多</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174010.png" alt="">也可搜索查看是否得到正确结果</p>        <h3 id="测试50个线程的结果"   >          <a href="#测试50个线程的结果" class="heading-link"><i class="fas fa-link"></i></a>测试50个线程的结果</h3>      <p>清除一下结果</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174012.png" alt=""></p><p>然后我们就可以添加一些其他的检测器, 开始性能测试</p><p>修改线程数为50, 点击运行</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174031.png" alt=""></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174033.png" alt="">查看结果树</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174036.png" alt="">查看聚合报告</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174038.png" alt="">查看汇总报告</p>        <h4 id="聚合报告属性含义"   >          <a href="#聚合报告属性含义" class="heading-link"><i class="fas fa-link"></i></a>聚合报告属性含义</h4>      <p>属性描述</p><p>名称 ：显示的此取样器的描述性名称，可自定义</p><p>文件名：要保存或/读取的测试结果文件名，包含路径</p><p>Label ：执行样品的标签，如HTTP请求的名称，事务控制器名称</p><p>样本<br>：执行的，具有相同标签的样本数量。需要注意，多个样本同名的将被统计在一起，所以在编写脚本时样品命名应该唯一，除非你希望这么做。</p><p>平均值： 一组样本的平均响应时间</p><p>中位数： 一组样本中间的响应时间，50%大于此值，50%小于此值</p><p>90%百分位 ：90％的样品响应时间不超过此时间，剩下的至少需要这么长</p><p>95%百分位 ：95％的样品响应时间不超过此时间，剩下的至少需要这么长</p><p>99%百分位 ：99％的样品响应时间不超过此时间，剩下的至少需要这么长</p><p>最小值 ：一组样本中最短的响应时间</p><p>最大值 ：一组样本中最长的响应时间</p><p>异常% ：执行失败的请求占一组样本的百分比</p><p>吞吐量<br>：以每秒/分钟/小时的请求数衡量。以使显示的速率至少为1.0。代表完成的请求数/秒/分钟/小时，通常可以反应服务器的事务处理能力</p><p>接收/sec： 数据接收速率，反应获取数据的网络使用情况</p><p>发送/sec： 数据发送速率，反应发送数据的网络使用情况</p>        <h4 id="汇总报告属性描述"   >          <a href="#汇总报告属性描述" class="heading-link"><i class="fas fa-link"></i></a>汇总报告属性描述</h4>      <p>名称 ：显示的此取样器的描述性名称，可自定义</p><p>文件名 ：要保存或/读取的测试结果文件名，包含路径</p><p>Label ：执行样品的标签，如HTTP请求的名称，事务控制器名称</p><p>样本：<br>执行的，具有相同标签的样本数量。需要注意，多个样本同名的将被统计在一起，所以在编写脚本时样品命名应该唯一，除非你希望这么做。</p><p>平均值：一组样本的平均响应时间</p><p>最小值： 一组样本中最短的响应时间</p><p>最大值：一组样本中最长的响应时间</p><p>异常%： 执行失败的请求占一组样本的百分比</p><p>吞吐量：<br>以每秒/分钟/小时的请求数衡量。以使显示的速率至少为1.0。代表完成的请求数/秒/分钟/小时，通常可以反应服务器的事务处理能力</p><p>接收/sec： 数据接收速率，反应获取数据的网络使用情况</p><p>发送/sec： 数据发送速率，反应发送数据的网络使用情况</p><p>平均字节数： 样本响应数据的平均大小，以字节为单位</p><p>可以看到百度的搜索性能还是较好的</p>        <h3 id="模拟100个用户并发"   >          <a href="#模拟100个用户并发" class="heading-link"><i class="fas fa-link"></i></a>模拟100个用户并发</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174051.png" alt="">然后修改线程数为100, 模拟100个用户并发</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174114.png" alt=""></p><p><img src="media/f289cedb42a8cc3946dbdfb57148bea8.png" alt=""></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174134.png" alt=""></p>]]></content>
    
    
    <summary type="html">软件测试 - 04 - 使用postman和jmeter</summary>
    
    
    
    <category term="基础知识" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
</feed>
