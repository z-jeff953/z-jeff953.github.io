<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeff&#39;s blog</title>
  
  <subtitle>Keep Curious , Keep Learning !</subtitle>
  <link href="http://zjeff-953.gitee.io/zjeff/atom.xml" rel="self"/>
  
  <link href="http://zjeff-953.gitee.io/zjeff/"/>
  <updated>2021-11-20T08:34:10.222Z</updated>
  <id>http://zjeff-953.gitee.io/zjeff/</id>
  
  <author>
    <name>Jeffords zuo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Polaris - 01 认识 Polaris</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/18/%E4%BA%91%E5%8E%9F%E7%94%9F/Polaris%20-%2001%20%E8%AE%A4%E8%AF%86%20Polaris/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/18/%E4%BA%91%E5%8E%9F%E7%94%9F/Polaris%20-%2001%20%E8%AE%A4%E8%AF%86%20Polaris/</id>
    <published>2021-11-17T16:00:00.000Z</published>
    <updated>2021-11-20T08:34:10.222Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Polaris-01-认识-Polaris"   >          <a href="#Polaris-01-认识-Polaris" class="heading-link"><i class="fas fa-link"></i></a>Polaris - 01 认识 Polaris</h1>      <span id="more"></span><p>服务治理是微服务架构下的重要问题，一般的微服务治理需要这样几个模块。</p><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>        <h2 id="1-安装-Polaris"   >          <a href="#1-安装-Polaris" class="heading-link"><i class="fas fa-link"></i></a>1. 安装 Polaris</h2>              <h2 id="2-使用-Polaris-搭建-real-world-app"   >          <a href="#2-使用-Polaris-搭建-real-world-app" class="heading-link"><i class="fas fa-link"></i></a>2. 使用 Polaris 搭建 real world app</h2>      ]]></content>
    
    
    <summary type="html">Polaris</summary>
    
    
    
    <category term="Polaris" scheme="http://zjeff-953.gitee.io/zjeff/categories/Polaris/"/>
    
    
    <category term="Polaris" scheme="http://zjeff-953.gitee.io/zjeff/tags/Polaris/"/>
    
  </entry>
  
  <entry>
    <title>标题</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/14/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2013%20%E6%88%91%E4%B8%8E%20ENTP/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/14/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2013%20%E6%88%91%E4%B8%8E%20ENTP/</id>
    <published>2021-11-14T06:56:33.616Z</published>
    <updated>2021-11-14T08:46:43.239Z</updated>
    
    <content type="html"><![CDATA[<p>#</p><span id="more"></span>]]></content>
    
    
    <summary type="html">描述</summary>
    
    
    
    <category term="分类" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>学点别的 - 02 维特根斯坦与他的哲学</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/14/%E5%AD%A6%E7%82%B9%E5%88%AB%E7%9A%84/%E5%AD%A6%E7%82%B9%E5%88%AB%E7%9A%84%20-%2002%20%E7%BB%B4%E7%89%B9%E6%A0%B9%E6%96%AF%E5%9D%A6%E4%B8%8E%E4%BB%96%E7%9A%84%E5%93%B2%E5%AD%A6/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/14/%E5%AD%A6%E7%82%B9%E5%88%AB%E7%9A%84/%E5%AD%A6%E7%82%B9%E5%88%AB%E7%9A%84%20-%2002%20%E7%BB%B4%E7%89%B9%E6%A0%B9%E6%96%AF%E5%9D%A6%E4%B8%8E%E4%BB%96%E7%9A%84%E5%93%B2%E5%AD%A6/</id>
    <published>2021-11-14T06:53:01.085Z</published>
    <updated>2021-11-17T13:54:30.992Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="学点别的-02-维特根斯坦与他的哲学"   >          <a href="#学点别的-02-维特根斯坦与他的哲学" class="heading-link"><i class="fas fa-link"></i></a>学点别的 - 02 维特根斯坦与他的哲学</h1>      <span id="more"></span>        <h2 id="《数据密集型系统设计》和维特根斯坦"   >          <a href="#《数据密集型系统设计》和维特根斯坦" class="heading-link"><i class="fas fa-link"></i></a>《数据密集型系统设计》和维特根斯坦</h2>              <h2 id="维特根斯坦的传奇色彩"   >          <a href="#维特根斯坦的传奇色彩" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦的传奇色彩</h2>              <h2 id="维特根斯坦的人生经历"   >          <a href="#维特根斯坦的人生经历" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦的人生经历</h2>              <h2 id="维特根斯坦和康德"   >          <a href="#维特根斯坦和康德" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦和康德</h2>              <h2 id="维特根斯坦和《逻辑哲学论》"   >          <a href="#维特根斯坦和《逻辑哲学论》" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦和《逻辑哲学论》</h2>              <h2 id="维特根斯坦和财富"   >          <a href="#维特根斯坦和财富" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦和财富</h2>              <h2 id="维特根斯坦和图灵"   >          <a href="#维特根斯坦和图灵" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦和图灵</h2>              <h2 id="维特根斯坦和《哲学研究》"   >          <a href="#维特根斯坦和《哲学研究》" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦和《哲学研究》</h2>      <p>维氏后期提出“语言—游戏说”、“家族相似性”、“不要去想而要去看”等等理论和理念，放弃了以逻辑规则为意义标准的思想，与创立逻辑原子主义的罗素和题主提及的哥德尔等逻辑学家在哲学上分道扬镳，自然无法得到他们的认同。事实上，此时维特根斯坦的身份是分析哲学中日常语言流派的奠基人（之一）。</p>        <h2 id="维特根斯坦和真值表"   >          <a href="#维特根斯坦和真值表" class="heading-link"><i class="fas fa-link"></i></a>维特根斯坦和真值表</h2>              <h2 id="徐英瑾和维特根斯坦"   >          <a href="#徐英瑾和维特根斯坦" class="heading-link"><i class="fas fa-link"></i></a>徐英瑾和维特根斯坦</h2>      <p>《心智、语言和机器 ———— 维特根斯坦哲学和人工智能科学的对话》</p>        <h2 id="程序语言和维特根斯坦"   >          <a href="#程序语言和维特根斯坦" class="heading-link"><i class="fas fa-link"></i></a>程序语言和维特根斯坦</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://www.omegaxyz.com/2018/06/21/boolean-algebra/" >https://www.omegaxyz.com/2018/06/21/boolean-algebra/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">学点别的 - 02 维特根斯坦与他的哲学</summary>
    
    
    
    <category term="学点别的" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%AD%A6%E7%82%B9%E5%88%AB%E7%9A%84/"/>
    
    
    <category term="学点别的" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E5%AD%A6%E7%82%B9%E5%88%AB%E7%9A%84/"/>
    
  </entry>
  
  <entry>
    <title>Go - 02 - 阅读 gin-vue-admin 代码</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/13/Golang/Go%20-%2002%20-%20%E9%98%85%E8%AF%BB%20gin-vue-admin%20%E4%BB%A3%E7%A0%81/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/13/Golang/Go%20-%2002%20-%20%E9%98%85%E8%AF%BB%20gin-vue-admin%20%E4%BB%A3%E7%A0%81/</id>
    <published>2021-11-13T11:32:38.339Z</published>
    <updated>2021-11-17T06:33:04.419Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="Go-02-阅读-gin-vue-admin-代码"   >          <a href="#Go-02-阅读-gin-vue-admin-代码" class="heading-link"><i class="fas fa-link"></i></a>Go - 02 - 阅读 gin-vue-admin 代码</h1>      <p>通过阅读一个功能齐全的 Curd 应用学习 gin 和 gorm 和 常用库</p><span id="more"></span>        <h2 id="1-基础使用"   >          <a href="#1-基础使用" class="heading-link"><i class="fas fa-link"></i></a>1. 基础使用</h2>      <p>环境说明</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- node版本 &gt; v12.18.3</span><br><span class="line">- golang版本 &gt;= v1.16</span><br><span class="line">- Goland</span><br><span class="line">- vscode</span><br></pre></td></tr></table></div></figure><p>项目官网：<span class="exturl"><a class="exturl__link"   href="https://www.gin-vue-admin.com/" >自动化全栈开发基础平台 | Gin-Vue-Admin</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>点击右上角的 github 克隆源码下来</p><p>项目地址:<span class="exturl"><a class="exturl__link"   href="https://github.com/flipped-aurora/gin-vue-admin" >flipped-aurora/gin-vue-admin: </a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:flipped-aurora/gin-vue-admin.git</span><br></pre></td></tr></table></div></figure><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111151113056.png" alt=""></p><p>然后使用 <code>vscode</code> 打开 web 目录(前端项目), 使用 <code>goland</code> 打开 server 目录(后端项目)。</p><p>在 <code>goland</code> 中打开新终端 , 输入 <code>go generate</code> 同步依赖 , 然后 启动 <code>main.go</code> 中的 <code>main</code> 函数。</p><p>在 <code>vscode</code> 打开新终端 , 输入 <code>npm install</code> 安装前端项目依赖 , 等待安装完成后 , 然后输入 <code>npm run serve</code> 启动控制台前端。</p><p>然后点击 初始化 项目， 填写 mysql 的地址账号密码和 db 名。</p><p>最后打开前端项目就可以使用了。</p><p>详细使用可以参考官网的视频教程。</p>        <h2 id="2-启动入口代码"   >          <a href="#2-启动入口代码" class="heading-link"><i class="fas fa-link"></i></a>2. 启动入口代码</h2>      <p>现在分析下 <code>main.go</code> 里的内容</p>        <h3 id="2-1-go-generate-注释"   >          <a href="#2-1-go-generate-注释" class="heading-link"><i class="fas fa-link"></i></a>2.1 go:generate 注释</h3>      <p><code>go:generate</code> 注释在这里标识了一系列脚本</p><p>在项目目录中使用 <code>go generate</code> 命令 会执行被 <code>go:generate</code> 注释的脚本</p><p>这个脚本可以是任何内容 , 只要再当前环境中可以 执行 即可,一般为 shell script .</p><p>按照推荐做法 , 使用了这个命令最好是生成了一些代码文件</p><blockquote><p> “to automate the running of tools to generate source code before compilation.” </p><p><span class="exturl"><a class="exturl__link"   href="https://golang.org/doc/go1.4#gogenerate" >Go 1.4 Release Notes - The Go Programming Language (golang.org)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>但是, 在这里, 这个项目中, 使用这个命令的目的是通过命令行设置 go mod 的依赖源, 然后更新依赖.</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111151354549.png" alt=""></p><p>关于这个命令的更多用法可以参考这两篇文章 : 第一篇英文的 一定要看</p><p><span class="exturl"><a class="exturl__link"   href="https://blog.carlmjohnson.net/post/2016-11-27-how-to-use-go-generate/" >How to Use //go:generate · The Ethically-Trained Programmer</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://coolshell.cn/articles/21179.html#Go_Generator" >Go 编程模式：Go Generation | 酷 壳 - CoolShell</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="2-2-全局包-global"   >          <a href="#2-2-全局包-global" class="heading-link"><i class="fas fa-link"></i></a>2.2 全局包 global</h3>      <blockquote><p>在这项目中 GVA 是 gin-vue-admin 的缩写</p></blockquote><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111151409100.png" alt=""></p><p>先看第一行代码</p><figure class="highlight go"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">global.GVA_VP = core.Viper()      <span class="comment">// 初始化Viper</span></span><br></pre></td></tr></table></div></figure><p>这行代码中将 <code>global</code> 包 的 <code>GVA_VP</code> 设置为了 <code>core.Viper()</code> 的返回值</p><p>这个 <code>global</code> 声明了一些全局配置变量, 以及 <code>model</code> 中通用的一些属性</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111170951599.png" alt="image-20211117095116510"></p>        <h3 id="2-3-模块管理和包管理"   >          <a href="#2-3-模块管理和包管理" class="heading-link"><i class="fas fa-link"></i></a>2.3 模块管理和包管理</h3>      <p>当我们使用 <code>import</code> 的时候, 我们从哪里 <code>import</code> 了这些代码? </p><p>有三种方式引入包的来源, 我们从安装, 引入和使用三个角度认识这三种方式</p><ol><li>引入 <code>go sdk</code> 的包</li><li>引入 网络上的 的包</li><li>引入 当前项目 的包</li></ol>        <h4 id="2-3-1-引入-go-sdk-的包"   >          <a href="#2-3-1-引入-go-sdk-的包" class="heading-link"><i class="fas fa-link"></i></a>2.3.1 引入 go sdk 的包</h4>      <p><strong>安装</strong></p><p>随 go sdk 安装, 在 goland 中, 显示在这个位置</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171026435.png" alt=""></p><p><strong>引入路径</strong></p><p>引入路径在 <code>GOPATH/src/*</code></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171009671.png" alt=""></p><p>如图所示 <code>database/sql</code> 可以从这个位置引入</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171029793.png" alt=""></p><p>里面有文档, 代码和单测. </p><p><strong>使用</strong></p><p>使用方式和引入方式有关</p><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/259392235" >30. Go 语言中关于包导入必学的 8 个知识点 - 知乎 (zhihu.com)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>使用的时候通过 <code>包名 + 导出变量</code> 使用. </p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171036566.png" alt=""></p>        <h4 id="2-3-2-引入-网络上的-的包"   >          <a href="#2-3-2-引入-网络上的-的包" class="heading-link"><i class="fas fa-link"></i></a>2.3.2 引入 网络上的 的包</h4>      <p><strong>安装</strong></p><p><code>go get -u 你的地址</code></p><p><strong>引入路径</strong></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171049787.png" alt=""></p>        <h4 id="2-3-3-引入-当前项目-的包"   >          <a href="#2-3-3-引入-当前项目-的包" class="heading-link"><i class="fas fa-link"></i></a>2.3.3 引入 当前项目 的包</h4>      <p><strong>声明</strong></p><p>当前项目的名称可以声明在 <code>go mod</code> 中</p><p><code>module xxx</code> 就是模块名, <code>go xxx</code> 是 <code>go sdk</code> 的版本号, <code>require xxx</code> 就是依赖列表</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171057295.png" alt=""></p><p>包名声明在 <code>package xxx</code>, 不一定和文件名对应</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171059580.png" alt=""></p><p><strong>引入</strong></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111171059645.png" alt=""></p>        <h2 id="3-初始化-DB-代码"   >          <a href="#3-初始化-DB-代码" class="heading-link"><i class="fas fa-link"></i></a>3. 初始化 DB 代码</h2>      <p>为什么 可以 通过 web 页配置 db 的配置呢 ?</p><p>他是生成了新的代码, 重写了配置文件吗.</p><p>查看前端项目发现调用 <code>service</code> 名 <code>init/</code></p>        <h2 id="4-目录结构"   >          <a href="#4-目录结构" class="heading-link"><i class="fas fa-link"></i></a>4. 目录结构</h2>              <h2 id="5-基础功能模块"   >          <a href="#5-基础功能模块" class="heading-link"><i class="fas fa-link"></i></a>5. 基础功能模块</h2>      ]]></content>
    
    
    <summary type="html">还是得撸一个</summary>
    
    
    
    <category term="Go" scheme="http://zjeff-953.gitee.io/zjeff/categories/Go/"/>
    
    
    <category term="Go" scheme="http://zjeff-953.gitee.io/zjeff/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes - 01 认识 kubernetes</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/13/%E4%BA%91%E5%8E%9F%E7%94%9F/kubernetes%20-%2001%20%E8%AE%A4%E8%AF%86%20kubernetes/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/13/%E4%BA%91%E5%8E%9F%E7%94%9F/kubernetes%20-%2001%20%E8%AE%A4%E8%AF%86%20kubernetes/</id>
    <published>2021-11-13T04:10:39.711Z</published>
    <updated>2021-11-21T06:43:34.221Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="kubernetes-01-认识-kubernetes"   >          <a href="#kubernetes-01-认识-kubernetes" class="heading-link"><i class="fas fa-link"></i></a>kubernetes - 01 认识 kubernetes</h1>      <p>kubernetes 是一个容器编排工具，可以实现容器的网络，发现，监控，负载。由谷歌开发 . </p><p>这里，我们将会介绍 kubernetes 的基本功能，以及什么时候需要使用 kubernetes . </p><p>基本流程和官网的一样,但是会加一点我对于 这些 构件和不同层级抽象的理解 . </p><p>官网的输出内容有点滞后了, 所以我同步了新的输出格式</p><span id="more"></span><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131218966.png" alt="image-20211113121849921"></p>        <h2 id="1-上手-kubernetes"   >          <a href="#1-上手-kubernetes" class="heading-link"><i class="fas fa-link"></i></a>1. 上手 kubernetes</h2>      <p>通常来说，我们应该从安装开始，但是，kubernetes 比较吃资源，而且，官网有很好的预览服务器，所以先用官网预览服务器上手基本的操作好了。</p><p>打开链接</p><p>中文版 ： <span class="exturl"><a class="exturl__link"   href="https://kubernetes.io/zh/docs/tutorials/hello-minikube/" >你好，Minikube | Kubernetes</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>英文版 ： <span class="exturl"><a class="exturl__link"   href="https://kubernetes.io/docs/tutorials/hello-minikube/" >Hello Minikube | Kubernetes</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>点击启动终端，然后会在浏览器中启动一个终端，然后就可以使用了（记得魔法上网）</p><blockquote><p>这里 kubernetes 本体由 kube cli 管理，minikube 是一个轻量级（简陋）的 kubernetes 客户端</p></blockquote><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131239832.png" alt="image-20211113123902736"></p>        <h3 id="1-1-启动控制仪表盘"   >          <a href="#1-1-启动控制仪表盘" class="heading-link"><i class="fas fa-link"></i></a>1.1 启动控制仪表盘</h3>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube dashboard</span><br></pre></td></tr></table></div></figure><p>点击这个指令可以运行，现在点击他，就可以启动 <code>kubernetes dashborad</code> ，里面包含了一系列 <code>kebernetes</code> 的信息和基础功能。</p><p><img src="C:\Users\15727\AppData\Roaming\Typora\typora-user-images\image-20211113145433029.png" alt="image-20211113145433029"></p><p>点击指向的按钮就可以打开 <code>kebernetes dashboard</code></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131609871.png" alt="image-20211113160912832"></p><p>这样就启动了 <code>kebernetes dashboard</code> 了</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131502199.png" alt="image-20211113150200098"></p><blockquote><p>整个网站的实验环境只会持续一段时间 , 如果时间到了 , 就需要重新创建一个实验环境 , 只需要重复上面的动作, 因为</p></blockquote>        <h3 id="1-2-创建一个-Deployment（部署对象）"   >          <a href="#1-2-创建一个-Deployment（部署对象）" class="heading-link"><i class="fas fa-link"></i></a>1.2 创建一个 Deployment（部署对象）</h3>      <p>我们知道，docker 之间可以构建内网来通信，当我们使用了很多的容器的时候，每个容器的状态，各个不同容器集群的功能组织将会成为一个问题，kubernetes 就提供了这样一个工具，帮助我们拆分容器（方便管理不同用途的容器），监控状态（保证容器和不同服务的正常运作），组织通信（容器之间的数据交换）。</p><p>kubernetes 将容器打包在 pod （资源组/池），每个 pod 中包含一个或者多个容器， Kubernetes Deployment 检查 Pod 的健康状况，并在 Pod 中的容器终止的情况下重新启动新的容器。 Deployment 是管理 Pod 创建和扩展的推荐方法。</p>        <h4 id="1-2-1-创建-Deploymen-并查看-Deployment-的情况"   >          <a href="#1-2-1-创建-Deploymen-并查看-Deployment-的情况" class="heading-link"><i class="fas fa-link"></i></a>1.2.1 创建 Deploymen  并查看 Deployment 的情况</h4>      <p>现在新建一个终端</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131525866.png" alt="image-20211113152518823"></p><p>现在输入下面的这条指令，创建一个新的部署行为</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment hello-node --image=k8s.gcr.io/echoserver:1.4</span><br></pre></td></tr></table></div></figure><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131525145.png" alt="image-20211113152532113"></p><p>这条指令的的含义是这样的</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment [deployment名字] --image=[使用的镜像地址]</span><br></pre></td></tr></table></div></figure><p>现在转到仪表盘, 点击 deployment 查看我们已经创建了一个新的部署对象</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131528136.png" alt="image-20211113152828048"></p><p>我们还可以通过命令行查看 deployment 的状态</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectil get deployments</span><br></pre></td></tr></table></div></figure><p>效果如下：</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131532289.png" alt="image-20211113153210263"></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get deployments</span></span><br><span class="line">NAME         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">hello-node   1/1     1            1           5m45s</span><br></pre></td></tr></table></div></figure>        <h4 id="1-2-2-pod-和-deployment-的关系"   >          <a href="#1-2-2-pod-和-deployment-的关系" class="heading-link"><i class="fas fa-link"></i></a>1.2.2 pod 和 deployment 的关系 *</h4>      <p>deployment 包含一个或者多个 pod 的集群 .deployment 只关心 pod 的数量和状态 , pod 停了就整个新的 , 只要维持 pod 的数量 . 所以在 deployment 的属性中不能看到管辖的 pod 的名字 , 我们需要单独的查看 pod 的状态 . </p><p>部署创建的 pod 的 app 属性将会指向 deployment 的名字 , 用来标识对应关系 . </p>        <h4 id="1-2-3-查看-pod-（资源组-池）-的状态"   >          <a href="#1-2-3-查看-pod-（资源组-池）-的状态" class="heading-link"><i class="fas fa-link"></i></a>1.2.3 查看 pod （资源组/池） 的状态</h4>      <p>我们能可以通过 dashboard 查看 pod 的状态</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131544445.png" alt="image-20211113154423349"></p><p>也可通过命令行查看我们的 资源组 状态</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></div></figure><p>效果如下：</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131552577.png" alt="image-20211113155229532"></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get pods</span></span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">hello-node-7567d9fdc9-64mbx   1/1     Running   0          27m</span><br></pre></td></tr></table></div></figure>        <h4 id="1-2-4-查看集群事件"   >          <a href="#1-2-4-查看集群事件" class="heading-link"><i class="fas fa-link"></i></a>1.2.4 查看集群事件</h4>      <p>在 仪表盘 中, 事件是属于各个对象的 , 所以 , 我们需要在不同的对象中查看事件</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131610697.png" alt="image-20211113161016628"></p><p>使用命令行可以查看所有的 事件 .</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get events</span><br></pre></td></tr></table></div></figure><p>效果如下 ( 这里 我 的体验时间过去了, 重新启动了一遍 )</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131601960.png" alt="image-20211113160136912"></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get events</span></span><br><span class="line">LAST SEEN   TYPE     REASON                    OBJECT                             MESSAGE</span><br><span class="line">101s        Normal   Scheduled                 pod/hello-node-7567d9fdc9-v6qs5    Successfully assigned default/hello-node-7567d9fdc9-v6qs5 to minikube</span><br><span class="line">100s        Normal   Pulling                   pod/hello-node-7567d9fdc9-v6qs5    Pulling image &quot;k8s.gcr.io/echoserver:1.4&quot;</span><br><span class="line">100s        Normal   Pulled                    pod/hello-node-7567d9fdc9-v6qs5    Successfully pulled image &quot;k8s.gcr.io/echoserver:1.4&quot; in 547.409194ms</span><br><span class="line">100s        Normal   Created                   pod/hello-node-7567d9fdc9-v6qs5    Created container echoserver</span><br><span class="line">99s         Normal   Started                   pod/hello-node-7567d9fdc9-v6qs5    Started container echoserver</span><br><span class="line">101s        Normal   SuccessfulCreate          replicaset/hello-node-7567d9fdc9   Created pod: hello-node-7567d9fdc9-v6qs5</span><br><span class="line">101s        Normal   ScalingReplicaSet         deployment/hello-node              Scaled up replica set hello-node-7567d9fdc9 to 1</span><br><span class="line">9m6s        Normal   NodeHasSufficientMemory   node/minikube                      Node minikube status is now: NodeHasSufficientMemory</span><br><span class="line">9m6s        Normal   NodeHasNoDiskPressure     node/minikube                      Node minikube status is now: NodeHasNoDiskPressure</span><br><span class="line">9m6s        Normal   NodeHasSufficientPID      node/minikube                      Node minikube status is now: NodeHasSufficientPID</span><br><span class="line">8m49s       Normal   Starting                  node/minikube                      Starting kubelet.</span><br><span class="line">8m49s       Normal   NodeHasSufficientMemory   node/minikube                      Node minikube status is now: NodeHasSufficientMemory</span><br><span class="line">8m49s       Normal   NodeHasNoDiskPressure     node/minikube                      Node minikube status is now: NodeHasNoDiskPressure</span><br><span class="line">8m49s       Normal   NodeHasSufficientPID      node/minikube                      Node minikube status is now: NodeHasSufficientPID</span><br><span class="line">8m49s       Normal   NodeAllocatableEnforced   node/minikube                      Updated Node Allocatable limit across pods</span><br><span class="line">8m39s       Normal   RegisteredNode            node/minikube                      Node minikube event: Registered Node minikube in Controller</span><br><span class="line">8m39s       Normal   NodeReady                 node/minikube                      Node minikube status is now: NodeReady</span><br><span class="line">8m37s       Normal   Starting                  node/minikube                      Starting kube-proxy.</span><br></pre></td></tr></table></div></figure>        <h4 id="1-2-5-查看集群配置"   >          <a href="#1-2-5-查看集群配置" class="heading-link"><i class="fas fa-link"></i></a>1.2.5 查看集群配置</h4>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl config view</span><br></pre></td></tr></table></div></figure><p>效果如下 : </p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131612651.png" alt="image-20211113161255610"></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl config view</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority: /root/.minikube/ca.crt</span><br><span class="line">    extensions:</span><br><span class="line">    - extension:</span><br><span class="line">        last-update: Sat, 13 Nov 2021 08:02:27 UTC</span><br><span class="line">        provider: minikube.sigs.k8s.io</span><br><span class="line">        version: v1.18.0</span><br><span class="line">      name: cluster_info</span><br><span class="line">    server: https://172.17.0.51:8443</span><br><span class="line">  name: minikube</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: minikube</span><br><span class="line">    extensions:</span><br><span class="line">    - extension:</span><br><span class="line">        last-update: Sat, 13 Nov 2021 08:02:27 UTC</span><br><span class="line">        provider: minikube.sigs.k8s.io</span><br><span class="line">        version: v1.18.0</span><br><span class="line">      name: context_info</span><br><span class="line">    namespace: default</span><br><span class="line">    user: minikube</span><br><span class="line">  name: minikube</span><br><span class="line">current-context: minikube</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: minikube</span><br><span class="line">  user:</span><br><span class="line">    client-certificate: /root/.minikube/profiles/minikube/client.crt</span><br><span class="line">    client-key: /root/.minikube/profiles/minikube/client.key</span><br></pre></td></tr></table></div></figure>        <h3 id="1-3-创建一个-service-服务"   >          <a href="#1-3-创建一个-service-服务" class="heading-link"><i class="fas fa-link"></i></a>1.3 创建一个 service (服务)</h3>              <h4 id="1-3-1-创建一个-service"   >          <a href="#1-3-1-创建一个-service" class="heading-link"><i class="fas fa-link"></i></a>1.3.1 创建一个 service</h4>      <p>service 是 kebernetes 将 pod 向外暴露的方式 , 暴露到公网端口</p><p>pod 在没有使用 service 的时候只能在内部 IP 地址访问</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment hello-node --type=LoadBalancer --port=8080</span><br></pre></td></tr></table></div></figure><p>效果如下 : </p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131646071.png" alt="image-20211113164603039"></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl expose deployment hello-node --<span class="built_in">type</span>=LoadBalancer --port=8080</span></span><br><span class="line">service/hello-node exposed</span><br></pre></td></tr></table></div></figure><p>这里的 <code>--type=LoadBalancer</code> 参数表明你希望将你的 Service 暴露到集群外部。</p><p>镜像 <code>k8s.gcr.io/echoserver</code> 中的应用程序代码仅监听 TCP 8080 端口。 如果你用 <code>kubectl expose</code> 暴露了其它的端口，客户端将不能访问其它端口。</p>        <h4 id="1-3-2-查看-service-的情况"   >          <a href="#1-3-2-查看-service-的情况" class="heading-link"><i class="fas fa-link"></i></a>1.3.2 查看 service 的情况</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get services</span><br></pre></td></tr></table></div></figure><p>效果如下 :</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131702403.png" alt="image-20211113170223367"></p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get services</span></span><br><span class="line">kubectl get services</span><br><span class="line"></span><br><span class="line">NAME         TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">hello-node   LoadBalancer   10.99.215.211   &lt;pending&gt;     8080:32102/TCP   8m40s</span><br><span class="line">kubernetes   ClusterIP      10.96.0.1       &lt;none&gt;        443/TCP          52m</span><br></pre></td></tr></table></div></figure><p>现在尝试从浏览器中访问 service</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131704119.png" alt="image-20211113170431083"></p><p>然后可以进入这个页面</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111131705372.png" alt="image-20211113170530319"></p><p>然后我们可以尝试访问这个 service</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube service hello-node</span><br></pre></td></tr></table></div></figure><p>效果如下</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> minikube service hello-node</span></span><br><span class="line">|-----------|------------|-------------|--------------------------|</span><br><span class="line">| NAMESPACE |    NAME    | TARGET PORT |           URL            |</span><br><span class="line">|-----------|------------|-------------|--------------------------|</span><br><span class="line">| default   | hello-node |        8080 | http://172.17.0.51:32102 |</span><br><span class="line">|-----------|------------|-------------|--------------------------|</span><br><span class="line">* Opening service default/hello-node in default browser...</span><br><span class="line">Minikube Dashboard is not supported via the interactive terminal experience.</span><br><span class="line"></span><br><span class="line">Please click the &#x27;Preview Port 30000&#x27; link above to access the dashboard.</span><br><span class="line">This will now exit. Please continue with the rest of the tutorial.</span><br><span class="line"></span><br><span class="line">X Exiting due to HOST_BROWSER: exit status 1</span><br><span class="line">* </span><br><span class="line">* If the above advice does not help, please let us know: </span><br><span class="line">  - https://github.com/kubernetes/minikube/issues/new/choose</span><br></pre></td></tr></table></div></figure><p>这个表格中后两项表示 , 对 运行 kubernetes 的服务器 的 8080 端口 的访问将会被转发到 kubernetes 网络的这个地址 <span class="exturl"><a class="exturl__link"   href="http://172.17.0.51:32102" >http://172.17.0.51:32102</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> , 然后我们就可以在刚才的页面输入这个端口号就可以访问页面了。</p>        <h3 id="1-4-添加-addons-插件"   >          <a href="#1-4-添加-addons-插件" class="heading-link"><i class="fas fa-link"></i></a>1.4 添加 addons (插件)</h3>      <p>这些插件有什么内容呢 ? 有 服务发现, 服务可视化 等等方面. </p>        <h4 id="1-4-1-查看-插件列表"   >          <a href="#1-4-1-查看-插件列表" class="heading-link"><i class="fas fa-link"></i></a>1.4.1 查看 插件列表</h4>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube addons list</span><br></pre></td></tr></table></div></figure><p>输出结果类似于这样：</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> minikube addons list</span></span><br><span class="line">|-----------------------------|----------|--------------|</span><br><span class="line">|         ADDON NAME          | PROFILE  |    STATUS    |</span><br><span class="line">|-----------------------------|----------|--------------|</span><br><span class="line">| ambassador                  | minikube | disabled     |</span><br><span class="line">| auto-pause                  | minikube | disabled     |</span><br><span class="line">| csi-hostpath-driver         | minikube | disabled     |</span><br><span class="line">| dashboard                   | minikube | enabled ✅   |</span><br><span class="line">| default-storageclass        | minikube | enabled ✅   |</span><br><span class="line">| efk                         | minikube | disabled     |</span><br><span class="line">| freshpod                    | minikube | disabled     |</span><br><span class="line">| gcp-auth                    | minikube | disabled     |</span><br><span class="line">| gvisor                      | minikube | disabled     |</span><br><span class="line">| helm-tiller                 | minikube | disabled     |</span><br><span class="line">| ingress                     | minikube | disabled     |</span><br><span class="line">| ingress-dns                 | minikube | disabled     |</span><br><span class="line">| istio                       | minikube | disabled     |</span><br><span class="line">| istio-provisioner           | minikube | disabled     |</span><br><span class="line">| kubevirt                    | minikube | disabled     |</span><br><span class="line">| logviewer                   | minikube | disabled     |</span><br><span class="line">| metallb                     | minikube | disabled     |</span><br><span class="line">| metrics-server              | minikube | enabled ✅   |</span><br><span class="line">| nvidia-driver-installer     | minikube | disabled     |</span><br><span class="line">| nvidia-gpu-device-plugin    | minikube | disabled     |</span><br><span class="line">| olm                         | minikube | disabled     |</span><br><span class="line">| pod-security-policy         | minikube | disabled     |</span><br><span class="line">| registry                    | minikube | disabled     |</span><br><span class="line">| registry-aliases            | minikube | disabled     |</span><br><span class="line">| registry-creds              | minikube | disabled     |</span><br><span class="line">| storage-provisioner         | minikube | enabled ✅   |</span><br><span class="line">| storage-provisioner-gluster | minikube | disabled     |</span><br><span class="line">| volumesnapshots             | minikube | disabled     |</span><br><span class="line">|-----------------------------|----------|--------------|</span><br></pre></td></tr></table></div></figure>        <h4 id="1-4-2-添加插件"   >          <a href="#1-4-2-添加插件" class="heading-link"><i class="fas fa-link"></i></a>1.4.2 添加插件</h4>      <p>添加 <code>metrics-server</code> 插件</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube addons enable metrics-server</span><br></pre></td></tr></table></div></figure><p>输出结果如下</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> minikube addons <span class="built_in">enable</span> metrics-server</span></span><br><span class="line">  - Using image k8s.gcr.io/metrics-server-amd64:v0.2.1</span><br><span class="line">* The &#x27;metrics-server&#x27; addon is enabled</span><br></pre></td></tr></table></div></figure><p>查看 这个插件的效果 </p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod,svc -n kube-system</span><br></pre></td></tr></table></div></figure><p>输出结果类似这样, 可以看到 多出了类似 <code>service/metrics-server</code> 相关的内容</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get pod,svc -n kube-system</span></span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/coredns-74ff55c5b-4r6b2            1/1     Running   0          27m</span><br><span class="line">pod/etcd-minikube                      1/1     Running   0          27m</span><br><span class="line">pod/kube-apiserver-minikube            1/1     Running   0          27m</span><br><span class="line">pod/kube-controller-manager-minikube   1/1     Running   0          27m</span><br><span class="line">pod/kube-proxy-m95zs                   1/1     Running   0          27m</span><br><span class="line">pod/kube-scheduler-minikube            1/1     Running   0          27m</span><br><span class="line">pod/metrics-server-56c4f8c9d6-l28f7    1/1     Running   0          27m</span><br><span class="line">pod/storage-provisioner                1/1     Running   0          27m</span><br><span class="line"></span><br><span class="line">NAME                     TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">service/kube-dns         ClusterIP   10.96.0.10       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   27m</span><br><span class="line">service/metrics-server   ClusterIP   10.103.144.127   &lt;none&gt;        443/TCP                  27m</span><br></pre></td></tr></table></div></figure>        <h4 id="1-4-3-禁用插件"   >          <a href="#1-4-3-禁用插件" class="heading-link"><i class="fas fa-link"></i></a>1.4.3 禁用插件</h4>      <figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube addons disable metrics-server</span><br></pre></td></tr></table></div></figure><p>结果如下：</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> minikube addons <span class="built_in">disable</span> metrics-server</span></span><br><span class="line">  - Using image k8s.gcr.io/metrics-server-amd64:v0.2.1</span><br><span class="line">* &quot;The &#x27;metrics-server&#x27; addon is disabled</span><br></pre></td></tr></table></div></figure>        <h3 id="1-5-清除资源-Deployment-service-VM"   >          <a href="#1-5-清除资源-Deployment-service-VM" class="heading-link"><i class="fas fa-link"></i></a>1.5 清除资源 (Deployment/service/VM)</h3>              <h4 id="1-5-1-清除-Deployment-service"   >          <a href="#1-5-1-清除-Deployment-service" class="heading-link"><i class="fas fa-link"></i></a>1.5.1 清除 Deployment/service</h4>      <p>使用 <code>kubectl delete</code> 清除资源</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete service hello-node</span><br><span class="line">kubectl delete deployment hello-node</span><br></pre></td></tr></table></div></figure><p>结果如下</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl delete service   hello-node</span></span><br><span class="line">service &quot;hello-node&quot; deleted</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl delete deployment hello-node</span></span><br><span class="line">deployment.apps &quot;hello-node&quot; deleted</span><br></pre></td></tr></table></div></figure>        <h4 id="1-5-2-清除-VM"   >          <a href="#1-5-2-清除-VM" class="heading-link"><i class="fas fa-link"></i></a>1.5.2 清除 VM</h4>      <p>停止 VM</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube stop</span><br></pre></td></tr></table></div></figure><p>删除 VM</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube delete</span><br></pre></td></tr></table></div></figure><p>结果如下</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> minikube stop</span></span><br><span class="line">* Stopping node &quot;minikube&quot;  ...</span><br><span class="line">* 1 nodes stopped.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> minikube delete</span></span><br><span class="line">* Uninstalling Kubernetes v1.20.2 using kubeadm ...</span><br><span class="line">* Deleting &quot;minikube&quot; in none ...</span><br><span class="line">* Removed all traces of the &quot;minikube&quot; cluster.</span><br></pre></td></tr></table></div></figure>        <h2 id="2-使用-Minikube-创建集群"   >          <a href="#2-使用-Minikube-创建集群" class="heading-link"><i class="fas fa-link"></i></a>2 使用 Minikube 创建集群</h2>              <h3 id="2-1-Kubernetes-集群"   >          <a href="#2-1-Kubernetes-集群" class="heading-link"><i class="fas fa-link"></i></a>2.1 Kubernetes 集群</h3>      <p>Kubernetes 主要功能是 自动管理和调动容器</p><p>一个 Kubernetes 集群包含两种类型的资源:</p><ul><li><strong>Master（主调度节点）</strong> 调度整个集群</li><li><strong>Nodes（运行节点）</strong> 负责运行应用</li></ul><p><strong>Master 负责管理整个集群。</strong> Master 协调集群中的所有活动，例如调度应用、维护应用的所需状态、应用扩容以及推出新的更新。</p><p><strong>Node 是一个虚拟机或者物理机，它在 Kubernetes 集群中充当工作机器的角色</strong> 每个Node都有 Kubelet , 它管理 Node 而且是 Node 与 Master 通信的代理。 Node 还应该具有用于处理容器操作的工具，例如 Docker 或 rkt 。处理生产级流量的 Kubernetes 集群至少应具有三个 Node 。</p><p><strong>Keep Curious! Keep Learning! </strong></p>]]></content>
    
    
    <summary type="html">kubernetes</summary>
    
    
    
    <category term="kubernetes" scheme="http://zjeff-953.gitee.io/zjeff/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="http://zjeff-953.gitee.io/zjeff/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>生活随笔 - 09 自爱与自救</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/11/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2009%20%E8%87%AA%E7%88%B1%E5%92%8C%E8%87%AA%E6%95%91/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/11/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2009%20%E8%87%AA%E7%88%B1%E5%92%8C%E8%87%AA%E6%95%91/</id>
    <published>2021-11-11T08:16:37.989Z</published>
    <updated>2021-11-14T07:07:44.248Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="生活随笔-09-自爱与自救"   >          <a href="#生活随笔-09-自爱与自救" class="heading-link"><i class="fas fa-link"></i></a>生活随笔 - 09 自爱与自救</h1>      <p>这是一场在颓废和不知目标的时候发生的自我谈话。</p><p>内容关于自爱与自救。</p><p>当然，这段时间也不是完全没有意义，重启 🧠 ，思考</p><span id="more"></span>        <h2 id="世界观"   >          <a href="#世界观" class="heading-link"><i class="fas fa-link"></i></a>世界观</h2>      <p>过去我做事的动力是什么？</p><ol><li>厌恶，厌恶糟糕的父母，渴望独立的照顾和养活自己。</li><li>恐惧，恐惧生存，渴望基本生产资料，渴望在这个社会立足。</li><li>期待赞许，期待别人的正反馈，期待别人的认同和认可。</li></ol><p>但是，现在都要失效了，看到了工作其实很容易达成，想要在一个位置上作威作福混吃等死异常的容易，什么🐂🐎都可以；看到了在社会上🐂🐎太多，自己的心理 issue 都难以解决，还有内耗的思维方式（就是“我很烂，但是我要让你更烂”），更不用说相互给予认可和认同了。</p><p>工作场景通过日报周会进行外部力量的反馈和监督，但是这些东西都是人容易失去的，当失去自驱和外力之后，我变成了摆烂人，享乐嬉戏，不思进取，美其名曰：“享受生活”。</p><p>摆烂 ——&gt; 自我怀疑 ——&gt; 自我贬低 ——&gt; 摆烂， 无限循环。</p><blockquote><p>尤其是现在，有种“满足别人想让你烂的欲望以此获取别人的认可和满意”的恶心想法。</p></blockquote><p>想要达成一些事情，却没有行动，甚至丢掉了之前的好习惯。</p><p>浮士德博士只告诉我“要前进”，没有告诉我“如何前进”。</p><p><strong>现在我需要一个更长久，更有力的自驱力，驱动我的前进。</strong></p><p><strong>自爱，我所需要的。</strong></p><p>恐惧会被终结，自我批评可能导致摆烂，他人赞许，他们可靠不住，唯有自爱，温润如玉，滋养心田。</p>        <h2 id="方法论"   >          <a href="#方法论" class="heading-link"><i class="fas fa-link"></i></a>方法论</h2>      <p>像慈爱又智慧的父母对待自己的孩子一样。</p><blockquote><p>糟糕的父母则相反，如果孩子做的太好会显得他们的人生的颓唐和废物是自己一手造成的，而不是天灾和人祸。</p></blockquote><p>一个句子 ： I love you too much to __________________。</p><p>我太爱你了以至于不能</p><ol><li>放任你自我堕落</li><li>看着你虚度年华</li></ol><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/202111111743491.png" alt="image-20211111174358201"></p>]]></content>
    
    
    <summary type="html">生活随笔 - 09 自爱与自救</summary>
    
    
    
    <category term="生活随笔" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="生活随笔" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/11/%E9%9D%A2%E8%AF%95/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%88%B7%E9%9D%A2%E7%BB%8F%20-%2001/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/11/%E9%9D%A2%E8%AF%95/%E5%90%8E%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%88%B7%E9%9D%A2%E7%BB%8F%20-%2001/</id>
    <published>2021-11-11T00:50:40.110Z</published>
    <updated>2021-11-11T00:50:40.110Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>serverless - 尝试自建 serverless 基座</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/11/%E4%BA%91%E5%8E%9F%E7%94%9F/serverless%20-%20%E5%B0%9D%E8%AF%95%E8%87%AA%E5%BB%BA%20serverless%20%E5%9F%BA%E5%BA%A7/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/11/%E4%BA%91%E5%8E%9F%E7%94%9F/serverless%20-%20%E5%B0%9D%E8%AF%95%E8%87%AA%E5%BB%BA%20serverless%20%E5%9F%BA%E5%BA%A7/</id>
    <published>2021-11-11T00:15:32.035Z</published>
    <updated>2021-11-13T02:11:18.035Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="serverless-尝试自建-serverless-基座"   >          <a href="#serverless-尝试自建-serverless-基座" class="heading-link"><i class="fas fa-link"></i></a>serverless - 尝试自建 serverless 基座</h1>      <p>serverless 一般不开源，人人自己做，尝试自建理解原理。</p><span id="more"></span><p><span class="exturl"><a class="exturl__link"   href="https://cloud.tencent.com/developer/article/1748038" >深入serverless原理（1）自建serverless平台，搭建源码调试环境</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">serverless - 尝试自建 serverless 基座</summary>
    
    
    
    <category term="serverless" scheme="http://zjeff-953.gitee.io/zjeff/categories/serverless/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>标题</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/09/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2011%20%E6%88%91%E4%B8%8E%E6%B5%AE%E5%A3%AB%E5%BE%B7/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/09/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2011%20%E6%88%91%E4%B8%8E%E6%B5%AE%E5%A3%AB%E5%BE%B7/</id>
    <published>2021-11-09T05:38:57.616Z</published>
    <updated>2021-11-14T06:54:54.920Z</updated>
    
    <content type="html"><![CDATA[<p>#</p><span id="more"></span>]]></content>
    
    
    <summary type="html">描述</summary>
    
    
    
    <category term="分类" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>生活随笔 - 11 我犯过的职场错误</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/11/09/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2010%20%E6%88%91%E7%8A%AF%E8%BF%87%E7%9A%84%E8%81%8C%E5%9C%BA%E9%94%99%E8%AF%AF/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/11/09/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94%20-%2010%20%E6%88%91%E7%8A%AF%E8%BF%87%E7%9A%84%E8%81%8C%E5%9C%BA%E9%94%99%E8%AF%AF/</id>
    <published>2021-11-09T05:38:16.198Z</published>
    <updated>2021-11-15T03:30:26.128Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="生活随笔-11-我犯过的职场错误"   >          <a href="#生活随笔-11-我犯过的职场错误" class="heading-link"><i class="fas fa-link"></i></a>生活随笔 - 11 我犯过的职场错误</h1>      <p>我是过的太舒坦了吧，这两年，都没遇到什么牛马。现在要和新的人打交道了，想起来这些牛马的嘴脸了。</p><span id="more"></span><p>[TOC]</p>        <h2 id="1-不挑活儿"   >          <a href="#1-不挑活儿" class="heading-link"><i class="fas fa-link"></i></a>1.不挑活儿</h2>      <p>有的活很显然 TMD 就是臭鱼烂虾干的，把那些活儿留给臭鱼烂虾就好了，不要接下来，不是功劳的问题。</p><p>主要是做臭鱼烂虾的活没有成就感，太烦了，自己都会很憋屈。</p><p>看到好活儿主动请缨，但是不要超过自己的掌控范围（也就是自己在某些方面是臭鱼烂虾的时候）。</p>        <h2 id="2-写小作文"   >          <a href="#2-写小作文" class="heading-link"><i class="fas fa-link"></i></a>2.写小作文</h2>      <p>别人凭什么花时间看你的小作文，你 TMD 是带文豪还是什么牛马，自己心理清楚，人家凭什么百忙之中看你的小作文。</p><p>你 TM 能不能在有限的字数内把问题说清楚。</p>        <h2 id="3-不够直率-拐弯抹角"   >          <a href="#3-不够直率-拐弯抹角" class="heading-link"><i class="fas fa-link"></i></a>3.不够直率 拐弯抹角</h2>      <p>这不是传统行业，你不是客服（暂时），你对于同事你们基本是利益共同体（除了某些煞笔用局部竞争的思维处事）。</p><p>不用拘谨，有事说就行了。</p><p>尤其对领导和其他职位的人比如产品和项目经理，你们更是一条线上的，同事可能怕争⭐，领导可不怕，只要不骂人就行。</p><p>碰到傻逼就以直报怨，不管他，做自己的，讲逻辑。</p>        <h2 id="4-把同事当朋友"   >          <a href="#4-把同事当朋友" class="heading-link"><i class="fas fa-link"></i></a>4.把同事当朋友</h2>      <p>我认为世界之大，天生我才必有用，这里不行走就行了。</p><p>但是有的人是属实的傻逼，走不动，毕业了就没想过成长，没有职业规划，纯粹混吃等死，他们就是内耗竞争思维，我可以不成长，你也不许成长。</p><p>这种臭鱼烂虾和 小学的 耿某某，史某某，李某某，常某某，高中的那个杜某某，那个史某某，还有那个我不记得名字的那个，学长黄，学姐李，还有 你妈 ，都如出一辙，纯纯的祸害，不必理会。</p><p>著名哲学家派大星曾经说过：</p><blockquote><p>提到钱，任何人都没有是非对错，但重点是有没有情义道德。</p></blockquote><p>对，他们很傻逼</p><p>但是，</p><p>从领导的角度考虑，懒得招人，</p><p>从他们的角度考虑，算了还是不要从傻逼的角度考虑了，</p><p>从自己的角度考虑，他们傻才显得你理性和明智，不理就行了（不想着改变别人是明智的），</p><p>积累自己的核心竞争力，不为这些东西所动，多和产品，同学，朋友，网友，外包(因为你们没有竞争关系)沟通，少理这种人。</p><p>（ r 和 w 都是这样，而且两个人的关系很不健康，是 w 打压 r ， r 不敢反抗，因为 ta 确实需要仰仗 w ，不够 qualify ，然后去加害别人， 比如外包的，打杂的，实习的，真 nm 恶心到我了）</p>]]></content>
    
    
    <summary type="html">我是过的太舒坦了吧，这两年，都没遇到什么牛马。</summary>
    
    
    
    <category term="生活随笔" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="生活随笔" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>软件测试 - 04 - 使用postman和jmeter</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/10/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%20-%2004%20-%20%E4%BD%BF%E7%94%A8postman%E5%92%8Cjmeter/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/10/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%20-%2004%20-%20%E4%BD%BF%E7%94%A8postman%E5%92%8Cjmeter/</id>
    <published>2021-10-12T06:34:26.444Z</published>
    <updated>2021-10-12T10:26:34.208Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="软件测试-04-使用postman和jmeter"   >          <a href="#软件测试-04-使用postman和jmeter" class="heading-link"><i class="fas fa-link"></i></a>软件测试 - 04 - 使用postman和jmeter</h1>      <p>[TOC]</p><span id="more"></span>        <h2 id="1-Postman"   >          <a href="#1-Postman" class="heading-link"><i class="fas fa-link"></i></a>1. Postman</h2>      <p>采用Postman接口测试软件对百度百科（<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/）搜索引擎进行接口测试。如对词条“软件工程”返回页面内容进行测试验证，给出请求参数设置、Tests脚本、Body响应结果、Test" >https://baike.baidu.com/）搜索引擎进行接口测试。如对词条“软件工程”返回页面内容进行测试验证，给出请求参数设置、Tests脚本、Body响应结果、Test</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>Results结果说明及运行界面。</p>        <h3 id="参数设置："   >          <a href="#参数设置：" class="heading-link"><i class="fas fa-link"></i></a>参数设置：</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173312.png" alt="">首先观察百度百科搜索界面的Url,<br>我们可以发现</p><p>百度百科搜索结果采用的是地址定位模式, 查询词条XXX的时候将会定向到路由:<br><span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/XXX" >https://baike.baidu.com/item/XXX</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> , 然后就会加上对应的词条id,<br>而且采用的隐式参数模式我们并不能简单的看到params是什么,<br>所以直接输入这个url发送get请求就可以获取对应的返回体, 返回体应该是一个html页面,<br>所以只需要设置简单的url和选择get方法就可以了。</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173321.png" alt=""></p><p>经过测试发现地址最后的标识id可以不写也能获取到正确的页面内容，所以我们可以这样进行接口测试</p>        <h3 id="Tests脚本B："   >          <a href="#Tests脚本B：" class="heading-link"><i class="fas fa-link"></i></a>Tests脚本B：</h3>      <p>这是postman中的test脚本的生命期，我们可以对于response进行javascript的<img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173323.png" alt=""></p><p>脚本处理，我想要验证接口是否能正常调用，返回的内容是不是我们期望的，所以我们要验证他的statuscode是不是200，html内容有没有包含“软件工程”，接口的返回时间是不是小于200ms三件事，所以我们需要编写三段脚本：</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试接口是否可以访问  </span></span><br><span class="line">pm.test(<span class="string">&quot;Status code is 200&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">pm.response.to.have.status(<span class="number">200</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试接口返回时间  </span></span><br><span class="line">pm.test(<span class="string">&quot;Response time is less than 200ms&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">pm.expect(pm.response.responseTime).to.be.below(<span class="number">200</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试内容是否正确  </span></span><br><span class="line">pm.test(<span class="string">&quot;Body contains 软件工程&quot;</span>,() =\&gt; &#123;  </span><br><span class="line">pm.expect(pm.response.text()).to.include(<span class="string">&quot;软件工程&quot;</span>);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure>        <h3 id="Test-Results结果说明："   >          <a href="#Test-Results结果说明：" class="heading-link"><i class="fas fa-link"></i></a>Test Results结果说明：</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173327.png" alt="">运行结果如下：</p><p>这样我们可以看到这个接口能够成功的接受请求发送响应并返回正确的结果<br>，但是响应速度不是很快，不过一次测试可信度不是很高，所以我们可以试验多次查看一下效果：</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173704.png" alt=""><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173602.png" alt=""><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173600.png" alt=""><img src="media/8c9c301424f3388e259703ae09ada77e.png" alt=""></p><p>可以看到经过五次的测试，我们可以看到有两次能够满足200ms内完成响应，还有较大提升空间</p>        <h3 id="Body结果说明："   >          <a href="#Body结果说明：" class="heading-link"><i class="fas fa-link"></i></a>Body结果说明：</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173559.png" alt=""></p><p>可以看到能够正常返回html页面，结果也正确。（还有部分搜索引擎优化）</p><p>点击preview，也可以观察页面能够成功渲染</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173557.png" alt=""></p>        <h3 id="运行界面："   >          <a href="#运行界面：" class="heading-link"><i class="fas fa-link"></i></a>运行界面：</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173555.png" alt=""></p>        <h2 id="2-JMeter"   >          <a href="#2-JMeter" class="heading-link"><i class="fas fa-link"></i></a>2. JMeter</h2>      <p>采用JMeter性能测试软件对百度搜索引擎查询“软件测试”页面内容进行性能测试，给出50、100并发用户的测试过程说明及性能测试运行结果界面。</p>        <h3 id="分析搜索的url"   >          <a href="#分析搜索的url" class="heading-link"><i class="fas fa-link"></i></a>分析搜索的url</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173552.png" alt=""></p><p>首先对百度搜索结果的的url进行分析，百度采用的是https协议, 除了百度的域名，有s路由标识所搜结果，wd和ie两个params分别标识查询参数和编码类型，然后我们就可以对他进行性能测试。</p>        <h3 id="下载和安装JMeter"   >          <a href="#下载和安装JMeter" class="heading-link"><i class="fas fa-link"></i></a>下载和安装JMeter</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173718.png" alt="">进入JMeter官网，点击Download下载</p><p>点击下载编译后的版本</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173721.png" alt=""></p>        <h3 id="运行Jmeter"   >          <a href="#运行Jmeter" class="heading-link"><i class="fas fa-link"></i></a>运行Jmeter</h3>      <p>将文件解压后进入解压后的文件夹目录</p><p>运行 解压目录\apache-jmeter-5.4.1\bin\jmeter.sh</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173724.png" alt="">之后会运行这个shell脚本,这个shell脚本不能关闭</p><p>然后就会打开JMeter的页面</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173744.png" alt=""></p><p>这样就安装成功并进入JMeter了</p>        <h3 id="创建测试计划并添加线程组"   >          <a href="#创建测试计划并添加线程组" class="heading-link"><i class="fas fa-link"></i></a>创建测试计划并添加线程组</h3>      <p>首先给测试计划改个名字</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173749.png" alt=""></p><p>右键测试计划, 添加线程组</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173804.png" alt=""></p><p>按照前面的分析,填写对应的参数,<br>请求类型, url ,参数, 输入中文的时候要勾选编码项</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173824.png" alt="">然后设置对应的线程数和循环次数<br>Rame-Up时间表示在多少秒内启动对应线程数的线程,先设置成1试一下能不能成功进行访问</p>        <h3 id="添加http请求"   >          <a href="#添加http请求" class="heading-link"><i class="fas fa-link"></i></a>添加http请求</h3>      <p>然后为线程组添加http请求取样器</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173820.png" alt=""></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173926.png" alt=""></p>        <h3 id="添加请求头管理器"   >          <a href="#添加请求头管理器" class="heading-link"><i class="fas fa-link"></i></a>添加请求头管理器</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173924.png" alt=""></p>        <h3 id="添加查看结果树"   >          <a href="#添加查看结果树" class="heading-link"><i class="fas fa-link"></i></a>添加查看结果树</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173932.png" alt=""></p>        <h3 id="启动线程组"   >          <a href="#启动线程组" class="heading-link"><i class="fas fa-link"></i></a>启动线程组</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173934.png" alt=""></p>        <h3 id="验证结果并解决百度反爬"   >          <a href="#验证结果并解决百度反爬" class="heading-link"><i class="fas fa-link"></i></a>验证结果并解决百度反爬</h3>      <p>可以看到触发了百度的反爬机制,不能测试到正确的页面</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501173937.png" alt=""></p><p>参考文章:</p><p><span class="exturl"><a class="exturl__link"   href="https://jingyan.baidu.com/article/e4d08ffdc1225b4ed3f60d3c.html" >https://jingyan.baidu.com/article/e4d08ffdc1225b4ed3f60d3c.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>我们应该设置请求头</p><p>首先打开网页并打开控制台查看需要哪些请求头, 然后将他们全部复制,</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174000.png" alt=""></p><p>点击请求头管理器,<br>然后从剪贴板添加<img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174003.png" alt=""></p><p>然后我们就可以获取到所有需要的头了</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174006.png" alt=""></p><p>运行后查看响应结果</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174008.png" alt=""></p><p>需要向下滚动查看更多</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174010.png" alt="">也可搜索查看是否得到正确结果</p>        <h3 id="测试50个线程的结果"   >          <a href="#测试50个线程的结果" class="heading-link"><i class="fas fa-link"></i></a>测试50个线程的结果</h3>      <p>清除一下结果</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174012.png" alt=""></p><p>然后我们就可以添加一些其他的检测器, 开始性能测试</p><p>修改线程数为50, 点击运行</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174031.png" alt=""></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174033.png" alt="">查看结果树</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174036.png" alt="">查看聚合报告</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174038.png" alt="">查看汇总报告</p>        <h4 id="聚合报告属性含义"   >          <a href="#聚合报告属性含义" class="heading-link"><i class="fas fa-link"></i></a>聚合报告属性含义</h4>      <p>属性描述</p><p>名称 ：显示的此取样器的描述性名称，可自定义</p><p>文件名：要保存或/读取的测试结果文件名，包含路径</p><p>Label ：执行样品的标签，如HTTP请求的名称，事务控制器名称</p><p>样本<br>：执行的，具有相同标签的样本数量。需要注意，多个样本同名的将被统计在一起，所以在编写脚本时样品命名应该唯一，除非你希望这么做。</p><p>平均值： 一组样本的平均响应时间</p><p>中位数： 一组样本中间的响应时间，50%大于此值，50%小于此值</p><p>90%百分位 ：90％的样品响应时间不超过此时间，剩下的至少需要这么长</p><p>95%百分位 ：95％的样品响应时间不超过此时间，剩下的至少需要这么长</p><p>99%百分位 ：99％的样品响应时间不超过此时间，剩下的至少需要这么长</p><p>最小值 ：一组样本中最短的响应时间</p><p>最大值 ：一组样本中最长的响应时间</p><p>异常% ：执行失败的请求占一组样本的百分比</p><p>吞吐量<br>：以每秒/分钟/小时的请求数衡量。以使显示的速率至少为1.0。代表完成的请求数/秒/分钟/小时，通常可以反应服务器的事务处理能力</p><p>接收/sec： 数据接收速率，反应获取数据的网络使用情况</p><p>发送/sec： 数据发送速率，反应发送数据的网络使用情况</p>        <h4 id="汇总报告属性描述"   >          <a href="#汇总报告属性描述" class="heading-link"><i class="fas fa-link"></i></a>汇总报告属性描述</h4>      <p>名称 ：显示的此取样器的描述性名称，可自定义</p><p>文件名 ：要保存或/读取的测试结果文件名，包含路径</p><p>Label ：执行样品的标签，如HTTP请求的名称，事务控制器名称</p><p>样本：<br>执行的，具有相同标签的样本数量。需要注意，多个样本同名的将被统计在一起，所以在编写脚本时样品命名应该唯一，除非你希望这么做。</p><p>平均值：一组样本的平均响应时间</p><p>最小值： 一组样本中最短的响应时间</p><p>最大值：一组样本中最长的响应时间</p><p>异常%： 执行失败的请求占一组样本的百分比</p><p>吞吐量：<br>以每秒/分钟/小时的请求数衡量。以使显示的速率至少为1.0。代表完成的请求数/秒/分钟/小时，通常可以反应服务器的事务处理能力</p><p>接收/sec： 数据接收速率，反应获取数据的网络使用情况</p><p>发送/sec： 数据发送速率，反应发送数据的网络使用情况</p><p>平均字节数： 样本响应数据的平均大小，以字节为单位</p><p>可以看到百度的搜索性能还是较好的</p>        <h3 id="模拟100个用户并发"   >          <a href="#模拟100个用户并发" class="heading-link"><i class="fas fa-link"></i></a>模拟100个用户并发</h3>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174051.png" alt="">然后修改线程数为100, 模拟100个用户并发</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174114.png" alt=""></p><p><img src="media/f289cedb42a8cc3946dbdfb57148bea8.png" alt=""></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210501174134.png" alt=""></p>]]></content>
    
    
    <summary type="html">软件测试 - 04 - 使用postman和jmeter</summary>
    
    
    
    <category term="基础知识" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>软件测试 - 01 软件测试理论</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/10/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%20-%2001%20%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/10/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%20-%2001%20%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/</id>
    <published>2021-10-12T06:34:26.434Z</published>
    <updated>2021-06-28T00:20:02.000Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="软件测试-01-软件测试理论"   >          <a href="#软件测试-01-软件测试理论" class="heading-link"><i class="fas fa-link"></i></a>软件测试 - 01 软件测试理论</h1>      <span id="more"></span>        <h2 id="软件质量属性"   >          <a href="#软件质量属性" class="heading-link"><i class="fas fa-link"></i></a>软件质量属性</h2>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210627230042.png" alt=""></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210627230047.png" alt="image-20210627230047099"></p>        <h2 id="软件质量标准"   >          <a href="#软件质量标准" class="heading-link"><i class="fas fa-link"></i></a>软件质量标准</h2>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210627230122.png" alt="image-20210627230122617"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210627230640.png" alt="image-20210627230640761"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210627230648.png" alt="image-20210627230647890"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210627230659.png" alt="image-20210627230659006"></p>        <h2 id="软件缺陷"   >          <a href="#软件缺陷" class="heading-link"><i class="fas fa-link"></i></a>软件缺陷</h2>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210627230726.png" alt="image-20210627230726532"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210627230736.png" alt="image-20210627230735744"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210627230800.png" alt="image-20210627230800139"></p>        <h2 id="软件测试"   >          <a href="#软件测试" class="heading-link"><i class="fas fa-link"></i></a>软件测试</h2>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210627230909.png" alt="image-20210627230908790"></p>        <h2 id="测试方法"   >          <a href="#测试方法" class="heading-link"><i class="fas fa-link"></i></a>测试方法</h2>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210627231657.png" alt="image-20210627231656777"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210627234550.png" alt="image-20210627234550713"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210627234646.png" alt="image-20210627234646310"></p><p>白盒测试辨析</p><p><img src="C:\Users\15727\AppData\Roaming\Typora\typora-user-images\image-20210628072427227.png" alt="image-20210628072427227"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628072436.png" alt=""></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628072452.png" alt="image-20210628072452435"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628072501.png" alt="image-20210628072501100"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628072509.png" alt="image-20210628072509770"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628072516.png" alt="image-20210628072516300"></p>        <h2 id="软件测试过程"   >          <a href="#软件测试过程" class="heading-link"><i class="fas fa-link"></i></a>软件测试过程</h2>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628002153.png" alt="image-20210628002152912"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628001920.png" alt="image-20210628001920296"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628001926.png" alt="image-20210628001926173"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628001941.png" alt="image-20210628001941394"></p>        <h2 id="质量保证"   >          <a href="#质量保证" class="heading-link"><i class="fas fa-link"></i></a>质量保证</h2>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005515.png" alt="image-20210628005514758"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005522.png" alt="image-20210628005522258"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005530.png" alt="image-20210628005530629"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005546.png" alt="image-20210628005545829"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005556.png" alt="image-20210628005555950"></p>        <h1 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a>总结</h1>      <p>•    软件测试的正向理解<br>o    验证软件的正确性，给用户以信心。<br>•    软件测试的反向理解<br>o    检测程序的错误，发现以前未发现的错误。<br>•    狭义的软件测试<br>o    仅仅指动态测试，运行程序以检测错误，验证软件是否符合用户需求，是否可以正常工作。<br>•    广义的软件测试<br>o    不仅是动态地运行程序，还包括程序代码、设计、文档的审查活动，是静态测试+动态测试。<br>•    测试=V&amp;V<br>o    verification验证：验证程序是否满足文档中说明的需求。<br>o    validation有效性确认：确认软件满足用户的真正需求。<br>•    TestOracle的来源，如何确定预期测试结果<br>o    软件测试结果的正确性，有时不易判断。testoracle的来源主要有用户期望、产品愿景、竞品、常识、数据统计等。当给定一个测试用例的输入时，要把经过该系统的实际输出与测试预言所期望的输出结果作对比。<br>•    黑盒测试<br>o    把一个软件看做一个黑盒，我们不关心程序内部结构，只关心输入数据和输出数据。<br>•    白盒测试<br>o    把盒子打开，分析程序源代码和结构的测试。<br>•    静态测试<br>o    不实际运行程序，而只是静态地对代码、界面和文档进行审查，发现其中的不合理或者错误。<br>•    动态测试<br>o    实际运行程序，给定一个测试用例输入，看程序的输出是否与预期输出相符的测试。<br>•    单元测试<br>o    又称模块测试，针对软件设计中最小的单位——程序模块进行测试，检验其正确性的过程。<br>•    集成测试<br>o    又称组装测试，在单元测试的基础上，将所有的程序模块进行有序的、递增的测试。<br>•    系统测试<br>o    将软件系统看做一个整体进行测试，包括对系统的功能测试、性能测试以及运行系统的软硬件环境的测试。<br>•    验收测试<br>o    根据软件说明书或合同，供需双方所依赖的软件说明书进行测试，甲方可以选择接收或者拒收系统。在系统测试的后期，由用户和测试人员（测试质量保证人员）共同完成的测试。<br>o    验收测试：按照项目任务书或合同，供需双方约定的验收依据文档进行的对整个系统的测试与评审，决定是否接收或拒收系统。在系统测试的后期，以用户测试为主或有测试人员等质量保证人员共同参与的测试。<br>o    阿尔法测试：由用户、开发人员、测试人员共同完成的内部测试。<br>o    贝塔测试：完全由最终用户完成的公测。<br>•    功能测试<br>o    是黑盒测试的一方面，包括逻辑功能测试、界面测试、易用性测试、安装测试、兼容性测试。<br>•    性能测试<br>o    利用自动化测试工具模拟程序在正常、峰值、异常负载下的性能测试指标情况，包括时间性能、空间性能、需求性能测试？？、基准测试、负载测试、压力测试等。<br>o    通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。有时间性能、空间性能、一般性能测试、可靠性测试、负载测试、压力测试<br>o    基准测试：为了得到平衡点，找到平衡点，对一类测试对象的某项性能指标进行定量的和可对比的测试<br>o    负载测试：在一个给定的负载压力下，资源不足的情况下，看系统是否能承受住。指数据在超负荷环境中运行，程序是否能够承担<br>o    压力测试：为了得到临界点，不断提高负载，测试系统的临界负载值。找到临界点， 压力测试（又叫强度测试）也是一种性能测试，它在系统资源特别低的情况下软件系统运行情况，目的是找到系统在哪里失效以及如何失效的地方。<br>•    回归测试<br>o    对程序进行修改后重新做的测试，比如使用原来的测试用例，这样做的目的是确保在调试程序时没有引入新的bug。<br>•    冒烟测试<br>o    在对一个系统做大规模的测试之前，先检查它的基本功能完成情况，确认程序的可测试性？？？<br>•    随机测试<br>o    程序中所有的输入都是随机生成的，用来模拟用户的输入情况，来检测程序的边缘性。<br>•    软件缺陷的定义<br>o    软件未达到产品说明书中指明的功能<br>o    软件出现了产品说明书中标明的不会出现的功能<br>o    软件超出了产品说明书中标明的的范围<br>o    软件未达到产品说明书中标明的应达到的目的<br>o    测试人员认为软件难以理解，运行速度慢，或最终用户觉得软件不好<br>o    满足以上任意一种情况，即可认为软件有缺陷<br>•    软件缺陷的属性<br>o    ID<br>o    标题<br>o    测试环境<br>o    严重等级<br>o    优先级<br>o    类别<br>o    状态<br>o    描述信息<br>o    重现步骤<br>o    附件<br>o    测试人员<br>o    处理人员<br>•    软件缺陷的级别<br>o    1严重缺陷 不能执行程序基本功能 无法更改 或者严重危及人身安全<br>o    2较大缺陷 严重影响程序基本功能 可以更改<br>o    3较小缺陷 影响程序<br>o    4轻微缺陷 影响使用人员操作 但不影响基本功能使用<br>o    5其他缺陷 其他<br>•    软件缺陷的生命周期<br>o    提交（打开）缺陷<br>o    指派（转交）缺陷<br>o    推迟处理<br>o    确认缺陷<br>o    处理缺陷<br>o    固定<br>o    回归缺陷<br>o    关闭缺陷<br>o    重新打开<br>•    软件测试的充分性的定义和度量<br>o    用来度量一个给定的软件测试集T是否能验证软件P满足需求R<br>o    度量    测试充分性准则C是他的度量。充分性的测试依赖一个测试机T？？？？<br>o    是相对于具体的测试充分性准则C的。测试集的充分性评估是由一个有限集来度量，根据所依赖的充分性准则，有限集中的元素由软件需求或代码导出。对于每一个测试准则C,我们都可以得到一个有限集，称之为覆盖域Ce. </p><p>•    软件测试终止准则<br>o    基于测试阶段的原则<br>o    根据测试用例的原则<br>o    基于缺陷收敛趋势和缺陷修复率的原则<br>o    根据验收测试的原则<br>o    软件项目暂停或终止，则对应的测试也暂停或终止<br>•    测试用例的作用<br>o    测试用例是测试工作的指导，是软件测试必须遵守的准则，更是软件测试质量稳定的根本保障。<br>•    测试用例的准则<br>o    用户需求<br>•    测试用例的原则<br>o    使用成熟的测试用例设计方法设计测试用例<br>o    测试用例的针对性<br>o    测试用例的代表性<br>o    测试用例的可判断性<br>o    测试用例的可重现性<br>o    足够详细、准确、清晰的步骤<br>o    测试用例必须符合内部的规范和要求<br>•    测试用例的特性<br>o    针对性<br>o    代表性<br>o    可判断性<br>o    可重现性<br>•    测试用例的组成元素<br>测试用例编号<br>测试用例名称<br>测试用例设计者<br>软件版本<br>测试目的<br>参考信息</p><p>o    测试用例编号<br>o    测试用例名称<br>o    测试用例设计者<br>o    软件版本号<br>o    测试目的<br>o    参考信息<br>o    测试条件<br>o    测试环境<br>o    输入数据<br>o    操作步骤<br>o    预期结果</p><p>•    测试用例分类<br>o    接口测试用例、路径测试用例、功能测试用例<br>o    容错能力、性能、界面测试用例<br>o    安全性、压力、可靠性、安装/反安装测试用例<br>•    面向对象覆盖<br>o    上下文覆盖<br>o    ？？？？<br>o    继承上下文覆盖<br>o    基于状态的上下文覆盖<br>•    正交试验设计法<br>o    是一种成对测试交互的系统的统计方法。它提供了一种能对所有变量对的组合进行典型覆盖（均匀分布）的方法。<br>•    软件测试的各个阶段<br>o    明确测试需求和目的<br>o    测试计划<br>o    测试设计<br>o    测试执行<br>o    测试记录和缺陷跟踪<br>o    回归测试<br>o    测试总结和报告<br>o    plan do check action PDCA<br>•    软件测试度量的目的和原则<br>o    为了保证软件质量，提高开发测试效率<br>o    改进软件测试的质量，提高测试效率<br>o    严格遵守软件测试规范要制定明确的度量目标<br>o    测试标准的定义应该具有一致性、客观性<br>o    测试方法应该尽可能简单，可计算<br>o    测试数据的收集应该尽可能自动化<br>•    影响软件产品质量的各个因素<br>o    软件复杂度<br>o    采用的设计架构<br>o    源代码控制<br>o    代码审查<br>o    软件测试<br>o    开发的语言和工具<br>o    外部组建的质量<br>o    需求变更控制<br>o    进度控制<br>o    开发资源的投入<br>•    bug综合评价模型包括哪些因素<br>o    数量 测试过程 定量 质量 测试人员 定性<br>•    第三方测试的概念<br>o    由用户、开发人员以外的第三方进行的软件测试，目的是为了保证测试的客观性<br>•    第三方测试的模式<br>o    以顾客为桥梁<br>o    以开发人员为桥梁<br>•    第三方测试的职责<br>o    验证软件是否符合产品说明书的需求<br>o    检测错误<br>o    对错误进行分类分析，将分析结果反馈给开发人员以促进开发过程管理<br>•    软件能力成熟度模型CMMI概念<br>o    capability maturity model integration<br>o    是一个多学科融合、可扩充的软件产品集合<br>o    用于帮助软件企业管理开发和控制过程，增强开发和控制能力，以在规定时间内，不超过预算的情况下开发出高质量的软件产品。<br>•    四类软件测试<br>o    开发者测试<br>    将Junit包引入被测程序中<br>    生成Junit框架<br>    运行测试代码<br>o    移动测试<br>    appium是一个集成测试框架<br>    uiautomatorviewer是用来查看app控件的<br>o    嵌入式测试<br>    Etest模拟外围环境进行测试<br>o    web测试<br>    selenium 记录<br>o    安全测试<br>    IT软件产品生命周期中 验证软件是否符合安全需求的过程</p>        <h1 id="课堂练习"   >          <a href="#课堂练习" class="heading-link"><i class="fas fa-link"></i></a>课堂练习</h1>      <p>感谢@dwy救命</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628004812.png" alt="image-20210628004812211"></p><p>测试只是质量保证工作中的一个环节。软件测试和软件质量保证是软件质量工程的两个不同层面的工作。<br>质量保证（QA）：质量保证的重要工作通过预防、检查与改进来保证软件质量。所关注的是软件质量的检查与测量。QA的工作是软件生命周期的管理以及验证软件是否满足规定的质量和用户的需求，因此主要着眼于软件开发活动中的过程、步骤和产物，而不是对软件进行剖析找出问题或评估。<br>软件测试：测试关心的不是过程的活动，而是对过程的产物以及开发出的软件进行剖析。测试人员要“执行”软件，对过程中的产物——开发文档和源代码进行走查，运行软件，以找出问题，报告质量。对测试中发现的问题的分析、追踪与回归测试也是软件测试中的重要工作，因此软件测试是保证软件质量的一个重要环节。</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628004940.png" alt="image-20210628004940668"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628004952.png" alt="image-20210628004952506"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005005.png" alt="image-20210628005005507"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005041.png" alt="image-20210628005041520"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005101.png" alt="image-20210628005101282"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005131.png" alt="image-20210628005130937"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005149.png" alt="image-20210628005148802"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005201.png" alt="image-20210628005201118"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005215.png" alt="image-20210628005215637"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005224.png" alt="image-20210628005224657"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005235.png" alt="image-20210628005235063"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005246.png" alt="image-20210628005246316"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005257.png" alt="image-20210628005257056"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005330.png" alt="image-20210628005329923"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005337.png" alt="image-20210628005336860"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005348.png" alt="image-20210628005347812"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005358.png" alt="image-20210628005358360"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005811.png" alt="image-20210628005811625"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628005836.png" alt="image-20210628005836218"></p>        <h1 id="单元测试"   >          <a href="#单元测试" class="heading-link"><i class="fas fa-link"></i></a>单元测试</h1>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628004714.jpg" alt="img"><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628004729.jpg" alt="img"><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628004703.jpg" alt="1"></p>        <h1 id="往届习题"   >          <a href="#往届习题" class="heading-link"><i class="fas fa-link"></i></a>往届习题</h1>      <div class="table-container"><div class="table-container"><table><thead><tr><th>piSeq</th><th>piContent</th><th>optionA</th><th>optionB</th><th>optionC</th><th>optionD</th><th>piAnswer</th></tr></thead><tbody><tr><td></td><td>CM1CM2</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1</td><td>下面哪项活动不在软件测试范围 ？</td><td>A.需求文档评审</td><td>B.设计评审</td><td>C.代码测试</td><td>D.过程评审</td><td>D</td></tr><tr><td>2</td><td>软件测试的对象包括</td><td>A.目标程序和相关文档</td><td>B.源程序、目标程序、数据及相关文档</td><td>C.目标程序、操作系统和平台软件</td><td>D.源程序和目标程序</td><td>B</td></tr><tr><td>3</td><td>在软件开发接近完成时，执行下面哪种测试？</td><td>A.验收测试</td><td>B.α测试</td><td>C.β测试</td><td>D.系统测试</td><td>B</td></tr><tr><td>4</td><td>软件测试类型按开发阶段划分为</td><td>A.需求、单元、集成、验证测试</td><td>B.单元、集成、系统、验收测试</td><td>C.单元、集成、确认、验收测试</td><td>D.调试、单元、集成、用户测试</td><td>B</td></tr><tr><td>5</td><td>在软件质量模型中，可维护性属性不包括下面哪个子特性</td><td>A.适应性</td><td>B.易安装性</td><td>C.兼容性</td><td>D.一致性</td><td>C</td></tr><tr><td>6</td><td>软件质量是指</td><td>A.软件具有功能性 可靠性</td><td>B.最大限度满足用户需求</td><td>C.软件没有错误</td><td>D.软件满足用户需求的能力</td><td>D</td></tr><tr><td></td><td></td><td>可维护性 可移植性</td><td></td><td></td><td>和产品的固有特性</td><td></td></tr><tr><td>7</td><td>在所有软件缺陷中，哪类缺陷比例最高？</td><td>A.程序代码错误</td><td>B.软件设计错误</td><td>C.需求分析错误</td><td>D.其它</td><td>C</td></tr><tr><td>8</td><td>修复哪个阶段的软件缺陷，其成本最低？</td><td>A.需求分析阶段</td><td>B.系统设计阶段</td><td>C.程序编码阶段</td><td>D.软件发布阶段</td><td>A</td></tr><tr><td>9</td><td><strong>最基础的软件测试是什么？</strong></td><td>A.静态测试</td><td>B.动态测试</td><td>C.单元测试</td><td>D.集成测试</td><td>C</td></tr><tr><td>10</td><td>软件测试的主要目的是</td><td></td><td></td><td></td><td></td><td>BC</td></tr><tr><td></td><td>CM3</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1</td><td>下面哪个方法属于白盒测试方法？</td><td>A.路径测试</td><td>B.等价类</td><td>C.因果图</td><td>D.归纳测试</td><td>A</td></tr><tr><td>2</td><td>等价类划分法设计8位宽度数字类型数据作用户登录账号，有多少种测试用例方案？</td><td>A.2</td><td>B.3</td><td>C.4</td><td>D.6</td><td>C</td></tr><tr><td>3</td><td>假定X为整数类型变量，X&gt;=1并且X&lt;=10，采用边界值法进行测试，其方案是</td><td>A.1，10</td><td>B.0，1，10，11</td><td>C.0，1，2，9，10，11</td><td>D.0，11</td><td>C</td></tr><tr><td>4</td><td>根据输出对输入的依赖关系设计测试用例的方法是</td><td>A.路径测试</td><td>B.等价类</td><td>C.因果图</td><td>D.归纳测试</td><td>C</td></tr><tr><td>5</td><td>在黑盒测试中，着重检查输入条件组合的方法是</td><td>A.等价类划分法</td><td>B.边界值分析法</td><td>C.错误推测法</td><td>D.判定表法</td><td>D</td></tr><tr><td>6</td><td>不属于白盒测试的技术是</td><td>A.判定表法</td><td>B.判定覆盖</td><td>C.条件覆盖</td><td>D.路径覆盖</td><td>A</td></tr><tr><td>7</td><td>下面那种方法能够有效地检测输入条件的各种组合可能引起的错误</td><td>A.错误推测</td><td>B.等价类划分</td><td>C.判定覆盖</td><td>D.因果图</td><td>D</td></tr><tr><td>8</td><td>以下哪种方法不是黑盒测试用例的设计方法</td><td>A.场景法</td><td>B.边界值法</td><td>C.因果图法</td><td>D.路径法</td><td>D</td></tr><tr><td>9</td><td>下列几种逻辑覆盖标准中，查错能力最强的是</td><td>A.语句覆盖</td><td>B.判定覆盖</td><td>C.条件覆盖</td><td>D.条件组合覆盖</td><td>D</td></tr><tr><td>10</td><td>发现错误能力最弱的是</td><td>A.语句覆盖</td><td>B.判定覆盖</td><td>C.条件覆盖</td><td>D.路径覆盖</td><td>A</td></tr><tr><td>10</td><td>查找程序是否有内存泄露，可采用的软件测试是</td><td>A.静态测试</td><td>B.动态测试</td><td>C.单元测试</td><td>D.集成测试</td><td>B</td></tr><tr><td></td><td>CM4</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1</td><td>从软件工程角度，软件测试分为几个阶段。</td><td>A.3</td><td>B.4</td><td>C.5</td><td>D.6</td><td>D</td></tr><tr><td>2</td><td>在W模型中，程序设计与下面哪项测试可以同步？</td><td>A.需求评审</td><td>B.设计评审</td><td>C.功能测试用例设计</td><td>D.单元测试</td><td>C</td></tr><tr><td>3</td><td>当软件开发机构具有独立的测试部门，该机构测试成熟度至少达到下面哪个级别？</td><td>A.TMM2</td><td>B.TMM3</td><td>C.TMM4</td><td>D.TMM5</td><td>B</td></tr><tr><td>4</td><td>按照软件测试规范，执行单元测试是由哪类人员来进行？</td><td>A.测试分析人员</td><td>B.测试人员</td><td>C.设计人员</td><td>D.编程人员</td><td>D</td></tr><tr><td>5</td><td>下面哪项不属于测试项目管理的内容</td><td>A.测试设计</td><td>B.单元测试</td><td>C.测试执行</td><td>D.测试结果分析</td><td>B</td></tr><tr><td>6</td><td>按照软件测试规范，在以下哪个测试阶段制定测试策略？</td><td>A.测试计划</td><td>B.测试设计</td><td>C.测试实施</td><td>D.测试评估</td><td>A</td></tr><tr><td>7</td><td>按照软件测试规范，下面哪项评审需要项目经理参加？</td><td>A.测试计划评审</td><td>B.测试用例评审</td><td>C.测试过程评审</td><td>D.测试结果评估</td><td>A</td></tr><tr><td>8</td><td>在敏捷测试中，应主要采用探索式测试</td><td>对</td><td></td><td></td><td></td><td></td></tr><tr><td>9</td><td>在软件开发的  W模型中，测试过程与开发过程同步进行</td><td>对</td><td></td><td></td><td></td><td></td></tr><tr><td>10</td><td>测试结果的评估应由SQA人员来完成</td><td>错</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>CM5</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1</td><td>下面哪个测试内容不属于单元测试（ ）</td><td>A.接口数据测试</td><td>B.局部数据测试</td><td>C.模块间时序测试</td><td>D.全局数据测试</td><td>C</td></tr><tr><td>2</td><td>以下关于集成测试的正确描述是（）</td><td>A.在把各个模块连接起来的时候，</td><td>B.一个模块的功能是否会对另一个模块</td><td>C.全局数据结构是否有问题</td><td>D.以上都是</td><td>D</td></tr><tr><td></td><td></td><td>穿越模块接口的数据是否会丢失</td><td>的功能产生不利的影响</td><td></td><td></td><td></td></tr><tr><td>3</td><td>在集成测试时，能较早发现高层模块接口错误的测试方法为。</td><td>A.自顶向下渐增式测试</td><td>B.自底向上渐增式测试</td><td>C.非渐增式测试</td><td>D.系统测试</td><td>A</td></tr><tr><td>4</td><td>Web应用系统负载测试中，以下哪个不是衡量业务执行效率的指标。</td><td>A.事务并发请求数</td><td>B.CPU执行占用率</td><td>C.事务吞吐量</td><td>D.事务响应时间</td><td>B</td></tr><tr><td>5</td><td>性能测试脚本执行，是在性能测试过程的第几阶段实施。</td><td>A.2</td><td>B.3</td><td>C.4</td><td>D.5</td><td>C</td></tr><tr><td>6</td><td>以下哪类系统可靠性最高。</td><td>A.单机系统</td><td>B.C/S系统</td><td>C.B/S系统</td><td>D.P2P系统</td><td>D</td></tr><tr><td>7</td><td>验证系统部件失效后的处理能力是属于以下哪种测试</td><td>A.系统性能测试</td><td>B.系统可靠性测试</td><td>C.系统容错测试</td><td>D.系统功能测试</td><td>C</td></tr><tr><td>8</td><td>下面哪种负载模式更接近实际系统运行情况</td><td>A.一次性加载</td><td>B.递增加载</td><td>C.高低变更加载</td><td>D.随机加载</td><td>D</td></tr><tr><td>9</td><td>下面哪种情况不是导致系统性能问题的原因</td><td>A.CPU使用率过高</td><td>B.内存泄露</td><td>C.系统响应时间长</td><td>D.连接资源稀少</td><td>C</td></tr><tr><td>10</td><td>以下哪个测试工具是使用最广泛的性能测试产品工具。</td><td>A.Load Runner</td><td>B.Selenium</td><td>C.JMeter</td><td>D.Quick Test  Professional</td><td>A</td></tr><tr><td></td><td>CM6</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1</td><td>下面哪项不是软件度量的目标（）</td><td>A.用数据指标表明验收标准</td><td>B.分配资源时进行量化均衡</td><td>C.便于对软件质量进行评价</td><td>D.发现软件中的缺陷数量</td><td>D</td></tr><tr><td>2</td><td>下面哪项不是软件度量的用途?</td><td>A.衡量软件过程质量</td><td>B.项目度量</td><td>C.开发人员成效度量</td><td>D.产品质量度量</td><td>C</td></tr><tr><td>3</td><td>下面项类质量数据不能用于评估软件稳定性?</td><td>A.正确性</td><td>B.可靠性</td><td>C.可维护性</td><td>D.可用性</td><td>A</td></tr><tr><td>4</td><td>下面哪项活动是软件度量的阶段活动?</td><td>A.识别目标</td><td>B.定义度量过程</td><td>C.数据分析与反馈</td><td>D.以上都是</td><td>D</td></tr><tr><td>5</td><td>软件度量的维度是下面哪项？</td><td>A.项目度量</td><td>B.产品度量</td><td>C.过程度量</td><td>D.以上都是</td><td>D</td></tr><tr><td>6</td><td>下面哪项工作需要SQA人员来完成？</td><td>A.需求评审</td><td>B.过程评审</td><td>C.设计评审</td><td>D.系统测试</td><td>B</td></tr><tr><td>7</td><td>下面哪项工作需要SQA人员来完成？</td><td>A.制定SQA计划</td><td>B.审查软件过程</td><td>C.软件测试过程监督</td><td>D.以上都是</td><td>D</td></tr><tr><td>8</td><td>测试计划不包括下面哪项工作？</td><td>A.测试计划安排</td><td>B.测试风险识别</td><td>C.测试流程审计</td><td>D.测试资源安排</td><td>C</td></tr><tr><td>9</td><td>SQA在项目早期要根据项目计划制定与其对应的SQA计划</td><td>对</td><td></td><td></td><td></td><td></td></tr><tr><td>10</td><td>SQA是贯穿整个软件过程的第三方独立审查活动</td><td>对</td><td></td><td></td><td></td></tr></tbody></table></div></div>        <h1 id="作业大题"   >          <a href="#作业大题" class="heading-link"><i class="fas fa-link"></i></a>作业大题</h1>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628010850.png" alt="image-20210628010850526"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628010901.png" alt="image-20210628010901174"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628010909.png" alt=""></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628010918.png" alt="image-20210628010918247"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628010924.png" alt="image-20210628010924577"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628010933.png" alt="image-20210628010933038"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628010942.png" alt="image-20210628010941998"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628010953.png" alt="image-20210628010953483"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628011005.png" alt="image-20210628011005058"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628011030.png" alt="image-20210628011030646"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628011039.png" alt="image-20210628011039596"></p>        <h1 id="简答题预测"   >          <a href="#简答题预测" class="heading-link"><i class="fas fa-link"></i></a>简答题预测</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/xinyuebaihe/article/details/105936178" >https://blog.csdn.net/xinyuebaihe/article/details/105936178</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="2-软件的6大质量特性："   >          <a href="#2-软件的6大质量特性：" class="heading-link"><i class="fas fa-link"></i></a>2.软件的6大质量特性：</h2>      <p>ISO9126质量模型：软件质量模型的6大特性和27个子特性。</p><p>ISO9126软件质量模型是评价软件质量的国际标准，由6个特性和27个子特性组成，建议大家深入理解各特性、子特性的含义和区别，在测试工作需要从这6个特性和27个子特性去测试、评价一个软件。这个模型是软件质量标准的核心，对于大部分的软件，都可以考虑从这几个方面着手进行测评。</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210628074321.png" alt="image-20210628074321110"></p><p>2qw一、功能性<br>1、适合性：提供了相应的功能<br>2、准确性：正确（用户需要的）<br>3、互操作性：产品与产品之间交互数据的能力<br>4、保密安全性：允许经过授权的用户和系统能够正常的访问相应的数据和信息，禁止未授权的用户访问…….<br>5、功能性的依从性：国际/国家/行业/企业 标准规范一致性<br>二、可靠性：产品在规定的条件下，在规定的时间内完成规定功能的能力<br>1、成熟性：防止内部错误导致软件失效的能力<br>2、容错性：软件出现故障，自我处理能力<br>3、易恢复性：失效情况下的恢复能力<br>4、可靠性的依从性<br>三、易用性：在指定使用条件下，产品被理解、 学习、使用和吸引用户的能力<br>1、易理解性<br>2、易学性<br>3、易操作性<br>4、吸引性<br>5、易用性的依从性<br>四、效率性：在规定台条件下，相对于所用资源的数量，软件产品可提供适当性能的能力<br>1、时间特性：平均事务响应时间，吞吐率，TPS（每秒事务数）<br>2、资源利用性：CPU 内存 磁盘 IO 网络带宽 队列 共享内存<br>3、效率依从性<br>五、软件维护性：”四规”， 在规定条件下，规定的时间内，使用规定的工具或方法修复规定功能的能力<br>1、易分析性：分析定位问题的难易程度<br>2、易改变性：软件产品使指定的修改可以被实现的能力<br>3、稳定性：防止意外修改导致程序失效<br>4、易 测试性：使已修改软件能被确认的能力<br>5、维护性的依从性<br>六、软件可移植性：从一种环境迁移到另一种环境的能力<br>1、适应性：适应不同平台<br>2、易安装性：被安装的能力<br>3、共存性<br>4、易替换性<br>5、可移植性的依从性</p>        <h2 id="3-Alpha测试与beta的区别"   >          <a href="#3-Alpha测试与beta的区别" class="heading-link"><i class="fas fa-link"></i></a>3.Alpha测试与beta的区别</h2>      <p>alpha测试版，有点相当于内部测试，一般开发人员在场   ，是由用户做测试，但开发人员在场，一般是请用户到开发现场去测试<br>beta测试版，完全交给用户，由用户做测试，返回测试报告，相当于发行前的一个版本   </p><p>Alpha测试 在系统开发接近完成时对应用系统的测试；测试后仍然会有少量的设计变更。这种测试一般由最终用户或其它人员完成，不能由程序或测试员完成。<br>Beta测试 当开发和测试根本完成时所做的测试，最终的错误和问题需要在最终发行前找到。这种测试一般由最终用户或其它人员完成，不能由程序员或测试员完成。</p><p>1、测试时间不同：</p><p>Beta测试是百软件产品完成了功能测试和系统测试之后，在产品发布之前所进行的软件测试活动，它是技术测试的最后一个阶段。</p><p>alpha测试简称“α测试”，可以从软件产品编码结束之时开始，或在模块(子系统)测试完成之后开始，也可以在确认测试过程中产品达到一定的稳定和可靠程度度之后再开始。</p><p>2、测试的目的不同：</p><p>α测试的目的是评价软件产品的FLURPS（即功能、局域化、知可用性、可靠性、性能和支持）。尤其注重产品的界面和特色。α测试即为非正式验收道测试。</p><p>Beta测试是一种验收测试，通过了验收测试，产品就会进入发布阶段。</p><p>3、测试人员及场所不同：</p><p>α测试是由一个用户在开发环境下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的受控测试，α测试不能由程序版员或测试员完成。α测试发现的错误，可以在测试现场立刻反馈给开发人员，由开发人员及时分析和处理。</p><p>Beta测试由软件的最终用户们在一个或多个客户场所进行。开发者通常不在Beta测试的现场，因Beta测试是软件在开发者不能控制的环境中的“真实”应用。</p>        <h2 id="4-软件缺陷等级划分"   >          <a href="#4-软件缺陷等级划分" class="heading-link"><i class="fas fa-link"></i></a>4.软件缺陷等级划分</h2>      <p>A类—严重错误，包括以下各种错误： 1.由于程序所引起的死机,非法退出 2.死循环 3.数据库发生死锁 4.因错误操作导致的程序中断 5.功能错误 6.与数据库连接错误 7.数据通讯错误</p><p>B类—较严重错误，包括以下各种错误： 1.程序错误 2.程序接口错误 3.数据库的表、业务规则、缺省值未加完整性等约束条件</p><p>C类—一般性错误，包括以下各种错误： 1.操作界面错误(包括数据窗口内列名定义、含义是否一致) 2.打印内容、格式错误 3.简单的输入限制未放在前台进行控制 4.删除操作未给出提示 5.数据库表中有过多的空字段</p><p>D类—较小错误，包括以下各种错误： 1.界面不规范 2.辅助说明描述不清楚 3.输入输出不规范 4.长操作未给用户提示 5.提示窗口文字未采用行业术语 6.可输入区域和只读区域没有明显的区分标志</p><p>E类—测试建议</p>        <h2 id="6-测试分为那几个阶段？并对每个阶段详细说明"   >          <a href="#6-测试分为那几个阶段？并对每个阶段详细说明" class="heading-link"><i class="fas fa-link"></i></a>6.测试分为那几个阶段？并对每个阶段详细说明</h2>      <p>按照开发阶段划分，软件测试可分为单元测试、集成测试、系统测试和验收测试</p><p>集成测试：针对每个单元的测试，以确保每个模块能正常工作为目标</p><p>集成测试：对已经测试过的模块进行组装，进行集成测试。目的就是在于检验与软件设计相关的程序结构问题。</p><p>系统测试：检验软件产品能够与系统的其他部分（比如：硬件、数据库及操作人员）协调工作。</p><p>验收测试：检验软件产品质量的最后一道工序，主要突出用户的作用，同时软件开发人员也有一定程度的参与。</p>        <h2 id="7-什么是软件测试？软件测试的目的与原则"   >          <a href="#7-什么是软件测试？软件测试的目的与原则" class="heading-link"><i class="fas fa-link"></i></a>7.什么是软件测试？软件测试的目的与原则</h2>      <p>在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。</p><p>软件测试的目的：</p><p>测试是程序的执行过程，目的在于发现错误<br>一个成功的测试用例在于发现至今未发现的错误<br>一个成功的测试是发现了至今未发现的错误的测试<br>确保产品完成了它所承诺或公布的功能，并且用户可以访问到的功能都有明确的书面说明。<br>确保产品满足性能和效率的要求<br>确保产品是健壮的和适应用户环境的</p><pre><code>    1）软件测试是为了发现错误而执行程序的过程。    2）测试是为了证明程序有错，而不是证明程序无错。（发现错误不是唯一目的）    3）一个好的测试用例在于它发现至今未发现的错误。    4）一个成功的测试是发现了至今未发现的错误的测试。</code></pre><p>注意：</p><pre><code>    1、测试并不仅仅是为了要找出错误。通过分析错误产生的原因和错误的分布特征。可以帮助项目管理者发现当前所采用的软件过程的缺陷，以便改进。同时，通过分析也能帮助我们设计出有针对性的检测方法，改善测试的有效性。    2、没有发现错误的测试也是有价值的，完整的测试是评定测试质量的一种方法。详细而严谨的可靠性增长模型可以证明这一点。例如Bev Littlewood发现一个经过测试而正常运行了n个小时的系统有继续正常运行n个小时的概率。</code></pre><p>软件测试的原则：</p><p>测试用例中一个必须部分是对预期输出或接过进行定义<br>程序员应避免测试自己编写的程序<br>编写软件的组织不应当测试自己编写的软件<br>应当彻底检查每个测试的执行结果<br>测试用例的编写不仅应当根据有效和预料到的输入情况，而且也应当根据无效和未预料到的输入情况<br>检擦程序是否“未做其应该做的”仅是测试的一半，测试的另一半是检查程序是否“做了其不应该做的”<br>应避免测试用例用后即弃，除非软件本身就是个一次性的软件<br>计划测试工作时不应默许假定不会发现错误<br>程序某部分存在更多错误的可能性，与该部分已经发现错误的数量成正比<br>软件测试是一项极富创造性，极具智力的挑战性的工作</p><pre><code>   1）应当把“尽早地不断地进行软件测试“作为软件开发者的座右铭。   2）测试用例应由测试数据和与之对应的预期输出结果这两部分组成。   3）程序员应避免检查自己的程序。   4）在设计测试用例时，应当包括合理的输入条件和不合理的输入条件。   5）充分注意测试中的群集现象。   6）严格执行测试计划，排除测试的随意性。   7）应当对每一个测试结果做全面的检查。   8）妥善保存测试计划、测试用例、出错统计和最终分析报告，为维护提供方便。</code></pre><p>一、Testing shows presence of defects<br>       测试显示软件存在缺陷<br>       测试只能证明软件中存在缺陷，但并不能证明软件中不存在缺陷。软件测试是为了降低存在缺陷的可能性，即便是没有找到缺陷，也不能证明软件是完美的。<br>二、Exhaustive testing is impossible<br>       穷尽测试是不可能的<br>       现在软件的规模越来越大，复杂度越来越高，想做到完全性的测试是不可能的。在测试阶段，测试人员可以根据风险和优先级来进行集中和高强度的测试，从而保证软件的质量。<br>三、Testing early<br>       测试尽早介入<br>       为什么测试要尽早介入呢，简单的说就是保证软件质量，降低风险和成本。测试人员一般在需求阶段就开始介入，使缺陷在需求或设计阶段就被发现，缺陷发现越早，修复的成本就越小。<br>四、Defect clustering<br>       缺陷集群性（2/8原则）<br>       缺陷集群性表明小部分模块包含大部分的缺陷。软件测试中存在Pareto原则：80%的缺陷发现在20%的模块中。<br>       一个功能模块发现的缺陷越高，那存在的未被发现的缺陷也越高，故发现的缺陷与未发现的缺陷成正比。<br>五、Pesticide Paradox<br>      杀虫剂悖论<br>      反复使用相同的杀虫剂会导致害虫对杀虫剂产生免疫而无法杀死害虫。软件测试也一样。如果一直使用相同的测试方法或手段，可能无法发现新的bug。<br>      为了解决这个问题，测试用例应当定期修订和评审，增加新的或不同的测试用例帮助发现更多的缺陷。<br>      测试人员不能一直依赖于现有的测试技术，而要不断的提升测试方法以提高测试效率。<br>六、Testing is context dependent<br>      测试活动依赖于测试内容<br>      根据业务的不同，软件测试内部也分为不同的行业，比如游戏行业、电商行业、金融行业。不同的行业，测试活动的开展都有所不同，比如测试技术、测试工具的选择，测试流程都不尽相同，所以软件测试的活动开展依赖于所测试的内容。<br>七、Absence of error - fallacy<br>       没有错误是好是谬论<br>      有可能99%没有bug的软件也是不能使用的。如果对错误的需求进行了彻底的测试，这种情况就发生了。软件测试不仅是找出缺陷，同时也需要确认软件是否满足需求。如果开发出来的产品不满足用户的需求，即便找到和修复了缺陷也作用不大。</p>        <h2 id="8-系统测试的策略有哪些-列出任意10种即可"   >          <a href="#8-系统测试的策略有哪些-列出任意10种即可" class="heading-link"><i class="fas fa-link"></i></a>8.系统测试的策略有哪些?列出任意10种即可</h2>      <p>功能测试，性能测试，可靠性测试，负载测试，易用性测试，强度测试，安全测试，配置测试，安装测试，卸载测试，文挡测试，故障恢复测试，界面测试，容量测试，兼容性测试，分布测试，可用性测试</p>        <h2 id="10-为什么说单元测试能发现约80-的软件缺陷"   >          <a href="#10-为什么说单元测试能发现约80-的软件缺陷" class="heading-link"><i class="fas fa-link"></i></a>10.为什么说单元测试能发现约80%的软件缺陷</h2>      <p>这是软件工程长期的历史数据统计和测试zd经验总结得来的，没听说过有典故或理由。当然要发现这80%的缺陷也版是要依靠设计出良好的测试用例，另外顺便提下，软件测试行业有个二八原则，就是软件80%的缺陷权存在与20%的代码中</p><p>因为缺陷放大理论，在单元测试阶段发现的bug会在系统测试阶段被放大，放大倍数完全符合80/20理论</p>        <h2 id="13-怎样进行文档测试"   >          <a href="#13-怎样进行文档测试" class="heading-link"><i class="fas fa-link"></i></a>13.怎样进行文档测试</h2>      <p>　　非代码的文档测试主要检查文档的正确性、完备性和可理解性。软件驱动的文档还得像程序一样运行测试。</p><p>　　正确性是指不要把软件的功能和操作写错，也不允许文档内容前后矛盾。</p><p>　　完备性是指文档不可以“虎头蛇尾”，更不许漏掉关键内容。文档中很多内容对开发者可能是“显然”的，但对用户而言不见得都是“显然”的。</p><p>　　文档要让大众用户看得懂，能理解。术语、缩写用户是否理解？内容和主题是否一致？</p><p>　　很多程序员能编写出好程序，却写不出清晰的文档。与文档作者密切合作，对文档仔细阅读，跟随每个步骤，检查每个图形，尝试每个示例是进行文档测试的基本方法。</p>]]></content>
    
    
    <summary type="html">描述</summary>
    
    
    
    <category term="分类" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>软件安全 - 03 [前端实践] 位运算和权限设计</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/10/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%20-%2003%20[%E5%89%8D%E7%AB%AF%E5%AE%9E%E8%B7%B5]%20%E4%BD%8D%E8%BF%90%E7%AE%97%E5%92%8C%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/10/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%20-%2003%20[%E5%89%8D%E7%AB%AF%E5%AE%9E%E8%B7%B5]%20%E4%BD%8D%E8%BF%90%E7%AE%97%E5%92%8C%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-10-12T06:34:26.326Z</published>
    <updated>2021-05-06T11:34:20.000Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="软件安全-03-前端实践-位运算和权限设计"   >          <a href="#软件安全-03-前端实践-位运算和权限设计" class="heading-link"><i class="fas fa-link"></i></a>软件安全 - 03 [前端实践] 位运算和权限设计</h1>      <span id="more"></span><p><span class="exturl"><a class="exturl__link"   href="https://segmentfault.com/a/1190000020930961" >https://segmentfault.com/a/1190000020930961</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">软件安全 - 03 [前端实践] 位运算和权限设计</summary>
    
    
    
    <category term="网络安全" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>软件安全 - 02 [Web安全策略] 实现WEB攻击</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/10/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%20-%2002%20[Web%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5]%20%E5%AE%9E%E7%8E%B0WEB%E6%94%BB%E5%87%BB/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/10/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%20-%2002%20[Web%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5]%20%E5%AE%9E%E7%8E%B0WEB%E6%94%BB%E5%87%BB/</id>
    <published>2021-10-12T06:34:26.319Z</published>
    <updated>2021-06-01T07:00:20.000Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="软件安全-02-Web安全策略-实现WEB攻击"   >          <a href="#软件安全-02-Web安全策略-实现WEB攻击" class="heading-link"><i class="fas fa-link"></i></a>软件安全 - 02 [Web安全策略] 实现WEB攻击</h1>      <span id="more"></span><p><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" >https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="尝试XSS攻击"   >          <a href="#尝试XSS攻击" class="heading-link"><i class="fas fa-link"></i></a>尝试XSS攻击</h2>              <h2 id="尝试CSRF攻击"   >          <a href="#尝试CSRF攻击" class="heading-link"><i class="fas fa-link"></i></a>尝试CSRF攻击</h2>              <h3 id="GET和Img标签"   >          <a href="#GET和Img标签" class="heading-link"><i class="fas fa-link"></i></a>GET和Img标签</h3>      <p>银行网站A，它以GET请求来完成银行转账的操作，如：<span class="exturl"><a class="exturl__link"   href="http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000" >http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>　　危险网站B，它里面有一段HTML的代码如下：</p><p>　　<code>&lt;img src=http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</code></p><p>　　首先，你登录了银行网站A，然后访问危险网站B，噢，这时你会发现你的银行账户少了1000块……</p><p>　　为什么会这样呢？原因是银行网站A违反了HTTP规范，使用GET请求更新资源。在访问危险网站B的之前，你已经登录了银行网站A，而B中的\<img\>以GET的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以你的浏览器会带上你的银行网站A的Cookie发出Get请求，去获取资源“<span class="exturl"><a class="exturl__link"   href="http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作" >http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>……</p>        <h3 id="POST但是没有完全POST"   >          <a href="#POST但是没有完全POST" class="heading-link"><i class="fas fa-link"></i></a>POST但是没有完全POST</h3>      <p>为了杜绝上面的问题，银行决定改用POST请求完成转账操作。</p><p>　　银行网站A的WEB表单如下：　　<br><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;Transfer.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span>　　　　<span class="tag">&lt;<span class="name">p</span>&gt;</span>ToBankId: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;toBankId&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>　　　　<span class="tag">&lt;<span class="name">p</span>&gt;</span>Money: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>　　　　<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Transfer&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>　　<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></div></figure><br>　　后台处理页面Transfer.php如下：</p><figure class="highlight php"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="meta">&lt;?php</span></span><br><span class="line">　　　　session_start();</span><br><span class="line">　　　　<span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;toBankId&#x27;</span>] &amp;&amp;　<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;money&#x27;</span>]))</span><br><span class="line">　　　　&#123;</span><br><span class="line">　　　　    buy_stocks(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;toBankId&#x27;</span>],　<span class="variable">$_REQUEST</span>[<span class="string">&#x27;money&#x27;</span>]);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　<span class="meta">?&gt;</span></span><br></pre></td></tr></table></div></figure><p>和示例1中的操作一样，你首先登录了银行网站A，然后访问危险网站B，结果…..和示例1一样，你再次没了1000块～T_T，这次事故的原因是：银行后台使用了$_REQUEST去获取请求的数据，而$_REQUEST既可以获取GET请求的数据，也可以获取POST请求的数据，这就造成了在后台处理程序无法区分这到底是GET请求的数据还是POST请求的数据。在PHP中，可以使用$_GET和$_POST分别获取GET请求和POST请求的数据。在JAVA中，用于获取请求数据request一样存在不能区分GET请求数据和POST数据的问题。</p>        <h3 id="POST和虚假表单"   >          <a href="#POST和虚假表单" class="heading-link"><i class="fas fa-link"></i></a>POST和虚假表单</h3>      <p>　经过前面2个惨痛的教训，银行决定把获取请求数据的方法也改了，改用$_POST，只获取POST请求的数据，后台处理页面Transfer.php代码如下：</p><figure class="highlight php"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　　　session_start();</span><br><span class="line">　　　　<span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;toBankId&#x27;</span>] &amp;&amp;　<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;money&#x27;</span>]))</span><br><span class="line">　　　　&#123;</span><br><span class="line">　　　　    buy_stocks(<span class="variable">$_POST</span>[<span class="string">&#x27;toBankId&#x27;</span>],　<span class="variable">$_POST</span>[<span class="string">&#x27;money&#x27;</span>]);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　<span class="meta">?&gt;</span></span><br></pre></td></tr></table></div></figure><p>　　然而，危险网站B与时俱进，它改了一下代码：</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">　　　　　　<span class="function"><span class="keyword">function</span> <span class="title">steal</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">　　　　　　</span>&#123;</span></span><br><span class="line"><span class="javascript">          　　　　 iframe = <span class="built_in">document</span>.frames[<span class="string">&quot;steal&quot;</span>];</span></span><br><span class="line"><span class="javascript">　　     　　      iframe.document.Submit(<span class="string">&quot;transfer&quot;</span>);</span></span><br><span class="line"><span class="javascript">　　　　　　&#125;</span></span><br><span class="line"><span class="javascript">　　　　</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">　　<span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;steal()&quot;</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;steal&quot;</span> <span class="attr">display</span>=<span class="string">&quot;none&quot;</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">name</span>=<span class="string">&quot;transfer&quot;</span>　<span class="attr">action</span>=<span class="string">&quot;http://www.myBank.com/Transfer.php&quot;</span>&gt;</span></span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;toBankId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span></span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>如果用户仍是继续上面的操作，很不幸，结果将会是再次不见1000块……因为这里危险网站B暗地里发送了POST请求到银行!</p><p>　　总结一下上面3个例子，CSRF主要的攻击模式基本上是以上的3种，其中以第1,2种最为严重，因为触发条件很简单，一个\<img\>就可以了，而第3种比较麻烦，需要使用JavaScript，所以使用的机会会比前面的少很多，但无论是哪种情况，只要触发了CSRF攻击，后果都有可能很严重。</p><p>　　理解上面的3种攻击模式，其实可以看出，CSRF攻击是源于WEB的隐式身份验证机制！WEB的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！</p>        <h3 id="防御策略"   >          <a href="#防御策略" class="heading-link"><i class="fas fa-link"></i></a>防御策略</h3>      <p>　　服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。</p><p>　(1).Cookie Hashing(所有表单都包含同一个伪随机值)：</p><p>就是用户访问的时候先给一个hash数字, 让用户每次请求的时候作为一个自定义头带上</p><p>　　这个方法个人觉得已经可以杜绝99%的CSRF攻击了，那还有1%呢….由于用户的Cookie很容易由于网站的XSS漏洞而被盗取，这就另外的1%。一般的攻击者看到有需要算Hash值，基本都会放弃了，某些除外，所以如果需要100%的杜绝，这个不是最好的方法。</p><p>　(2).验证码</p><p>　　这个方案的思路是：每次的用户提交都需要用户在表单中填写一个图片上的随机字符串，厄….这个方案可以完全解决CSRF，但个人觉得在易用性方面似乎不是太好，还有听闻是验证码图片的使用涉及了一个被称为MHTML的Bug，可能在某些版本的微软IE中受影响。</p><p>　　(3).One-Time Tokens(不同的表单包含一个不同的伪随机值)</p><p>　　在实现One-Time Tokens时，需要注意一点：就是“并行会话的兼容”。如果用户在一个站点上同时打开了两个不同的表单，CSRF保护措施不应该影响到他对任何表单的提交。考虑一下如果每次表单被装入时站点生成一个伪随机值来覆盖以前的伪随机值将会发生什么情况：用户只能成功地提交他最后打开的表单，因为所有其他的表单都含有非法的伪随机值。必须小心操作以确保CSRF保护措施不会影响选项卡式的浏览或者利用多个浏览器窗口浏览一个站点。</p>        <h2 id="尝试SQL注入"   >          <a href="#尝试SQL注入" class="heading-link"><i class="fas fa-link"></i></a>尝试SQL注入</h2>              <h1 id="前端安全知识点"   >          <a href="#前端安全知识点" class="heading-link"><i class="fas fa-link"></i></a>前端安全知识点</h1>      <p>这一章我们将来学习安全防范这一块的知识点。总的来说安全是很复杂的一个领域，不可能通过一个章节就能学习到这部分的内容。在这一章节中，我们会学习到常见的一些安全问题及如何防范的内容，在当下其实安全问题越来越重要，已经逐渐成为前端开发必备的技能了。</p>        <h2 id="XSS"   >          <a href="#XSS" class="heading-link"><i class="fas fa-link"></i></a>XSS</h2>      <blockquote><p>涉及面试题：什么是 XSS 攻击？如何防范 XSS 攻击？什么是 CSP？</p></blockquote><p>XSS 简单点来说，就是攻击者想尽一切办法将可以执行的代码注入到网页中。</p><p>XSS 可以分为多种类型，但是总体上我认为分为两类：<strong>持久型和非持久型</strong>。</p><p>持久型也就是攻击的代码被服务端写入进<strong>数据库</strong>中，这种攻击危害性很大，因为如果网站访问量很大的话，就会导致大量正常访问页面的用户都受到攻击。</p><p>举个例子，对于评论功能来说，就得防范持久型 XSS 攻击，因为我可以在评论中输入以下内容</p><p><img   src="https://user-gold-cdn.xitu.io/2018/12/2/1676a843648d488c?w=1348&amp;h=318&amp;f=png&amp;s=41697" style=""  alt=""></p><p>这种情况如果前后端没有做好防御的话，这段评论就会被存储到数据库中，这样每个打开该页面的用户都会被攻击到。</p><p>非持久型相比于前者危害就小的多了，一般通过<strong>修改 URL 参数</strong>的方式加入攻击代码，诱导用户访问链接从而进行攻击。</p><p>举个例子，如果页面需要从 URL 中获取某些参数作为内容的话，不经过过滤就会导致攻击代码被执行</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- http://www.domain.com?name=&lt;script&gt;alert(1)&lt;/script&gt; --&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;                                                  </span><br></pre></td></tr></table></div></figure><p>但是对于这种攻击方式来说，如果用户使用 Chrome 这类浏览器的话，浏览器就能自动帮助用户防御攻击。但是我们不能因此就不防御此类攻击了，因为我不能确保用户都使用了该类浏览器。</p><p><img   src="https://user-gold-cdn.xitu.io/2018/12/2/1676d5e1a09c8367?w=647&amp;h=292&amp;f=png&amp;s=32958" style=""  alt=""></p><p>对于 XSS 攻击来说，通常有两种方式可以用来防御。</p>        <h3 id="转义字符"   >          <a href="#转义字符" class="heading-link"><i class="fas fa-link"></i></a>转义字符</h3>      <p>首先，对于用户的输入应该是永远不信任的。最普遍的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  str = str.replace(<span class="regexp">/&amp;/g</span>, <span class="string">&#x27;&amp;amp;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;&amp;quto;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;&amp;#39;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/`/g</span>, <span class="string">&#x27;&amp;#96;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/\//g</span>, <span class="string">&#x27;&amp;#x2F;&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></div></figure><p>通过转义可以将攻击代码 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> 变成<br><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -&gt; &amp;lt;script&amp;gt;alert(1)&amp;lt;&amp;#x2F;script&amp;gt;</span></span><br><span class="line"><span class="built_in">escape</span>(<span class="string">&#x27;&lt;script&gt;alert(1)&lt;/script&gt;&#x27;</span>)</span><br><span class="line"> </span><br></pre></td></tr></table></div></figure><br>但是对于显示富文本来说，显然不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。对于这种情况，通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐使用白名单的方式。<br><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const xss = require(&#x27;xss&#x27;)</span><br><span class="line">let html = xss(&#x27;&lt;h1 id=&quot;title&quot;&gt;XSS Demo&lt;/h1&gt;&lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt;&#x27;)</span><br><span class="line">// -&gt; &lt;h1&gt;XSS Demo&lt;/h1&gt;&amp;lt;script&amp;gt;alert(&quot;xss&quot;);&amp;lt;/script&amp;gt;</span><br><span class="line">console.log(html)</span><br><span class="line"> </span><br></pre></td></tr></table></div></figure><br>以上示例使用了 <code>js-xss</code> 来实现，可以看到在输出中保留了 <code>h1</code> 标签且过滤了 <code>script</code> 标签。</p>        <h3 id="CSP"   >          <a href="#CSP" class="heading-link"><i class="fas fa-link"></i></a>CSP</h3>      <p>CSP 本质上就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。<br>通常可以通过两种方式来开启 CSP：</p><ol><li>设置 HTTP Header 中的 <code>Content-Security-Policy</code></li><li>设置 <code>meta</code> 标签的方式 <code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot;&gt;</code><br>这里以设置 HTTP Header 来举例</li></ol><ul><li><p>只允许加载本站资源</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src ‘self’</span><br><span class="line"></span><br></pre></td></tr></table></div></figure></li><li><p>只允许加载 HTTPS 协议图片</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: img-src https://*</span><br><span class="line"></span><br></pre></td></tr></table></div></figure></li><li><p>允许加载任何来源框架</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: child-src &#x27;none&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure></li></ul><p>当然可以设置的属性远不止这些，你可以通过查阅 <span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy" >文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 的方式来学习，这里就不过多赘述其他的属性了。<br>对于这种方式来说，只要开发者配置了正确的规则，那么即使网站存在漏洞，攻击者也不能执行它的攻击代码，并且 CSP 的兼容性也不错。<br><img   src="https://user-gold-cdn.xitu.io/2018/12/2/1676d8215a3d1f5b?w=1266&amp;h=478&amp;f=png&amp;s=85547" style=""  alt=""></p>        <h2 id="CSRF"   >          <a href="#CSRF" class="heading-link"><i class="fas fa-link"></i></a>CSRF</h2>      <blockquote><p>涉及面试题：什么是 CSRF 攻击？如何防范 CSRF 攻击？<br>CSRF 中文名为跨站请求伪造。原理就是攻击者构造出一个后端请求地址，诱导用户点击或者通过某些途径自动发起请求。如果用户是在登录状态下的话，后端就以为是用户在操作，从而进行相应的逻辑。<br>举个例子，假设网站中有一个通过 <code>GET</code> 请求提交用户评论的接口，那么攻击者就可以在钓鱼网站中加入一个图片，图片的地址就是评论接口<br><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://www.domain.com/xxx?comment=&#x27;attack&#x27;&quot;/&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></div></figure><br>那么你是否会想到使用 <code>POST</code> 方式提交请求是不是就没有这个问题了呢？其实并不是，使用这种方式也不是百分百安全的，攻击者同样可以诱导用户进入某个页面，在页面中通过表单提交 <code>POST</code> 请求。</p>        <h3 id="如何防御"   >          <a href="#如何防御" class="heading-link"><i class="fas fa-link"></i></a>如何防御</h3>      <p>防范 CSRF 攻击可以遵循以下几种规则：</p><ol><li>Get 请求不对数据进行修改</li><li>不让第三方网站访问到用户 Cookie</li><li>阻止第三方网站请求接口</li><li>请求时附带验证信息，比如验证码或者 Token        <h4 id="SameSite"   >          <a href="#SameSite" class="heading-link"><i class="fas fa-link"></i></a>SameSite</h4>      可以对 Cookie 设置 <code>SameSite</code> 属性。该属性表示 Cookie 不随着跨域请求发送，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。        <h4 id="验证-Referer"   >          <a href="#验证-Referer" class="heading-link"><i class="fas fa-link"></i></a>验证 Referer</h4>      对于需要防范 CSRF 的请求，我们可以通过验证 Referer 来判断该请求是否为第三方网站发起的。        <h4 id="Token"   >          <a href="#Token" class="heading-link"><i class="fas fa-link"></i></a>Token</h4>      服务器下发一个随机 Token，每次发起请求时将 Token 携带上，服务器验证 Token 是否有效。        <h2 id="点击劫持"   >          <a href="#点击劫持" class="heading-link"><i class="fas fa-link"></i></a>点击劫持</h2>      涉及面试题：什么是点击劫持？如何防范点击劫持？<br>点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 <code>iframe</code> 嵌套的方式嵌入自己的网页中，并将 <code>iframe</code> 设置为透明，在页面中透出一个按钮诱导用户点击。<br><img   src="https://user-gold-cdn.xitu.io/2018/12/1/16768734d57c5f47?w=812&amp;h=424&amp;f=png&amp;s=43633" style=""  alt=""><br>对于这种攻击方式，推荐防御的方法有两种。        <h3 id="X-FRAME-OPTIONS"   >          <a href="#X-FRAME-OPTIONS" class="heading-link"><i class="fas fa-link"></i></a>X-FRAME-OPTIONS</h3>      <code>X-FRAME-OPTIONS</code> 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 <code>iframe</code> 嵌套的点击劫持攻击。<br>该响应头有三个值可选，分别是</li></ol><ul><li><code>DENY</code>，表示页面不允许通过 <code>iframe</code> 的方式展示</li><li><code>SAMEORIGIN</code>，表示页面可以在相同域名下通过 <code>iframe</code> 的方式展示</li><li><code>ALLOW-FROM</code>，表示页面可以在指定来源的 <code>iframe</code> 中展示        <h3 id="JS-防御"   >          <a href="#JS-防御" class="heading-link"><i class="fas fa-link"></i></a>JS 防御</h3>      对于某些远古浏览器来说，并不能支持上面的这种方式，那我们只有通过 JS 的方式来防御点击劫持了。<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;style id=&quot;click-jack&quot;&gt;</span><br><span class="line">    html &#123;</span><br><span class="line">      display: none !important;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    if (self == top) &#123;</span><br><span class="line">      var style = document.getElementById(&#x27;click-jack&#x27;)</span><br><span class="line">      document.body.removeChild(style)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      top.location = self.location</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></div></figure>以上代码的作用就是当通过 <code>iframe</code> 的方式加载页面时，攻击者的网页直接不显示所有内容了。        <h2 id="中间人攻击"   >          <a href="#中间人攻击" class="heading-link"><i class="fas fa-link"></i></a>中间人攻击</h2>      涉及面试题：什么是中间人攻击？如何防范中间人攻击？<br>中间人攻击是攻击方同时与服务端和客户端建立起了连接，并让对方认为连接是安全的，但是实际上整个通信过程都被攻击者控制了。攻击者不仅能获得双方的通信信息，还能修改通信信息。<br>通常来说不建议使用公共的 Wi-Fi，因为很可能就会发生中间人攻击的情况。如果你在通信的过程中涉及到了某些敏感信息，就完全暴露给攻击方了。<br>当然防御中间人攻击其实并不难，只需要增加一个安全通道来传输信息。HTTPS 就可以用来防御中间人攻击，但是并不是说使用了 HTTPS 就可以高枕无忧了，因为如果你没有完全关闭 HTTP 访问的话，攻击方可以通过某些方式将 HTTPS 降级为 HTTP 从而实现中间人攻击。        <h2 id="小结"   >          <a href="#小结" class="heading-link"><i class="fas fa-link"></i></a>小结</h2>      在这一章中，我们学习到了一些常见的前端安全方面的知识及如何防御这些攻击。但是安全的领域相当大，这些内容只是沧海一粟，如果大家对于安全有兴趣的话，可以阅读 <span class="exturl"><a class="exturl__link"   href="https://github.com/trimstray/the-book-of-secret-knowledge" >这个仓库的内容</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 来学习和实践这方面的知识。</li></ul></blockquote>]]></content>
    
    
    <summary type="html">软件安全 - 02 [Web安全策略] 实现WEB攻击</summary>
    
    
    
    <category term="网络安全" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>软件安全 - 03 [前端实践] 位运算和权限设计</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/10/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%20-%2001%20[%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1]%20%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/10/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%20-%2001%20[%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1]%20%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-10-12T06:34:26.299Z</published>
    <updated>2021-06-08T13:03:20.000Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="软件安全-03-前端实践-位运算和权限设计"   >          <a href="#软件安全-03-前端实践-位运算和权限设计" class="heading-link"><i class="fas fa-link"></i></a>软件安全 - 03 [前端实践] 位运算和权限设计</h1>      <span id="more"></span><p><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/xiekeli/p/5607107.html" >https://www.cnblogs.com/xiekeli/p/5607107.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/read/cv5992629" >在前端哈希密码是否是个不错的方案？</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/shadow_zed/article/details/82425793" >https://blog.csdn.net/shadow_zed/article/details/82425793</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
    <summary type="html">软件安全 - 03 [前端实践] 位运算和权限设计</summary>
    
    
    
    <category term="网络安全" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/10/12/%E5%86%99%E5%87%BA%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%A8%8B%E5%BA%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/10/12/%E5%86%99%E5%87%BA%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%A8%8B%E5%BA%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-10-12T06:34:26.291Z</published>
    <updated>2021-06-30T10:11:12.000Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="设计模式"   >          <a href="#设计模式" class="heading-link"><i class="fas fa-link"></i></a>设计模式</h1>      <span id="more"></span>        <h1 id="一句话归纳设计模式"   >          <a href="#一句话归纳设计模式" class="heading-link"><i class="fas fa-link"></i></a>一句话归纳设计模式</h1>      <div class="table-container"><div class="table-container"><table><thead><tr><th>分类</th><th>设计模式</th><th>简述</th><th>一句话归纳</th><th>目的</th><th>生活案例</th></tr></thead><tbody><tr><td>创建型设计模式 （简单来说就是用来创建对象的）</td><td>工厂模式（Factory Pattern）</td><td>不同条件下创建不同实例</td><td>产品标准化，生产更高效</td><td>封装创建细节</td><td>实体工厂</td></tr><tr><td>单例模式（Singleton Pattern）</td><td>保证一个类仅有一个实例，并且提供一个全局访问点</td><td>世上只有一个我</td><td>保证独一无二</td><td>CEO</td><td></td></tr><tr><td>原型模式（Prototype Pattern）</td><td>通过拷贝原型创建新的对象</td><td>拔一根猴毛，吹出千万个</td><td>高效创建对象</td><td>克隆</td><td></td></tr><tr><td>建造者模式（Builder Pattern）</td><td>用来创建复杂的复合对象</td><td>高配中配和低配，想选哪配就哪配</td><td>开放个性配置步骤</td><td>选配</td><td></td></tr><tr><td>结构型设计模式 （关注类和对象的组合）</td><td>代理模式（Proxy Pattern）</td><td>为其他对象提供一种代理以控制对这个对象的访问</td><td>没有资源没时间，得找别人来帮忙</td><td>增强职责</td><td>媒婆</td></tr><tr><td>外观模式（Facade Pattern）</td><td>对外提供一个统一的接口用来访问子系统</td><td>打开一扇门，通向全世界</td><td>统一访问入口</td><td>前台</td><td></td></tr><tr><td>装饰器模式（Decorator Pattern）</td><td>为对象添加新功能</td><td>他大舅他二舅都是他舅</td><td>灵活扩展、同宗同源</td><td>煎饼</td><td></td></tr><tr><td>享元模式（Flyweight Pattern）</td><td>使用对象池来减少重复对象的创建</td><td>优化资源配置，减少重复浪费</td><td>共享资源池</td><td>全国社保联网</td><td></td></tr><tr><td>组合模式（Composite Pattern）</td><td>将整体与局部（树形结构）进行递归组合，让客户端能够以一种的方式对其进行处理</td><td>人在一起叫团伙，心在一起叫团队</td><td>统一整体和个体</td><td>组织架构树</td><td></td></tr><tr><td>适配器模式（Adapter Pattern）</td><td>将原来不兼容的两个类融合在一起</td><td>万能充电器</td><td>兼容转换</td><td>电源适配</td><td></td></tr><tr><td>桥接模式（Bridge Pattern）</td><td>将两个能够独立变化的部分分离开来</td><td>约定优于配置</td><td>不允许用继承</td><td>桥</td><td></td></tr><tr><td>行为型设计模式 （关注对象之间的通信）</td><td>模板模式（Template Pattern）</td><td>定义一套流程模板，根据需要实现模板中的操作</td><td>流程全部标准化，需要微调请覆盖</td><td>逻辑复用</td><td>把大象装进冰箱</td></tr><tr><td>策略模式（Strategy Pattern）</td><td>封装不同的算法，算法之间能互相替换</td><td>条条大道通罗马，具体哪条你来定</td><td>把选择权交给用户</td><td>选择支付方式</td><td></td></tr><tr><td>责任链模式（Chain of Responsibility Pattern）</td><td>拦截的类都实现统一接口，每个接收者都包含对下一个接收者的引用。将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</td><td>各人自扫门前雪，莫管他们瓦上霜</td><td>解耦处理逻辑</td><td>踢皮球</td><td></td></tr><tr><td>迭代器模式（Iterator Pattern）</td><td>提供一种方法顺序访问一个聚合对象中的各个元素</td><td>流水线上坐一天，每个包裹扫一遍</td><td>统一对集合的访问方式</td><td>逐个检票进站</td><td></td></tr><tr><td>命令模式（Command Pattern）</td><td>将请求封装成命令，并记录下来，能够撤销与重做</td><td>运筹帷幄之中，决胜千里之外</td><td>解耦请求和处理</td><td>遥控器</td><td></td></tr><tr><td>状态模式（State Pattern）</td><td>根据不同的状态做出不同的行为</td><td>状态驱动行为，行为决定状态</td><td>绑定状态和行为</td><td>订单状态跟踪</td><td></td></tr><tr><td>备忘录模式（Memento Pattern）</td><td>保存对象的状态，在需要时进行恢复</td><td>失足不成千古恨，想重来时就重来</td><td>备份、后悔机制</td><td>草稿箱</td><td></td></tr><tr><td>中介者模式（Mediator Pattern）</td><td>将对象之间的通信关联关系封装到一个中介类中单独处理，从而使其耦合松散</td><td>联系方式我给你，怎么搞定我不管</td><td>统一管理网状资源</td><td>朋友圈</td><td></td></tr><tr><td>解释器模式（Interpreter Pattern）</td><td>给定一个语言，定义它的语法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子</td><td>我想说”方言“，一切解释权都归我</td><td>实现特定语法解析</td><td>摩斯密码</td><td></td></tr><tr><td>观察者模式（Observer Pattern）</td><td>状态发生改变时通知观察者，一对多的关系</td><td>到点就通知我</td><td>解耦观察者与被观察者</td><td>闹钟</td><td></td></tr><tr><td>访问者模式（Visitor Pattern）</td><td>稳定数据结构，定义新的操作行为</td><td>横看成岭侧成峰，远近高低各不同</td><td>解耦数据结构和数据操作</td><td>KPI考核</td><td></td></tr><tr><td></td><td>委派模式（Delegate Pattern）</td><td>允许对象组合实现与继承相同的代码重用，负责任务的调用和分配</td><td>这个需求很简单，怎么实现我不管</td><td>只对结果负责</td><td>授权委托书</td></tr></tbody></table></div></div>]]></content>
    
    
    <summary type="html">描述</summary>
    
    
    
    <category term="分类" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="标签" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 - 14 计网习题</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/10/12/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20-%2014%20%E8%AE%A1%E7%BD%91%E4%B9%A0%E9%A2%98/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/10/12/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20-%2014%20%E8%AE%A1%E7%BD%91%E4%B9%A0%E9%A2%98/</id>
    <published>2021-10-12T06:34:26.268Z</published>
    <updated>2021-06-30T00:30:00.000Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="计算机网络-14-计网习题"   >          <a href="#计算机网络-14-计网习题" class="heading-link"><i class="fas fa-link"></i></a>计算机网络 - 14 计网习题</h1>      <span id="more"></span>        <h2 id="题1"   >          <a href="#题1" class="heading-link"><i class="fas fa-link"></i></a>题1</h2>      <p>一、单选题 (每小题2分，共30分)</p><p>下列不是Cerf and Kahn的开发网络体系结构系统设计原则的是:</p><p>A、自治原则</p><p>B、尽力服务</p><p>C、无状态路由 </p><p><strong>D、集中式控制</strong></p><p>协议中规定报文交互事件顺序的要素是: ( )</p><p>A、语法</p><p>B、语义</p><p><strong>C、同步</strong></p><p>D、以上都不是</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210629224831.png" alt="image-20210629224830744" style="zoom:50%;" /></p><p>具有相同上行和下行速率的网络接入技术是: ( )</p><p>A、ADSL</p><p><strong>B、WiFi</strong> </p><p>C、CDMA </p><p>D、4G</p><blockquote><p>我们使用的ADSL是非对称的传输方式，即上行速率不等于下行速率；ADSL上行速率640Kbps到1Mbps，下行速率10Mbps到100Mbps。</p><p><img src="C:\Users\15727\AppData\Roaming\Typora\typora-user-images\image-20210629082042336.png" alt="image-20210629082042336"></p><p><span class="exturl"><a class="exturl__link"   href="https://www.zhihu.com/question/53150127/answer/135456359" >原理上wifi的mac层是对等的</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>这个题可以用排除法啊，ADSL是非对称的，C，D本质上都是同一类型的调制方式，CDMA有3G、4G，只有B是一种局域网络接入方式，理论上两个方向肯定是一样的，就像接收端发送端都是对等的</p></blockquote><p>使用UDP协议的应用层协议是: ( )</p><p>A、HTTP </p><p>B、 SMTP </p><p><strong>C、 DHCP</strong> </p><p>D、 FTP</p><p>不属于路由器设备产生的分组时延是: ( )</p><p><strong>A、传播时延</strong></p><p>B、 传输时延</p><p>C、 排队时延</p><p>D、 节点处理时延</p><p>下列不属于植入恶意软件的攻击方式是: ( )</p><p>A、病毒 </p><p>B、 蠕虫 </p><p>C、木马 </p><p><strong>D、DDoS攻击</strong></p><blockquote><ul><li>病毒<ul><li>基本上是破坏或修改文件</li><li>递归自我复制</li></ul></li><li>木马<ul><li>通过伪装为远程攻击做准备</li></ul></li><li>蠕虫<ul><li>利用网络复制</li><li>可以带有载荷，携带其他恶意行为</li></ul></li><li>rootkit<ul><li>提升到特权权限，控制计算机。</li></ul></li><li>后门<ul><li>绕过安全防护的机制</li><li>可以是软件也可以是算法，甚至是硬件</li></ul></li></ul></blockquote><p>下面不属于P2P网络应用的是: </p><p>A、迅雷下载</p><p>B、 BitTorrent 下载</p><p><strong>C、 电子邮件</strong></p><p>D、 Napster 集中式目录应用</p><p>一个网页文件由1个基本HTML文件和3个引用对象文件组成，所有文件都在同一个Web服务器上，则使用带流水线的持久HTTP连接的方式，显示该网页需要的时间延迟是:( )</p><p>A、2个RTT </p><p>B、3个RTT</p><p><strong>C、 4个RTT</strong></p><p>D、5个RTT</p><p>HTTP服务器使用的默认监听端口号是: ( )</p><p><strong>A、80</strong></p><p>B、8080</p><p>C、20</p><p>D、110</p><p>TCP没有提供的服务是: ( )</p><p>A、连接管理</p><p>B、 可靠传输</p><p>C、 拥塞控制</p><p><strong>D、带宽保证</strong></p><p>如果校验和是8位二进制序列，则数据0x8789的校验和是: ( )</p><p>A、0x10 </p><p><strong>B、 0x11</strong></p><p>C、 0xEF</p><p>D、OxEE</p><p>下列不是网络层功能的是: ( )</p><p>A、选路</p><p>B、转发</p><p><strong>C、进程通信</strong></p><p>D、虚电路连接</p><p>下列不属于192.168.10.0/22子网的IP是: ( )</p><p>A、192.168.101.1</p><p>B、192.168.102.1 </p><p>C、192.168.103.1</p><p><strong>D.  192.168.104.1</strong></p><p>实现给定IP地址解析对应的MAC地址的协议是: </p><p><strong>A、ARP</strong></p><p>B、DNS </p><p>C、 DHCP </p><p>D. HTTP</p><p>15、下列对于二层交换机描述错误的是: ( )</p><p>A、交换机通过MAC帧中的源MAC地址进行自学习更新交换表</p><p>B、交换机通过MAC帧中的目的MAC地址查询交换表确定输出接口</p><p>C、交换机端口连接共享网段使用CSMA/CD进行介质访问</p><p><strong>D、交换机对于冲突的报文进行广播转发</strong></p><blockquote><p>路由器能阻止广播，二层交换机不划分VLAN情况下不能阻止广播，三层交换机三层借口能阻止广播，三层交换机二层接口不能阻止广播。划分VLAN能阻止广播。原因：广播的原理是在同一网段内每个端口都发送一份同样的数据。二层交换机因为没有IP地址识。</p></blockquote><p>二、判断题(每小题2分，共20分)</p><p>1、家庭中电脑连接WiFi的速率和运营商提供的接入带宽是相同的 X</p><p>2、电路交换是面向连接的 V</p><blockquote><p>(单选题) 关于电路交换和分组交换,下列说法不正确的是 ( )</p><p> A. 电路交换是面向连接的 </p><p>B. 分组交换是面向无连接的 </p><p>C. 分组交换使用的是存储转发技术 </p><p>D. 电路交换的传输效率往往很高</p><p>答案 D</p></blockquote><p>3、SSL提供加密的TCP连接 V</p><p>4、两个邮件服务器之间使用POP3或IMAP实现邮件传输 X </p><p>5、TCP流量控制是指发送方的发送窗口小于等于接收方的接收窗口 V</p><p>6、TCP首部字段的序号是当前发送数据段第一个字节在发送缓冲区中的位置编号 V</p><p>7、VPN可以实现在公网上进行加密数据传输 V</p><blockquote><p><strong>vpn</strong>:通过对网络数据的封包和加密传输，<strong>在公网上</strong>传输私有数据，达到私有网络的安全级别。采用<strong>vpn</strong>技术的目的是为了在不安全的信道上<strong>实现</strong>安全信息传输，保证企业内部信息在internet上传输时的机密性和完整性，同时使用鉴别对通过ineternet进行的<strong>数据传输</strong>进行确认。</p><p> ssl:是一种协议； ssh:通过使用ssh，把所有传输的数据<strong>进行加密</strong>。“中间人”在传输中进行攻击就不可能<strong>实现</strong>了。能够防止dns和ip欺骗。并且传输的数据经过压缩，<strong>可以</strong>加快传输的速度。还<strong>可以</strong>代替telnet，<strong>可以</strong>为ftp、pop、甚至ppp提供一个安全的“通道”</p><p>SSH(Secure shell):通过SSH，把所有传输的数据<strong>进行加密</strong>。 Secure Socket Layer，为Netscape所研发，用以保障在Internet上<strong>数据传输</strong>之安全，利用数据加密(Encryption)技术，可确保数据在网络上之传输过程中不会被截取及窃听。 二者的联系与区别：在OSI七层模型中,这两个安全传输协议其实都是建立在应用层上的: 在最初的设计意图中,SSL(Secure Sockets Layer (SSL) and Transport Layer Security (TLS))被设计为加强Web安全传输(HTTP/HTTPS/)的协议(事实上还有SMTP/NNTP等),SSH(Secure Shell)更多的则被设计为加强Telnet/FTP安全的传输协议,默认地,它使用22端口.SSL层: 借助下层协议的的信道安全的协商出一份加密密钥，并用此密钥来加密HTTP请求。</p></blockquote><p>8、DHCP协议使用Discover报文发现DHCP服务器(V )</p><p>9、二层交换机具有路由选择的功能( X )</p><p>10、PPP协议与以太网具有相同的帧格式(X )</p><p>三、简答和计算题(共50分)</p><p>1、简述TCP协议实现的功能? (6分)</p><blockquote><p>传输层用来提供端到端的服务，意思就是在这个层次，不需要关心报文的中间的转发，看上去就像两端直接在通信。<br>网络层则提供点到点的通信，用来处理网络中的报文路由转发。</p><p>TCP提供的高质量服务：可靠传输、流量控制、拥塞避免。</p><p>一、TCP可靠传输<br>可靠传输的话题，在数据链路层就已经得到思考与设计，TCP采用的策略与其十分类似:</p><p> 1）TCP是面向字节流的传输方式，TCP将需要发送的报文以字节流的方式放进TCP缓存中，并每次向IP中传递不定大小的字节流，称为报文段或段</p><p> 2）TCP发出一个报文段后，启动一个定时器，若在定时器到时前，没有收到确认，则重发该报文段。</p><p> 3）TCP通过校验和来检验首部与数据是否发生错误。若是，则丢弃该报文，并不向源套接字发送确认，等待其重传。</p><p> 4）通过IP协议传递过来的数据报很可能会时序到达。TCP协议根据序号可以将这些数据重新排序，最终以正确的顺序交给应用层。</p><p> 5）TCP协议还会丢弃IP数据报传过来的重复数据。</p><p>二、TCP流量控制<br>流量控制是指，当服务器端数据发送速率过快时，存在数据淹没的风险，客户端需要做出调整，降低服务器端的数据发送速率。</p><p>TCP的流量控制依靠设置TCP报文首部中的窗口字段来完成。</p><p>TCP报文窗口字段，决定了客户端接收缓存的大小，通过调整窗口字段，服务器将得知客户端预期接收的字节流大小，并随之调整发送速率。</p><p>三、TCP拥塞避免<br>拥塞避免常易与流量控制混淆，但两者并不相同。</p><p>流量控制是解决由发送方数据发送过快而接收方接收不过来问题的方法，作用于两台主机之间的数据传输，是局部性的。</p><p>拥塞避免是解决全局网络下，由于传输数据报过多，导致带宽不够、资源不足的问题，用于调控全局网络，是宏观性的。</p><p>原文链接：<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/weixin_44580146/article/details/106969663" >https://blog.csdn.net/weixin_44580146/article/details/106969663</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote><p>2、简述使用web缓存后网页请求响应的过程? (6分)</p><p>3、简述DNS服务器类型及DNS查询方法? (6分)</p><p>4、假设客户端建立连接时分配的初始序号是1234,服务器分配的初始序号是2478，填充下列TCP建立连接时的首部标识、序号和确认号的值? (6 分)<br><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210629100259.png" alt="image-20210629100259050"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210629100317.png" alt="image-20210629100317080"></p><p>6、简述路由由器存储转发分组的处理过程? (6 分)</p><p>7、简述Dijsktra算法? (6分)</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210629100350.png" alt="image-20210629100350736"></p>        <h2 id="题2"   >          <a href="#题2" class="heading-link"><i class="fas fa-link"></i></a>题2</h2>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210629202542.png" alt="image-20210629202542369"></p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210629202724.png" alt="image-20210629202717269"></p>        <h2 id="题3"   >          <a href="#题3" class="heading-link"><i class="fas fa-link"></i></a>题3</h2>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210630001953.png" alt="image-20210630001953121"></p><p><strong>Keep Curious , Keep Learning !</strong></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;计算机网络-14-计网习题&quot;   &gt;
          &lt;a href=&quot;#计算机网络-14-计网习题&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;计算机网络 - 14 计网习题&lt;/h1&gt;</summary>
    
    
    
    <category term="基础知识" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="后端" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="前端" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="计算机网络" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 - 13 计网总结</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/10/12/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20-%2013%20%E8%AE%A1%E7%BD%91%E6%80%BB%E7%BB%93/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/10/12/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20-%2013%20%E8%AE%A1%E7%BD%91%E6%80%BB%E7%BB%93/</id>
    <published>2021-10-12T06:34:26.260Z</published>
    <updated>2021-06-29T01:35:10.000Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="计算机网络-13-计网总结"   >          <a href="#计算机网络-13-计网总结" class="heading-link"><i class="fas fa-link"></i></a>计算机网络 - 13 计网总结</h1>      <span id="more"></span>        <h2 id="数据传输过程"   >          <a href="#数据传输过程" class="heading-link"><i class="fas fa-link"></i></a>数据传输过程</h2>              <h2 id="分层总结"   >          <a href="#分层总结" class="heading-link"><i class="fas fa-link"></i></a>分层总结</h2>      <p>每个层需要了解如下几点</p><ol><li>PDU最小传输单位：</li><li>主要设备</li><li>该层传输范围</li><li>该层主要作用</li><li>编址名称和编址方案</li><li>主要协议（协议名称，协议作用，报文格式，交互过程）</li></ol><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210627133353.png" alt="image-20210627133353646"></p>        <h3 id="应用层"   >          <a href="#应用层" class="heading-link"><i class="fas fa-link"></i></a>应用层</h3>              <h4 id="PDU最小传输单位（消息message）"   >          <a href="#PDU最小传输单位（消息message）" class="heading-link"><i class="fas fa-link"></i></a>PDU最小传输单位（消息message）</h4>              <h4 id="主要设备："   >          <a href="#主要设备：" class="heading-link"><i class="fas fa-link"></i></a>主要设备：</h4>      <p>端系统</p>        <h4 id="该层传输范围"   >          <a href="#该层传输范围" class="heading-link"><i class="fas fa-link"></i></a>该层传输范围</h4>              <h4 id="该层主要作用"   >          <a href="#该层主要作用" class="heading-link"><i class="fas fa-link"></i></a>该层主要作用</h4>              <h4 id="编址名称和编址方案"   >          <a href="#编址名称和编址方案" class="heading-link"><i class="fas fa-link"></i></a>编址名称和编址方案</h4>              <h4 id="主要协议（协议名称，协议作用，报文格式，交互过程）"   >          <a href="#主要协议（协议名称，协议作用，报文格式，交互过程）" class="heading-link"><i class="fas fa-link"></i></a>主要协议（协议名称，协议作用，报文格式，交互过程）</h4>              <h3 id="传输层"   >          <a href="#传输层" class="heading-link"><i class="fas fa-link"></i></a>传输层</h3>              <h4 id="PDU最小传输单位（段Segment）"   >          <a href="#PDU最小传输单位（段Segment）" class="heading-link"><i class="fas fa-link"></i></a>PDU最小传输单位（段Segment）</h4>      <p>提供端到端的可靠报文传递和错误恢复（段Segment）</p>        <h4 id="主要设备"   >          <a href="#主要设备" class="heading-link"><i class="fas fa-link"></i></a>主要设备</h4>      <p>端系统</p>        <h4 id="该层传输范围-1"   >          <a href="#该层传输范围-1" class="heading-link"><i class="fas fa-link"></i></a>该层传输范围</h4>              <h4 id="该层主要作用-1"   >          <a href="#该层主要作用-1" class="heading-link"><i class="fas fa-link"></i></a>该层主要作用</h4>              <h4 id="编址名称和编址方案-1"   >          <a href="#编址名称和编址方案-1" class="heading-link"><i class="fas fa-link"></i></a>编址名称和编址方案</h4>              <h4 id="主要协议（协议名称，协议作用，报文格式，交互过程）-1"   >          <a href="#主要协议（协议名称，协议作用，报文格式，交互过程）-1" class="heading-link"><i class="fas fa-link"></i></a>主要协议（协议名称，协议作用，报文格式，交互过程）</h4>              <h5 id="TCP"   >          <a href="#TCP" class="heading-link"><i class="fas fa-link"></i></a>TCP</h5>      <p>为了满足TCP协议不丢包。TCP协议有如下规定</p><p>1、数据分片：发送端对数据进行分片，接受端要对数据进行重组，由TCP确定分片的大小并控制分片和重组</p><p>2、到达确认：接收端接收到分片数据时，根据分片数据序号向发送端发送一个确认</p><p>3、超时重发：发送方在发送分片时设置超时定时器，如果在定时器超时之后没有收到相应的确认，重发分片数据</p><p>4、滑动窗口：TCP连接的每一方的接受缓冲空间大小固定，接收端只允许另一端发送接收端缓冲区所能接纳的数据，TCP在滑动窗口的基础上提供流量控制，防止较快主机致使较慢主机的缓冲区溢出</p><p>5、失序处理：作为IP数据报来传输的TCP分片到达时可能会失序，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层；</p><p>6、重复处理：作为IP数据报来传输的TCP分片会发生重复，TCP的接收端必须丢弃重复的数据；</p><p>7、数据校验：TCP将保持它首部和数据的检验和，这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到分片的检验和有差错，TCP将丢弃这个分片，并不确认收到此报文段导致对端超时并重发</p>        <h5 id="UDP"   >          <a href="#UDP" class="heading-link"><i class="fas fa-link"></i></a>UDP</h5>              <h3 id="网络层"   >          <a href="#网络层" class="heading-link"><i class="fas fa-link"></i></a>网络层</h3>              <h4 id="PDU最小传输单位（包PackeT）"   >          <a href="#PDU最小传输单位（包PackeT）" class="heading-link"><i class="fas fa-link"></i></a>PDU最小传输单位（包PackeT）</h4>      <p>负责数据包从源到宿的传递和网际互连（包PackeT）</p>        <h4 id="主要设备-1"   >          <a href="#主要设备-1" class="heading-link"><i class="fas fa-link"></i></a>主要设备</h4>              <h5 id="路由器（Router）"   >          <a href="#路由器（Router）" class="heading-link"><i class="fas fa-link"></i></a>路由器（Router）</h5>      <p>负责网络层的数据中继。它能理解数据中的IP地址，如果它接收到一个数据包，就检查其中的IP地址：如果目标地址是本地网络的就不理会；如果是其他网络的，就将数据包转发出本地网络。它的作用在于连接相同或不同类型网络，并且能找到网络中数据传输最合适的路径即路由选择。</p><p> 因为路由器仅仅转发特定地址的数据包，不传送不支持路由协议的数据包传送和未知目标网络数据包的传送，所以可以防止广播风暴。</p>        <h5 id="网关（Gateway）"   >          <a href="#网关（Gateway）" class="heading-link"><i class="fas fa-link"></i></a>网关（Gateway）</h5>      <p> 网关（Gateway）负责网络层以上的数据中继，实现不同体系结构的 网络协议转换，它通常采用软件的方法实现，并且与特定的应用服务一一对应。</p><p> 网关是一种复杂的网络连接设备，可以支持不同协议之间的转换，实现不同协议网络之间的互连。网关具有对不兼容的高层协议进行转换的能力，为了实现异构设备之间的通信，网关需要对不同的链路层、专用会话层、表示层和应用层协议进行翻译和转换，所以网关兼有路由器、网桥、中继器的特性。</p><p> 若要使两个完全不同的网络（异构网）连接在一起，一般使用网关，在Internet中两个网络也要通过一台称为网关的计算机实现互联。这台计算机能根据用户通信目标计算机的IP地址，决定是否将用户发出的信息送出本地网络。同时，它还将外界发送给属于本地网络计算机的信息接收过来，它是一个网络与另一个网络相联的通道。为了使TCP/IP协议能够寻址，该通道被赋予一个IP地址，这个IP地址称为网关地址。</p><p> 所以，网关的作用就是将两个使用不同协议的网络段连接在一起的设备，对两个网络段中的使用不同传输协议的数据进行互相的翻译转换。在互连设备中，由于协议转换的复杂性，一般只能进行一对一的转换，或是少数几种特定应用协议的转换。</p>        <h4 id="该层传输范围-2"   >          <a href="#该层传输范围-2" class="heading-link"><i class="fas fa-link"></i></a>该层传输范围</h4>              <h4 id="该层主要作用-2"   >          <a href="#该层主要作用-2" class="heading-link"><i class="fas fa-link"></i></a>该层主要作用</h4>              <h4 id="编址名称和编址方案-2"   >          <a href="#编址名称和编址方案-2" class="heading-link"><i class="fas fa-link"></i></a>编址名称和编址方案</h4>              <h4 id="主要协议（协议名称，协议作用，报文格式，交互过程）-2"   >          <a href="#主要协议（协议名称，协议作用，报文格式，交互过程）-2" class="heading-link"><i class="fas fa-link"></i></a>主要协议（协议名称，协议作用，报文格式，交互过程）</h4>              <h3 id="数据链路层"   >          <a href="#数据链路层" class="heading-link"><i class="fas fa-link"></i></a>数据链路层</h3>              <h4 id="PDU最小传输单位（帧Frame）"   >          <a href="#PDU最小传输单位（帧Frame）" class="heading-link"><i class="fas fa-link"></i></a>PDU最小传输单位（帧Frame）</h4>      <p>将比特组装成帧和点到点的传递（帧Frame）</p>        <h4 id="主要设备-2"   >          <a href="#主要设备-2" class="heading-link"><i class="fas fa-link"></i></a>主要设备</h4>              <h5 id="集线器（HUB）"   >          <a href="#集线器（HUB）" class="heading-link"><i class="fas fa-link"></i></a>集线器（HUB）</h5>      <p> 集线器属于数据链路层，用于连接星型网。</p><p> 集线器（HUB）是一种典型或称为特殊的转发器，其的作用可以简单的理解为将一些机器连接起来组成一个局域网。它不具有智能处理能力，处理的数据只是电流而已，它采用共享带宽的工作方式，附接端口的所有计算机根据 CSMA/CD 协议竞争带宽的使用权，任一时刻只能由两台计算机之间进行通信。</p><p> 集线器属于纯硬件网络底层设备，基本上不具有类似于交换机的”智能记忆”能力和”学习”能力。它也不具备交换机所具有的MAC地址表，所以它发送数据时都是没有针对性的，而是采用 广播方式 发送。也就是说当它要向某节点发送数据时，不是直接把数据发送到目的节点，而是把数据包发送到与集线器相连的所有节点。</p><p>这种广播发送数据方式有两方面不足：</p><p>用户数据包向所有节点发送，很可能带来数据通信的不安全因素，一些别有用心的人很容易就能非法截获他人的数据包<br>CSMA/CD 协议只能采用半双工信道传输，网络通信效率低。再加上所有数据包都是向所有节点同时发送，就更可能造成网络塞车现象，更加降低了网络执行效率</p>        <h5 id="网桥（Gate-Bridge）"   >          <a href="#网桥（Gate-Bridge）" class="heading-link"><i class="fas fa-link"></i></a>网桥（Gate Bridge）</h5>      <p> 网桥（Gate Bridge）负责数据链路层的数据中继。互连两个独立的、仅在低两层实现上有差异的子网。</p><p> 数据链路层的作用包括数据链路的 建立、维护和拆除、帧包装、帧传输、帧同步、帧差错控制以及流量控制等。网桥工作在数据链路层，将两个局域网 LAN 连起来，根据MAC地址来转发帧。它可以有效地联接两个LAN，使本地通信限制在本网段内，并转发相应的信号至另一网段，因此网桥通常用于联接数量不多的、同一类型的网段。</p><p> 网桥的存储和转发功能与中继器相比有优点也有缺点，其优点是：</p><p>使用网桥进行互连克服了物理限制，这意味着构成lan的数据站总数和网段数很容易扩充。<br>网桥纳入存储和转发功能可使其适应于连接使用不同mac协议的两个lan，因而能构成一个不同lan混连在一起的混合网络环境。<br>网桥的中继功能仅仅依赖于mac帧的地址，因而对高层协议完全透明。网桥将一个较大的lan分成段，有利于改善可靠性、可用性和安全性。<br>网桥的主要缺点是：</p><p>由于网桥在执行转发前先接收帧并进行缓冲，与中继器相比会引入更多时延。<br>由于网桥不提供流控功能，因此在流量较大时有可能使其过载，从而造成帧的丢失。<br>其优点多于缺点，所以网桥能得到广泛使用。</p><p> 与转发器一样，网桥只是实现了网络的扩大，从网络层的角度来看，使用转发器连接的两个网络，仍然属于同一个网络。</p>        <h5 id="交换机（Switch）"   >          <a href="#交换机（Switch）" class="heading-link"><i class="fas fa-link"></i></a>交换机（Switch）</h5>      <p> 交换机（Switch）是一种简化的网桥，用于互连相同类型的网络，工作在数据链路层。它采用独享带宽的工作方式，交换机比集线器智能，网络上的数据是MAC地址的集合，它能分辨出帧中的源MAC地址和目的MAC地址，因此可以在任意两个端口之间建立联系，但交换机并不懂得IP地址。</p>        <h4 id="该层传输范围-3"   >          <a href="#该层传输范围-3" class="heading-link"><i class="fas fa-link"></i></a>该层传输范围</h4>              <h4 id="该层主要作用-3"   >          <a href="#该层主要作用-3" class="heading-link"><i class="fas fa-link"></i></a>该层主要作用</h4>              <h4 id="编址名称和编址方案-3"   >          <a href="#编址名称和编址方案-3" class="heading-link"><i class="fas fa-link"></i></a>编址名称和编址方案</h4>              <h4 id="主要协议（协议名称，协议作用，报文格式，交互过程）-3"   >          <a href="#主要协议（协议名称，协议作用，报文格式，交互过程）-3" class="heading-link"><i class="fas fa-link"></i></a>主要协议（协议名称，协议作用，报文格式，交互过程）</h4>              <h3 id="物理层"   >          <a href="#物理层" class="heading-link"><i class="fas fa-link"></i></a>物理层</h3>              <h4 id="PDU最小传输单位（比特Bit）"   >          <a href="#PDU最小传输单位（比特Bit）" class="heading-link"><i class="fas fa-link"></i></a>PDU最小传输单位（比特Bit）</h4>      <p>通过媒介传输比特,确定机械及电气规范（比特Bit）</p>        <h4 id="主要设备-3"   >          <a href="#主要设备-3" class="heading-link"><i class="fas fa-link"></i></a>主要设备</h4>              <h5 id="转发器（Repeater）"   >          <a href="#转发器（Repeater）" class="heading-link"><i class="fas fa-link"></i></a>转发器（Repeater）</h5>      <p>又被称为中继器或放大器，执行物理层协议，负责物理层的数据中继和电气信号的“再生”。用于互连两个相同类型的网段，主要功能是延伸网段和改变传输媒体，从而实现信息位的转发，转发器本身不执行信号的过滤功能。</p><p>转发器只是实现了网络的扩大，从网络层的角度来看，使用转发器连接的两个网络，仍然属于同一个网络。</p>        <h4 id="该层传输范围-4"   >          <a href="#该层传输范围-4" class="heading-link"><i class="fas fa-link"></i></a>该层传输范围</h4>              <h4 id="该层主要作用-4"   >          <a href="#该层主要作用-4" class="heading-link"><i class="fas fa-link"></i></a>该层主要作用</h4>              <h4 id="编址名称和编址方案-4"   >          <a href="#编址名称和编址方案-4" class="heading-link"><i class="fas fa-link"></i></a>编址名称和编址方案</h4>              <h4 id="主要协议（协议名称，协议作用，报文格式，交互过程）-4"   >          <a href="#主要协议（协议名称，协议作用，报文格式，交互过程）-4" class="heading-link"><i class="fas fa-link"></i></a>主要协议（协议名称，协议作用，报文格式，交互过程）</h4>              <h2 id="PDU总结"   >          <a href="#PDU总结" class="heading-link"><i class="fas fa-link"></i></a>PDU总结</h2>      <p>数据帧（Frame）：是一种信息单位，它的起始点和目的点都是数据链路层。</p><p>数据包（Packet）：也是一种信息单位，它的起始和目的地是网络层。</p><p>数据报（Datagram）：通常是指起始点和目的地都使用无连接网络服务的的网络层的信息单元。</p><p>段（Segment）：通常是指起始点和目的地都是传输层的信息单元。</p><p>消息（message）：是指起始点和目的地都在网络层以上（经常在应用层）的信息单元。</p><p><strong>结论: 应用层的http/ftp这些基于TCP的协议较大时可以被TCP拆分成一个个数据段，因为IP不可靠，所以TCP自己会分段，分段的大小保证每个数据段都能被一个IP数据包传输，这样IP发生丢包的时候就可以知道丢了那个，也不用重传整个TCP数据段。当使用基于UDP的应用层协议的时候，数据报会直接交付给IP进行分包，所以不可靠，如果要提高可靠性，需要在应用层进行封装。</strong></p><p><strong>总之：上层的可能被下层的拆分，但是不会被下层的合并</strong></p><p><strong>也就是说，一个数据帧不能有多个数据包，一个数据包不能有多个段，但是反之可以成立</strong></p><p>UDP:直接附上ip头，但在网络层会根据数据帧所能走大小执行分片。</p><p>TCP:双方会互相通报最大报文长度，从而在传输层分片</p><p><strong>首先需要理解的是数据报是不能比数据帧大的，数据帧根据不同网络（无线有线）长度会有所区别，数据包（一块数据）进行为网络层传输时会进行判别，如果长过是网络层要进行分片，成为数据报。</strong></p><p>原因：</p><p>以太网的MTU是1500，你可以用 netstat -i 命令查看这个值。如果IP层有数据包要传，而且数据包的长度超过了MTU，那么IP层就要对数据包进行分片（fragmentation）操作，使每一片的长度都小于或等于MTU。我们假设要传输一个UDP数据包，以太网的MTU为1500字节，一般IP首部为20字节，UDP首部为8字节，数据的净荷（payload）部分预留是1500-20-8=1472字节。如果数据部分大于1472字节，就会出现分片现象。</p><p>IP分片发生在IP层，不仅源端主机会进行分片，中间的路由器也有可能分片，因为不同的网络的MTU是不一样的，如果传输路径上的某个网络的MTU比源端网络的MTU要小，路由器就可能对IP数据报再次进行分片。而分片数据的重组只会发生在目的端的IP层。</p><p>但是正常情况下要避免在网络层分片：</p><p>原因是IP层是没有超时重传机制的，如果IP层对一个数据包进行了分片，只要有一个分片丢失了，只能依赖于传输层进行重传，结果是所有的分片都要重传一遍，这个代价有点大。由此可见，IP分片会大大降低传输层传送数据的成功率，所以我们要避免IP分片。</p><p>所以UDP:对于UDP包，我们需要在应用层去限制每个包的大小，一般不要超过1472字节，即以太网MTU（1500）—UDP首部（8）—IP首部（20）。</p><p>TCP：对于TCP数据，应用层就不需要考虑这个问题了，因为传输层已经帮我们做了。在建立连接的三次握手的过程中，连接双方会相互通告MSS（Maximum Segment Size，最大报文段长度），<strong>MSS一般是MTU—IP首部（20）—TCP首部（20）</strong>，每次发送的TCP数据都不会超过双方MSS的最小值，所以就保证了IP数据报不会超过MTU，避免了IP分片。</p><p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210627132222.png" alt="image-20210627132222209"></p>        <h2 id="物理设备总结"   >          <a href="#物理设备总结" class="heading-link"><i class="fas fa-link"></i></a>物理设备总结</h2>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210629092959.png" alt="image-20210629092959265"></p>        <h2 id="协议总结"   >          <a href="#协议总结" class="heading-link"><i class="fas fa-link"></i></a>协议总结</h2>              <h1 id="参考资料"   >          <a href="#参考资料" class="heading-link"><i class="fas fa-link"></i></a>参考资料</h1>      <p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/Wwinky/article/details/118075564" >各层设备</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><strong>Keep Curious , Keep Learning !</strong></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;计算机网络-13-计网总结&quot;   &gt;
          &lt;a href=&quot;#计算机网络-13-计网总结&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;计算机网络 - 13 计网总结&lt;/h1&gt;</summary>
    
    
    
    <category term="基础知识" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="后端" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="前端" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="计算机网络" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 - 11 计网面试题</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/10/12/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20-%2012%20%E8%AE%A1%E7%BD%91%E9%9D%A2%E8%AF%95-%E7%BC%93%E5%AD%98/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/10/12/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20-%2012%20%E8%AE%A1%E7%BD%91%E9%9D%A2%E8%AF%95-%E7%BC%93%E5%AD%98/</id>
    <published>2021-10-12T06:34:26.253Z</published>
    <updated>2021-06-27T00:34:46.000Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="计算机网络-11-计网面试题"   >          <a href="#计算机网络-11-计网面试题" class="heading-link"><i class="fas fa-link"></i></a>计算机网络 - 11 计网面试题</h1>      <span id="more"></span><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/90507417" >https://zhuanlan.zhihu.com/p/90507417</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><strong>Keep Curious , Keep Learning !</strong></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;计算机网络-11-计网面试题&quot;   &gt;
          &lt;a href=&quot;#计算机网络-11-计网面试题&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;计算机网络 - 11 计网面试题&lt;/h1&gt;</summary>
    
    
    
    <category term="基础知识" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="后端" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="前端" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="计算机网络" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 - 11 计网面试题</title>
    <link href="http://zjeff-953.gitee.io/zjeff/2021/10/12/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20-%2011%20%E8%AE%A1%E7%BD%91%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://zjeff-953.gitee.io/zjeff/2021/10/12/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20-%2011%20%E8%AE%A1%E7%BD%91%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2021-10-12T06:34:26.247Z</published>
    <updated>2021-06-20T00:35:58.000Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="计算机网络-11-计网面试题"   >          <a href="#计算机网络-11-计网面试题" class="heading-link"><i class="fas fa-link"></i></a>计算机网络 - 11 计网面试题</h1>      <p>XS，上课一套， 实验一套，考试一套，面试一套。</p><p>不过没有本质区别，知识侧重点不同</p><span id="more"></span>        <h2 id="100个概念小题"   >          <a href="#100个概念小题" class="heading-link"><i class="fas fa-link"></i></a>100个概念小题</h2>              <h3 id="1）什么是链接？"   >          <a href="#1）什么是链接？" class="heading-link"><i class="fas fa-link"></i></a>1）什么是链接？</h3>      <p>链接是指两个设备之间的连接。它包括用于一个设备能够与另一个设备通信的电缆类型和协议。</p>        <h3 id="2）OSI-参考模型的层次是什么？"   >          <a href="#2）OSI-参考模型的层次是什么？" class="heading-link"><i class="fas fa-link"></i></a>2）OSI 参考模型的层次是什么？</h3>      <p>有 7 个 OSI 层：物理层，数据链路层，网络层，传输层，会话层，表示层和应用层。</p>        <h3 id="3）什么是骨干网-网络核心？"   >          <a href="#3）什么是骨干网-网络核心？" class="heading-link"><i class="fas fa-link"></i></a>3）什么是骨干网/网络核心？</h3>      <p>骨干网络是集中的基础设施，旨在将不同的路由和数据分发到各种网络。它还处理带宽管理和各种通道。</p>        <h3 id="4）什么是-LAN？"   >          <a href="#4）什么是-LAN？" class="heading-link"><i class="fas fa-link"></i></a>4）什么是 LAN？</h3>      <p>LAN 是局域网的缩写。它是指计算机与位于小物理位置的其他网络设备之间的连接。</p>        <h3 id="5）什么是节点？"   >          <a href="#5）什么是节点？" class="heading-link"><i class="fas fa-link"></i></a>5）什么是节点？</h3>      <p>节点是指连接发生的点。它可以是作为网络一部分的计算机或设备。为了形成网络连接，需要两个或更多个节点。</p>        <h3 id="6）什么是路由器？"   >          <a href="#6）什么是路由器？" class="heading-link"><i class="fas fa-link"></i></a>6）什么是路由器？</h3>      <p>路由器可以连接两个或更多网段。这些是在其路由表中存储信息的智能网络设备，例如路径，跳数等。有了这个信息，他们就可以确定数据传输的最佳路径。路由器在 OSI 网络层运行。</p>        <h3 id="7）什么是点对点链接？"   >          <a href="#7）什么是点对点链接？" class="heading-link"><i class="fas fa-link"></i></a>7）什么是点对点链接？</h3>      <p>它是指网络上两台计算机之间的直接连接。除了将电缆连接到两台计算机的 NIC卡之外，点对点连接不需要任何其他网络设备。</p>        <h3 id="8）什么是匿名-FTP？"   >          <a href="#8）什么是匿名-FTP？" class="heading-link"><i class="fas fa-link"></i></a>8）什么是匿名 FTP？</h3>      <p>匿名 FTP 是授予用户访问公共服务器中的文件的一种方式。允许访问这些服务器中的数据的用户不需要识别自己，而是以匿名访客身份登录。</p>        <h3 id="9）什么是子网掩码？"   >          <a href="#9）什么是子网掩码？" class="heading-link"><i class="fas fa-link"></i></a>9）什么是子网掩码？</h3>      <p>子网掩码与 IP 地址组合，以识别两个部分：扩展网络地址和主机地址。像 IP 地址一样，子网掩码由 32 位组成。</p>        <h3 id="10）UTP-电缆允许的最大长度是多少？"   >          <a href="#10）UTP-电缆允许的最大长度是多少？" class="heading-link"><i class="fas fa-link"></i></a>10）UTP 电缆允许的最大长度是多少？</h3>      <p>UTP 电缆的单段具有 90 到 100 米的允许长度。这种限制可以通过使用中继器和开关来克服</p>        <h3 id="11）什么是数据封装？"   >          <a href="#11）什么是数据封装？" class="heading-link"><i class="fas fa-link"></i></a>11）什么是数据封装？</h3>      <p>数据封装是在通过网络传输信息之前将信息分解成更小的可管理块的过程。在这个过程中，源和目标地址与奇偶校验一起附加到标题中。</p>        <h3 id="12）描述网络拓扑"   >          <a href="#12）描述网络拓扑" class="heading-link"><i class="fas fa-link"></i></a>12）描述网络拓扑</h3>      <p>网络拓扑是指计算机网络的布局。它显示了设备和电缆的物理布局，以及它们如何连接到彼此。</p>        <h3 id="13）什么是-VPN？"   >          <a href="#13）什么是-VPN？" class="heading-link"><i class="fas fa-link"></i></a>13）什么是 VPN？</h3>      <p>VPN 意味着虚拟专用网络，这种技术允许通过网络（如 Internet）创建安全通道。</p><p>例如，VPN 允许您建立到远程服务器的安全拨号连接。</p>        <h3 id="14）简要描述-NAT。"   >          <a href="#14）简要描述-NAT。" class="heading-link"><i class="fas fa-link"></i></a>14）简要描述 NAT。</h3>      <p>NAT 是网络地址转换。这是一种协议，为公共网络上的多台计算机提供一种方式来共享到 Internet 的单一连接。</p>        <h3 id="15）OSI-参考模型下网络层的工作是什么？"   >          <a href="#15）OSI-参考模型下网络层的工作是什么？" class="heading-link"><i class="fas fa-link"></i></a>15）OSI 参考模型下网络层的工作是什么？</h3>      <p>网络层负责数据路由，分组交换和网络拥塞控制。路由器在此层下运行。</p>        <h3 id="16）网络拓扑如何影响您在建立网络时的决策？"   >          <a href="#16）网络拓扑如何影响您在建立网络时的决策？" class="heading-link"><i class="fas fa-link"></i></a>16）网络拓扑如何影响您在建立网络时的决策？</h3>      <p>网络拓扑决定了互连设备必须使用什么媒介。它还作为适用于设置的材料，连接器和终端的基础。</p>        <h3 id="17）什么是-RIP？"   >          <a href="#17）什么是-RIP？" class="heading-link"><i class="fas fa-link"></i></a>17）什么是 RIP？</h3>      <p>RIP，路由信息协议的简称由路由器用于将数据从一个网络发送到另一个网络。</p><p>它通过将其路由表广播到网络中的所有其他路由器来有效地管理路由数据。它以跳数为单位确定网络距离。</p>        <h3 id="18）什么是不同的方式来保护计算机网络？"   >          <a href="#18）什么是不同的方式来保护计算机网络？" class="heading-link"><i class="fas fa-link"></i></a>18）什么是不同的方式来保护计算机网络？</h3>      <p>有几种方法可以做到这一点。在所有计算机上安装可靠和更新的防病毒程序。确保防火墙的设置和配置正确。用户认证也将有很大的帮助。所有这些组合将构成一个高度安全的网络。</p>        <h3 id="19）什么是-NIC？"   >          <a href="#19）什么是-NIC？" class="heading-link"><i class="fas fa-link"></i></a>19）什么是 NIC？</h3>      <p>NIC 是网络接口卡（网卡）的缩写。这是连接到 PC 以连接到网络设备。每个 NIC都有自己的 MAC 地址，用于标识网络上的 PC。</p>        <h3 id="20）什么是-WAN？"   >          <a href="#20）什么是-WAN？" class="heading-link"><i class="fas fa-link"></i></a>20）什么是 WAN？</h3>      <p>WAN 代表广域网。它是地理上分散的计算机和设备的互连。它连接位于不同地区和国家/地区的网络。</p>        <h3 id="21）OSI-物理层的重要性是什么？"   >          <a href="#21）OSI-物理层的重要性是什么？" class="heading-link"><i class="fas fa-link"></i></a>21）OSI 物理层的重要性是什么？</h3>      <p>物理层进行从数据位到电信号的转换，反之亦然。这是网络设备和电缆类型的考虑和设置。</p>        <h3 id="22）TCP-IP-下有多少层？"   >          <a href="#22）TCP-IP-下有多少层？" class="heading-link"><i class="fas fa-link"></i></a>22）TCP/IP 下有多少层？</h3>      <p>有四层：网络层，互联网层，传输层和应用层。</p>        <h3 id="23）什么是代理服务器，它们如何保护计算机网络？"   >          <a href="#23）什么是代理服务器，它们如何保护计算机网络？" class="heading-link"><i class="fas fa-link"></i></a>23）什么是代理服务器，它们如何保护计算机网络？</h3>      <p>代理服务器主要防止外部用户识别内部网络的 IP 地址。不知道正确的 IP 地址，甚至无法识别网络的物理位置。代理服务器可以使外部用户几乎看不到网络。</p>        <h3 id="24）OSI-会话层的功能是什么？"   >          <a href="#24）OSI-会话层的功能是什么？" class="heading-link"><i class="fas fa-link"></i></a>24）OSI 会话层的功能是什么？</h3>      <p>该层为网络上的两个设备提供协议和方法，通过举行会话来相互通信。这包括设置会话，管理会话期间的信息交换以及终止会话时的解除过程。</p>        <h3 id="25）实施容错系统的重要性是什么？有限吗？"   >          <a href="#25）实施容错系统的重要性是什么？有限吗？" class="heading-link"><i class="fas fa-link"></i></a>25）实施容错系统的重要性是什么？有限吗？</h3>      <p>容错系统确保持续的数据可用性。这是通过消除单点故障来实现的。但是，在某些情况下，这种类型的系统将无法保护数据，例如意外删除。</p>        <h3 id="26）10Base-T-是什么意思？"   >          <a href="#26）10Base-T-是什么意思？" class="heading-link"><i class="fas fa-link"></i></a>26）10Base-T 是什么意思？</h3>      <p>10 是指数据传输速率，在这种情况下是 10Mbps。“Base”是指基带。T 表示双绞线，这是用于该网络的电缆。</p>        <h3 id="27）什么是私有-IP-地址？"   >          <a href="#27）什么是私有-IP-地址？" class="heading-link"><i class="fas fa-link"></i></a>27）什么是私有 IP 地址？</h3>      <p>专用 IP 地址被分配用于内部网。这些地址用于内部网络，不能在外部公共网络上路由。这些确保内部网络之间不存在任何冲突，同时私有 IP 地址的范围同样可重复使用于多个内部网络，因为它们不会“看到”彼此。</p>        <h3 id="28）什么是-NOS？"   >          <a href="#28）什么是-NOS？" class="heading-link"><i class="fas fa-link"></i></a>28）什么是 NOS？</h3>      <p>NOS 或网络操作系统是专门的软件，其主要任务是向计算机提供网络连接，以便能够与其他计算机和连接的设备进行通信。</p>        <h3 id="29）什么是-DoS？"   >          <a href="#29）什么是-DoS？" class="heading-link"><i class="fas fa-link"></i></a>29）什么是 DoS？</h3>      <p>DoS 或拒绝服务攻击是试图阻止用户访问互联网或任何其他网络服务。这种攻击可能有不同的形式，由一群永久者组成。这样做的一个常见方法是使系统服务器过载，使其无法再处理合法流量，并将被强制重置。</p>        <h3 id="30）什么是-OSI，它在电脑网络中扮演什么角色？"   >          <a href="#30）什么是-OSI，它在电脑网络中扮演什么角色？" class="heading-link"><i class="fas fa-link"></i></a>30）什么是 OSI，它在电脑网络中扮演什么角色？</h3>      <p>OSI（开放系统互连）作为数据通信的参考模型。它由 7 层组成，每层定义了网络设备如何相互连接和通信的特定方面。一层可以处理所使用的物理介质，而另一层则指示如何通过网络实际传输数据。</p>        <h3 id="31）电缆被屏蔽并具有双绞线的目的是什么？"   >          <a href="#31）电缆被屏蔽并具有双绞线的目的是什么？" class="heading-link"><i class="fas fa-link"></i></a>31）电缆被屏蔽并具有双绞线的目的是什么？</h3>      <p>其主要目的是防止串扰。串扰是电磁干扰或噪声，可能影响通过电缆传输的数据。</p>        <h3 id="32）地址共享的优点是什么？"   >          <a href="#32）地址共享的优点是什么？" class="heading-link"><i class="fas fa-link"></i></a>32）地址共享的优点是什么？</h3>      <p>通过使用地址转换而不是路由，地址共享提供了固有的安全性优势。这是因为互联网上的主机只能看到提供地址转换的计算机上的外部接口的公共 IP 地址，而不是内部网络上的私有 IP 地址。</p>        <h3 id="33）什么是-MAC-地址？"   >          <a href="#33）什么是-MAC-地址？" class="heading-link"><i class="fas fa-link"></i></a>33）什么是 MAC 地址？</h3>      <p>MAC 或媒介访问控制，可以唯一地标识网络上的设备。它也被称为物理地址或以太网地址。MAC 地址由 6 个字节组成。</p>        <h3 id="34）在-OSI-参考模型方面，TCP-IP-应用层的等同层或多层是什么？"   >          <a href="#34）在-OSI-参考模型方面，TCP-IP-应用层的等同层或多层是什么？" class="heading-link"><i class="fas fa-link"></i></a>34）在 OSI 参考模型方面，TCP/IP 应用层的等同层或多层是什么？</h3>      <p>TCP/IP 应用层实际上在 OSI 模型上具有三个对等体：会话层，表示层和应用层。</p>        <h3 id="35）如何识别给定-IP-地址的-IP-类？"   >          <a href="#35）如何识别给定-IP-地址的-IP-类？" class="heading-link"><i class="fas fa-link"></i></a>35）如何识别给定 IP 地址的 IP 类？</h3>      <p>通过查看任何给定 IP 地址的第一个八位字节，您可以识别它是 A 类，B 类还是 C类。如果第一个八位字节以 0 位开头，则该地址为 Class A.如果以位 10 开头，则该地址为 B 类地址。如果从 110 开始，那么它是 C 类网络。</p>        <h3 id="36）OSPF-的主要目的是什么？"   >          <a href="#36）OSPF-的主要目的是什么？" class="heading-link"><i class="fas fa-link"></i></a>36）OSPF 的主要目的是什么？</h3>      <p>OSPF 或开放最短路径优先，是使用路由表确定数据交换的最佳路径的链路状态路由协议。</p>        <h3 id="37）什么是防火墙？"   >          <a href="#37）什么是防火墙？" class="heading-link"><i class="fas fa-link"></i></a>37）什么是防火墙？</h3>      <p>防火墙用于保护内部网络免受外部攻击。这些外部威胁可能是黑客谁想要窃取数据或计算机病毒，可以立即消除数据。它还可以防止来自外部网络的其他用户访问专用网络。</p>        <h3 id="38）什么是星形拓扑？"   >          <a href="#38）什么是星形拓扑？" class="heading-link"><i class="fas fa-link"></i></a>38）什么是星形拓扑？</h3>      <p>星形拓扑由连接到节点的中央集线器组成。这是最简单的设置和维护之一。</p>        <h3 id="39）什么是网关？"   >          <a href="#39）什么是网关？" class="heading-link"><i class="fas fa-link"></i></a>39）什么是网关？</h3>      <p>网关提供两个或多个网段之间的连接。它通常是运行网关软件并提供翻译服务的计算机。它是允许不同系统在网络上通信的关键。</p>        <h3 id="40）星型拓扑的缺点是什么？"   >          <a href="#40）星型拓扑的缺点是什么？" class="heading-link"><i class="fas fa-link"></i></a>40）星型拓扑的缺点是什么？</h3>      <p>星形拓扑的一个主要缺点是，一旦中央集线器或交换机被损坏，整个网络就变得不可用了。</p>        <h3 id="41）什么是-SLIP？"   >          <a href="#41）什么是-SLIP？" class="heading-link"><i class="fas fa-link"></i></a>41）什么是 SLIP？</h3>      <p>SLIP 或串行线路接口协议实际上是在 UNIX 早期开发的旧协议。这是用于远程访问的协议之一。</p>        <h3 id="42）给出一些私有网络地址的例子。"   >          <a href="#42）给出一些私有网络地址的例子。" class="heading-link"><i class="fas fa-link"></i></a>42）给出一些私有网络地址的例子。</h3>      <p>10.0.0.0，子网掩码为 255.0.0.0</p><p>172.16.0.0，子网掩码为 255.240.0.0</p><p>192.168.0.0，子网掩码为 255.255.0.0</p><p>个人网站：<span class="exturl"><a class="exturl__link"   href="https://www.cxyxiaowu.com" >https://www.cxyxiaowu.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="43）什么是-Tracert？"   >          <a href="#43）什么是-Tracert？" class="heading-link"><i class="fas fa-link"></i></a>43）什么是 Tracert？</h3>      <p>Tracert 是一个 Windows 实用程序，可用于跟踪从路由器到目标网络的数据采集的路由。它还显示了在整个传输路由期间采用的跳数。</p>        <h3 id="44）网络管理员的功能是什么？"   >          <a href="#44）网络管理员的功能是什么？" class="heading-link"><i class="fas fa-link"></i></a>44）网络管理员的功能是什么？</h3>      <p>网络管理员有许多责任，可以总结为 3 个关键功能：安装网络，配置网络设置以及网络的维护/故障排除。</p>        <h3 id="45）描述对等网络的一个缺点。"   >          <a href="#45）描述对等网络的一个缺点。" class="heading-link"><i class="fas fa-link"></i></a>45）描述对等网络的一个缺点。</h3>      <p>当您正在访问由网络上的某个工作站共享的资源时，该工作站的性能会降低。</p>        <h3 id="46）什么是混合网络？"   >          <a href="#46）什么是混合网络？" class="heading-link"><i class="fas fa-link"></i></a>46）什么是混合网络？</h3>      <p>混合网络是利用客户端 – 服务器和对等体系结构的网络设置。</p>        <h3 id="47）什么是-DHCP？"   >          <a href="#47）什么是-DHCP？" class="heading-link"><i class="fas fa-link"></i></a>47）什么是 DHCP？</h3>      <p>DHCP 是动态主机配置协议的缩写。其主要任务是自动为网络上的设备分配 IP 地址。它首先检查任何设备尚未占用的下一个可用地址，然后将其分配给网络设备。</p>        <h3 id="48）ARP-的主要工作是什么？"   >          <a href="#48）ARP-的主要工作是什么？" class="heading-link"><i class="fas fa-link"></i></a>48）ARP 的主要工作是什么？</h3>      <p>ARP 或地址解析协议的主要任务是将已知的 IP 地址映射到 MAC 层地址。</p>        <h3 id="49）什么是-TCP-IP？"   >          <a href="#49）什么是-TCP-IP？" class="heading-link"><i class="fas fa-link"></i></a>49）什么是 TCP/IP？</h3>      <p>TCP/IP 是传输控制协议/互联网协议的缩写。这是一组协议层，旨在在不同类型的计算机网络（也称为异构网络）上进行数据交换。</p>        <h3 id="50）如何使用路由器管理网络？"   >          <a href="#50）如何使用路由器管理网络？" class="heading-link"><i class="fas fa-link"></i></a>50）如何使用路由器管理网络？</h3>      <p>路由器内置了控制台，可让您配置不同的设置，如安全和数据记录。您可以为计算机分配限制，例如允许访问的资源，或者可以浏览互联网的某一天的特定时间。</p><p>您甚至可以对整个网络中看不到的网站施加限制。</p>        <h3 id="51）当您希望在不同平台（如-UNIX-系统和-Windows-服务器之间）传输文件时，可以应用什么协议？"   >          <a href="#51）当您希望在不同平台（如-UNIX-系统和-Windows-服务器之间）传输文件时，可以应用什么协议？" class="heading-link"><i class="fas fa-link"></i></a>51）当您希望在不同平台（如 UNIX 系统和 Windows 服务器之间）传输文件时，可以应用什么协议？</h3>      <p>使用 FTP（文件传输协议）在这些不同的服务器之间进行文件传输。这是可能的，因为 FTP 是平台无关的。</p>        <h3 id="52）默认网关的使用是什么？"   >          <a href="#52）默认网关的使用是什么？" class="heading-link"><i class="fas fa-link"></i></a>52）默认网关的使用是什么？</h3>      <p>默认网关提供了本地网络连接到外部网络的方法。用于连接外部网络的默认网关通常是外部路由器端口的地址。</p>        <h3 id="53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？"   >          <a href="#53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？" class="heading-link"><i class="fas fa-link"></i></a>53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？</h3>      <p>良好的密码不仅由字母组成，还包括字母和数字的组合。结合大小写字母的密码比使用所有大写字母或全部小写字母的密码有利。密码必须不能被黑客很容易猜到，比如日期，姓名，收藏夹等等。</p>        <h3 id="54）UTP-电缆的正确终止率是多少？"   >          <a href="#54）UTP-电缆的正确终止率是多少？" class="heading-link"><i class="fas fa-link"></i></a>54）UTP 电缆的正确终止率是多少？</h3>      <p>非屏蔽双绞线网线的正常终止是 100 欧姆。</p>        <h3 id="55）什么是-Netstat？"   >          <a href="#55）什么是-Netstat？" class="heading-link"><i class="fas fa-link"></i></a>55）什么是 Netstat？</h3>      <p>Netstat 是一个命令行实用程序。它提供有关连接当前 TCP/IP 设置的有用信息。</p>        <h3 id="56）C-类网络中的网络-ID-数量是多少？"   >          <a href="#56）C-类网络中的网络-ID-数量是多少？" class="heading-link"><i class="fas fa-link"></i></a>56）C 类网络中的网络 ID 数量是多少？</h3>      <p>对于 C 类网络，可用的网络 ID 位数为 21。可能的网络 ID 数目为 2，提高到 21或 2,097,152。每个网络 ID 的主机 ID 数量为 2，增加到 8 减去 2，或 254。</p>        <h3 id="57）使用长于规定长度的电缆时会发生什么？"   >          <a href="#57）使用长于规定长度的电缆时会发生什么？" class="heading-link"><i class="fas fa-link"></i></a>57）使用长于规定长度的电缆时会发生什么？</h3>      <p>电缆太长会导致信号丢失。这意味着数据传输和接收将受到影响，因为信号长度下降。</p>        <h3 id="58）什么常见的软件问题可能导致网络缺陷？"   >          <a href="#58）什么常见的软件问题可能导致网络缺陷？" class="heading-link"><i class="fas fa-link"></i></a>58）什么常见的软件问题可能导致网络缺陷？</h3>      <p>软件相关问题可以是以下任何一种或其组合：</p><p>– 客户端服务器问题</p><p>– 应用程序冲突</p><p>– 配置错误</p><p>– 协议不匹配</p><p>– 安全问题</p><p>– 用户政策和权利问题</p>        <h3 id="59）什么是-ICMP？"   >          <a href="#59）什么是-ICMP？" class="heading-link"><i class="fas fa-link"></i></a>59）什么是 ICMP？</h3>      <p>ICMP 是 Internet 控制消息协议。它为 TCP/IP 协议栈内的协议提供消息传递和通信。这也是管理由 PING 等网络工具使用的错误信息的协议。</p>        <h3 id="60）什么是-Ping？"   >          <a href="#60）什么是-Ping？" class="heading-link"><i class="fas fa-link"></i></a>60）什么是 Ping？</h3>      <p>Ping 是一个实用程序，允许您检查网络上的网络设备之间的连接。您可以使用其IP 地址或设备名称（如计算机名称）ping 设备。</p>        <h3 id="61）什么是点对点（P2P）？"   >          <a href="#61）什么是点对点（P2P）？" class="heading-link"><i class="fas fa-link"></i></a>61）什么是点对点（P2P）？</h3>      <p>对等是不在服务器上回复的网络。该网络上的所有 PC 都是单独的工作站。</p>        <h3 id="62）什么是-DNS？"   >          <a href="#62）什么是-DNS？" class="heading-link"><i class="fas fa-link"></i></a>62）什么是 DNS？</h3>      <p>DNS 是域名系统。该网络服务的主要功能是为 TCP/IP 地址解析提供主机名。</p>        <h3 id="63）光纤与其他介质有什么优势？"   >          <a href="#63）光纤与其他介质有什么优势？" class="heading-link"><i class="fas fa-link"></i></a>63）光纤与其他介质有什么优势？</h3>      <p>光纤的一个主要优点是不太容易受到电气干扰。它还支持更高的带宽，意味着可以发送和接收更多的数据。长距离信号降级也非常小。</p>        <h3 id="64）集线器和交换机有什么区别？"   >          <a href="#64）集线器和交换机有什么区别？" class="heading-link"><i class="fas fa-link"></i></a>64）集线器和交换机有什么区别？</h3>      <p>集线器充当多端口中继器。然而，随着越来越多的设备连接到它，它将无法有效地管理通过它的流量。交换机提供了一个更好的替代方案，可以提高性能，特别是在所有端口上预期有高流量时。</p>        <h3 id="65）Windows-RRAS-服务支持的不同网络协议是什么？"   >          <a href="#65）Windows-RRAS-服务支持的不同网络协议是什么？" class="heading-link"><i class="fas fa-link"></i></a>65）Windows RRAS 服务支持的不同网络协议是什么？</h3>      <p>支持三种主要的网络协议：NetBEUI，TCP/IP 和 IPX。</p>        <h3 id="66）A，B-和-C-类网络中的最大网络和主机是什么？"   >          <a href="#66）A，B-和-C-类网络中的最大网络和主机是什么？" class="heading-link"><i class="fas fa-link"></i></a>66）A，B 和 C 类网络中的最大网络和主机是什么？</h3>      <p>对于 A 类，有 126 个可能的网络和 16,777,214 个主机</p><p>对于 B 类，有 16,384 个可能的网络和 65,534 个主机</p><p>对于 C 类，有 2,097,152 个可能的网络和 254 个主机</p>        <h3 id="67）直通电缆的标准颜色顺序是什么？"   >          <a href="#67）直通电缆的标准颜色顺序是什么？" class="heading-link"><i class="fas fa-link"></i></a>67）直通电缆的标准颜色顺序是什么？</h3>      <p>橙色/白色，橙色，绿色/白色，蓝色，蓝色/白色，绿色，棕色/白色，棕色。</p>        <h3 id="68）什么协议落在-TCP-IP-协议栈的应用层之下？"   >          <a href="#68）什么协议落在-TCP-IP-协议栈的应用层之下？" class="heading-link"><i class="fas fa-link"></i></a>68）什么协议落在 TCP/IP 协议栈的应用层之下？</h3>      <p>以下是 TCP/IP 应用层协议：FTP，TFTP，Telnet 和 SMTP。</p>        <h3 id="69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？"   >          <a href="#69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？" class="heading-link"><i class="fas fa-link"></i></a>69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？</h3>      <p>是的，您可以使用一根电缆将两台计算机连接在一起。在这种情况下可以使用交叉型电缆。在这种设置中，一条电缆的数据传输引脚连接到另一条电缆的数据接收引脚，反之亦然。</p>        <h3 id="70）什么是-ipconfig？"   >          <a href="#70）什么是-ipconfig？" class="heading-link"><i class="fas fa-link"></i></a>70）什么是 ipconfig？</h3>      <p>Ipconfig 是一个常用于识别网络上计算机的地址信息的实用程序。它可以显示物理地址以及 IP 地址。</p>        <h3 id="71）直通和交叉电缆有什么区别？"   >          <a href="#71）直通和交叉电缆有什么区别？" class="heading-link"><i class="fas fa-link"></i></a>71）直通和交叉电缆有什么区别？</h3>      <p>直通电缆用于将计算机连接到交换机，集线器或路由器。交叉电缆用于将两个类似设备连接在一起，如 PC 到 PC 或集线器到集线器。</p>        <h3 id="72）什么是客户端-服务器？"   >          <a href="#72）什么是客户端-服务器？" class="heading-link"><i class="fas fa-link"></i></a>72）什么是客户端/服务器？</h3>      <p>客户端/服务器是一种类型的网络，其中一个或多个计算机充当服务器。服务器提供集中的资源库，如打印机和文件。客户端是指访问服务器的工作站。</p>        <h3 id="73）描述网络。"   >          <a href="#73）描述网络。" class="heading-link"><i class="fas fa-link"></i></a>73）描述网络。</h3>      <p>网络是指用于数据通信的计算机和外围设备之间的互连。可以使用有线电缆或通过无线链路进行网络连接。</p>        <h3 id="74）将-NIC-卡从一台-PC-移动到另一台-PC-时，MAC-地址是否也被转移？"   >          <a href="#74）将-NIC-卡从一台-PC-移动到另一台-PC-时，MAC-地址是否也被转移？" class="heading-link"><i class="fas fa-link"></i></a>74）将 NIC 卡从一台 PC 移动到另一台 PC 时，MAC 地址是否也被转移？</h3>      <p>是的，那是因为 MAC 地址是硬连线到 NIC 电路，而不是 PC。这也意味着当 NIC卡被另一个替换时，PC 可以具有不同的 MAC 地址。</p>        <h3 id="75）解释聚类支持"   >          <a href="#75）解释聚类支持" class="heading-link"><i class="fas fa-link"></i></a>75）解释聚类支持</h3>      <p>群集支持是指网络操作系统在容错组中连接多台服务器的能力。这样做的主要目的是在一台服务器发生故障的情况下，集群中的下一个服务器将继续进行所有处理。</p>        <h3 id="76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？"   >          <a href="#76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？" class="heading-link"><i class="fas fa-link"></i></a>76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？</h3>      <p>必须在所有服务器和工作站上安装防病毒程序，以确保保护。这是因为个人用户可以访问任何工作站，并在插入可移动硬盘驱动器或闪存驱动器时引入计算机病毒。</p>        <h3 id="77）描述以太网。"   >          <a href="#77）描述以太网。" class="heading-link"><i class="fas fa-link"></i></a>77）描述以太网。</h3>      <p>以太网是当今使用的流行网络技术之一。它是在 20 世纪 70 年代初开发的，并且基于 IEEE 中规定的规范。以太网在局域网中使用。</p>        <h3 id="78）实现环形拓扑有什么缺点？"   >          <a href="#78）实现环形拓扑有什么缺点？" class="heading-link"><i class="fas fa-link"></i></a>78）实现环形拓扑有什么缺点？</h3>      <p>如果网络上的一个工作站发生故障，可能会导致整个网络丢失。另一个缺点是，当需要在网络的特定部分进行调整和重新配置时，整个网络也必须被暂时关闭。</p>        <h3 id="79）CSMA-CD-和-CSMA-CA-有什么区别？"   >          <a href="#79）CSMA-CD-和-CSMA-CA-有什么区别？" class="heading-link"><i class="fas fa-link"></i></a>79）CSMA/CD 和 CSMA/CA 有什么区别？</h3>      <p>CSMA/CD 或碰撞检测，每当碰撞发生时重新发送数据帧。CSMA/CA 或碰撞避免，将首先在数据传输之前广播意图发送。</p>        <h3 id="80）什么是-SMTP？"   >          <a href="#80）什么是-SMTP？" class="heading-link"><i class="fas fa-link"></i></a>80）什么是 SMTP？</h3>      <p>SMTP 是简单邮件传输协议的缩写。该协议处理所有内部邮件，并在 TCP/IP 协议栈上提供必要的邮件传递服务。</p>        <h3 id="81）什么是组播路由？"   >          <a href="#81）什么是组播路由？" class="heading-link"><i class="fas fa-link"></i></a>81）什么是组播路由？</h3>      <p>组播路由是一种有针对性的广播形式，将消息发送到所选择的用户组，而不是将其发送到子网上的所有用户。</p>        <h3 id="82）加密在网络上的重要性是什么？"   >          <a href="#82）加密在网络上的重要性是什么？" class="heading-link"><i class="fas fa-link"></i></a>82）加密在网络上的重要性是什么？</h3>      <p>加密是将信息转换成用户不可读的代码的过程。然后使用秘密密钥或密码将其翻译或解密回其正常可读格式。加密有助于确保中途截获的信息仍然不可读，因为用户必须具有正确的密码或密钥。</p>        <h3 id="83）如何安排和显示-IP-地址？"   >          <a href="#83）如何安排和显示-IP-地址？" class="heading-link"><i class="fas fa-link"></i></a>83）如何安排和显示 IP 地址？</h3>      <p>IP 地址显示为一系列由周期或点分隔的四位十进制数字。这种安排的另一个术语是点分十进制格式。一个例子是 192.168.101.2</p>        <h3 id="84）解释认证的重要性。"   >          <a href="#84）解释认证的重要性。" class="heading-link"><i class="fas fa-link"></i></a>84）解释认证的重要性。</h3>      <p>认证是在用户登录网络之前验证用户凭据的过程。它通常使用用户名和密码进行。这提供了限制来自网络上的有害入侵者的访问的安全手段。</p>        <h3 id="85）隧道模式是什么意思？"   >          <a href="#85）隧道模式是什么意思？" class="heading-link"><i class="fas fa-link"></i></a>85）隧道模式是什么意思？</h3>      <p>这是一种数据交换模式，其中两个通信计算机本身不使用 IPSec。相反，将 LAN连接到中转网络的网关创建了一个使用 IPSec 协议来保护通过它的所有通信的虚拟隧道。</p>        <h3 id="86）建立-WAN-链路涉及的不同技术有哪些？"   >          <a href="#86）建立-WAN-链路涉及的不同技术有哪些？" class="heading-link"><i class="fas fa-link"></i></a>86）建立 WAN 链路涉及的不同技术有哪些？</h3>      <p>模拟连接 – 使用常规电话线；数字连接 – 使用数字电话线；交换连接 – 使用发送方和接收方之间的多组链接来移动数据。</p>        <h3 id="87）网格拓扑的一个优点是什么？"   >          <a href="#87）网格拓扑的一个优点是什么？" class="heading-link"><i class="fas fa-link"></i></a>87）网格拓扑的一个优点是什么？</h3>      <p>在一个链接失败的情况下，总会有另一个链接可用。网状拓扑实际上是最容错的网络拓扑之一。</p>        <h3 id="88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？"   >          <a href="#88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？" class="heading-link"><i class="fas fa-link"></i></a>88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？</h3>      <p>大部分网络由硬件组成。这些领域的问题可能包括硬盘故障，NIC 损坏甚至硬件启动。不正确的硬件配置也是其中一个疑难问题。</p>        <h3 id="89）可以做什么来修复信号衰减问题？"   >          <a href="#89）可以做什么来修复信号衰减问题？" class="heading-link"><i class="fas fa-link"></i></a>89）可以做什么来修复信号衰减问题？</h3>      <p>处理这种问题的常见方法是使用中继器和集线器，因为它将有助于重新生成信号，从而防止信号丢失。检查电缆是否正确终止也是必须的。</p>        <h3 id="90）动态主机配置协议如何协助网络管理？"   >          <a href="#90）动态主机配置协议如何协助网络管理？" class="heading-link"><i class="fas fa-link"></i></a>90）动态主机配置协议如何协助网络管理？</h3>      <p>网络管理员不必访问每台客户端计算机来配置静态 IP 地址，而是可以应用动态主机配置协议来创建称为可以动态分配给客户端的范围的 IP 地址池。</p>        <h3 id="91）解释网络概念的概况？"   >          <a href="#91）解释网络概念的概况？" class="heading-link"><i class="fas fa-link"></i></a>91）解释网络概念的概况？</h3>      <p>配置文件是为每个用户设置的配置设置。例如，可以创建将用户置于组中的配置文件。</p>        <h3 id="92）什么是-Sneakernet？"   >          <a href="#92）什么是-Sneakernet？" class="heading-link"><i class="fas fa-link"></i></a>92）什么是 Sneakernet？</h3>      <p>Sneakernet 被认为是最早的联网形式，其中使用可移动介质（如磁盘，磁带）物理传输数据。</p>        <h3 id="93）IEEE-在计算机网络中的作用是什么？"   >          <a href="#93）IEEE-在计算机网络中的作用是什么？" class="heading-link"><i class="fas fa-link"></i></a>93）IEEE 在计算机网络中的作用是什么？</h3>      <p>IEEE 或电气和电子工程师学会是由电气和电子设备标准发布和管理的工程师组成的组织。这包括网络设备，网络接口，cablings 和连接器。</p>        <h3 id="94）TCP-IP-Internet-层下有哪些协议？"   >          <a href="#94）TCP-IP-Internet-层下有哪些协议？" class="heading-link"><i class="fas fa-link"></i></a>94）TCP/IP Internet 层下有哪些协议？</h3>      <p>该层管理的协议有 4 种。这些是 ICMP，IGMP，IP 和 ARP。</p>        <h3 id="95）谈到网络，什么是权限？"   >          <a href="#95）谈到网络，什么是权限？" class="heading-link"><i class="fas fa-link"></i></a>95）谈到网络，什么是权限？</h3>      <p>权限是指在网络上执行特定操作的授权许可。网络上的每个用户可以分配个人权限，具体取决于该用户必须允许的内容。</p>        <h3 id="96）建立-VLAN-的一个基本要求是什么？"   >          <a href="#96）建立-VLAN-的一个基本要求是什么？" class="heading-link"><i class="fas fa-link"></i></a>96）建立 VLAN 的一个基本要求是什么？</h3>      <p>需要一个 VLAN，因为在交换机级别只有一个广播域，这意味着每当新用户连接时，该信息都会传播到整个网络。交换机上的 VLAN 有助于在交换机级别创建单独的广播域。它用于安全目的。</p>        <h3 id="97）什么是-IPv6？"   >          <a href="#97）什么是-IPv6？" class="heading-link"><i class="fas fa-link"></i></a>97）什么是 IPv6？</h3>      <p>IPv6 或 Internet 协议版本 6 被开发以替代 IPv4。目前，IPv4 正在用于控制互联网流量，但 IPv4 已经饱和。IPv6 能够克服这个限制。</p>        <h3 id="98）什么是-RSA-算法？"   >          <a href="#98）什么是-RSA-算法？" class="heading-link"><i class="fas fa-link"></i></a>98）什么是 RSA 算法？</h3>      <p>RSA 是 Rivest-Shamir-Adleman 算法的缩写。它是目前最常用的公钥加密算法。</p><p>详细介绍：<span class="exturl"><a class="exturl__link"   href="http://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247485579&amp;idx=2&amp;sn=e4a9085fc53a9138d16be34994b9e269&amp;chksm=fa0e670acd79ee1c9c37632cb1ec2de0a5de2e210381bd1a867304bea22a78f6153294661e74&amp;scene=21#wechat_redirect" >https://www.cxyxiaowu.com/718.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="99）什么是网格拓扑？"   >          <a href="#99）什么是网格拓扑？" class="heading-link"><i class="fas fa-link"></i></a>99）什么是网格拓扑？</h3>      <p>网格拓扑是一种设置，其中每个设备都直接连接到网络上的每个其他设备。因此，它要求每个设备具有至少两个网络连接。</p>        <h3 id="100）100Base-FX-网络的最大段长度是多少？"   >          <a href="#100）100Base-FX-网络的最大段长度是多少？" class="heading-link"><i class="fas fa-link"></i></a>100）100Base-FX 网络的最大段长度是多少？</h3>      <p>使用 100Base-FX 的网段的最大允许长度为 412 米。整个网络的最大长度为 5 公里。</p>        <h2 id="谈下你对五层网络协议体系结构的理解？"   >          <a href="#谈下你对五层网络协议体系结构的理解？" class="heading-link"><i class="fas fa-link"></i></a>谈下你对五层网络协议体系结构的理解？</h2>      <p>学习计算机网络时我们一般采用折中的办法，也就是中和 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构，这样既简洁又能将概念阐述清楚。</p>        <h3 id="1-应用层"   >          <a href="#1-应用层" class="heading-link"><i class="fas fa-link"></i></a>1. 应用层</h3>      <p>应用层（application-layer）的任务是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统 DNS，支持万维网应用的 HTTP 协议，支持电子邮件的 SMTP 协议等等。我们把应用层交互的数据单元称为报文。</p>        <h3 id="2-运输层"   >          <a href="#2-运输层" class="heading-link"><i class="fas fa-link"></i></a>2. 运输层</h3>      <p>运输层（transport layer）的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务。应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。</p><p>由于一台主机可同时运行多个线程，因此运输层有复用和分用的功能。所谓复用就是指多个应用层进程可同时使用下面运输层的服务，分用和复用相反，是运输层把收到的信息分别交付上面应用层中的相应进程。</p>        <h3 id="3-网络层"   >          <a href="#3-网络层" class="heading-link"><i class="fas fa-link"></i></a>3. 网络层</h3>      <p>在计算机网络中进行通信的两个计算机之间可能会经过很多个数据链路，也可能还要经过很多通信子网。网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP / IP 体系结构中，由于网络层使用 IP 协议，因此分组也叫 IP 数据报，简称数据报。</p>        <h3 id="4-数据链路层"   >          <a href="#4-数据链路层" class="heading-link"><i class="fas fa-link"></i></a>4. 数据链路层</h3>      <p>数据链路层（data link layer）通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如：同步信息，地址信息，差错控制等）。</p><p>在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提出数据部分，上交给网络层。控制信息还使接收端能够检测到所收到的帧中有无差错。如果发现差错，数据链路层就简单地丢弃这个出了差错的帧，以避免继续在网络中传送下去白白浪费网络资源。如果需要改正数据在链路层传输时出现差错（这就是说，数据链路层不仅要检错，而且还要纠错），那么就要采用可靠性传输协议来纠正出现的差错。这种方法会使链路层的协议复杂些。</p>        <h3 id="5-物理层"   >          <a href="#5-物理层" class="heading-link"><i class="fas fa-link"></i></a>5. 物理层</h3>      <p>在物理层上所传送的数据单位是比特。物理层（physical layer）的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。</p>        <h2 id="常用协议"   >          <a href="#常用协议" class="heading-link"><i class="fas fa-link"></i></a>常用协议</h2>      <p><img src="https://gitee.com/zjeff-953/picsBed/raw/master/image/20210620082340.jpg" alt="5-1604667697" style="zoom: 80%;" /></p><p><strong>Keep Curious , Keep Learning !</strong></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;计算机网络-11-计网面试题&quot;   &gt;
          &lt;a href=&quot;#计算机网络-11-计网面试题&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;计算机网络 - 11 计网面试题&lt;/h1&gt;
      &lt;p&gt;XS，上课一套， 实验一套，考试一套，面试一套。&lt;/p&gt;
&lt;p&gt;不过没有本质区别，知识侧重点不同&lt;/p&gt;</summary>
    
    
    
    <category term="基础知识" scheme="http://zjeff-953.gitee.io/zjeff/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="后端" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="前端" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="计算机网络" scheme="http://zjeff-953.gitee.io/zjeff/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
